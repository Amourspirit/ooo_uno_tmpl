# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .x_window_peer import XWindowPeer
    from .rectangle import Rectangle
    from .window_class import WindowClass

class WindowDescriptor(object):
    """
    describes a window.

    See Also:
        `API WindowDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1WindowDescriptor.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, Bounds: 'Rectangle', Parent: 'XWindowPeer', ParentIndex: int, Type: 'WindowClass', WindowAttributes: int, WindowServiceName: str):
        self._Bounds = Bounds
        self._Parent = Parent
        self._ParentIndex = ParentIndex
        self._Type = Type
        self._WindowAttributes = WindowAttributes
        self._WindowServiceName = WindowServiceName

    @property
    def Bounds(self) -> 'Rectangle':
        """
        specifies the position and size of the window.
        
        This member is ignored if the window attribute is com.sun.star.awt.WindowAttribute.FULLSIZE.

        **Libre Office Type:** ``com.sun.star.awt.Rectangle``
        """
        return self._Bounds

    @property
    def Parent(self) -> 'XWindowPeer':
        """
        specifies the parent of the component.
        
        If Parent == 0 && ParentIndex == -1, then the window is on the desktop.

        **Libre Office Type:** ``com.sun.star.awt.XWindowPeer``
        """
        return self._Parent

    @property
    def ParentIndex(self) -> int:
        """
        specifies the index of the parent window, if available.
        
        If Parent == 0 and this struct is a member of an array, then this is the offset from the beginning of the array to the parent. A value of -1 means desktop.

        **Libre Office Type:** ``short``
        """
        return self._ParentIndex

    @property
    def Type(self) -> 'WindowClass':
        """
        specifies the type of window.

        **Libre Office Type:** ``com.sun.star.awt.WindowClass``
        """
        return self._Type

    @property
    def WindowAttributes(self) -> int:
        """
        specifies the window attributes.
        
        Use one value out of the constant group com.sun.star.awt.WindowAttribute.

        **Libre Office Type:** ``long``
        """
        return self._WindowAttributes

    @property
    def WindowServiceName(self) -> str:
        """
        specifies the name of the component service.
        
        A zero length name means that the VCL creates a blank top, a container, or a simple window. The following service names are defined:

        **Libre Office Type:** ``string``
        """
        return self._WindowServiceName

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global WindowDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        WindowDescriptor = namedtuple('WindowDescriptor', ['Bounds', 'Parent', 'ParentIndex', 'Type', 'WindowAttributes', 'WindowServiceName'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['WindowDescriptor']

