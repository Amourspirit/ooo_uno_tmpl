# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class SimpleFontMetric(object):
    """
    describes the general metrics of a certain font.

    See Also:
        `API SimpleFontMetric <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1SimpleFontMetric.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, Ascent: int, Descent: int, FirstChar: str, LastChar: str, Leading: int, Slant: int):
        self._Ascent = Ascent
        self._Descent = Descent
        self._FirstChar = FirstChar
        self._LastChar = LastChar
        self._Leading = Leading
        self._Slant = Slant

    @property
    def Ascent(self) -> int:
        """
        specifies the portion of a lower case character that rises above the height of the character "x" of the font.
        
        For example, the letters "b", "d", "h", "k" and "l" have an ascent unequal to 0.
        
        The ascent is measured in pixels, thus the font metric is device dependent.

        **Libre Office Type:** ``short``
        """
        return self._Ascent

    @property
    def Descent(self) -> int:
        """
        specifies the portion of a letter falling below the baseline.
        
        For example, the letters "g", "p", and "y" have a descent unequal to 0.
        
        The descent is measured in pixels, thus the font metric is device dependent.

        **Libre Office Type:** ``short``
        """
        return self._Descent

    @property
    def FirstChar(self) -> str:
        """
        specifies the code of the first printable character in the font.

        **Libre Office Type:** ``char``
        """
        return self._FirstChar

    @property
    def LastChar(self) -> str:
        """
        specifies the code of the last printable character in the font.

        **Libre Office Type:** ``char``
        """
        return self._LastChar

    @property
    def Leading(self) -> int:
        """
        specifies the vertical space between lines of this font; it is also called internal line spacing.
        
        The leading is measured in pixels, thus the font metric is device dependent.

        **Libre Office Type:** ``short``
        """
        return self._Leading

    @property
    def Slant(self) -> int:
        """
        specifies the slant of the characters (italic).
        
        The slant is measured in degrees from 0 to 359.

        **Libre Office Type:** ``short``
        """
        return self._Slant

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global SimpleFontMetric
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        SimpleFontMetric = namedtuple('SimpleFontMetric', ['Ascent', 'Descent', 'FirstChar', 'LastChar', 'Leading', 'Slant'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['SimpleFontMetric']

