# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class InputEvent(object):
    """
    the root event class for all component-level input events.

    Input events are delivered to listeners before they are processed normally by the source where they originated.

    See Also:
        `API InputEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1InputEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, Modifiers: int):
        self._Modifiers = Modifiers

    @property
    def Modifiers(self) -> int:
        """
        contains the modifier keys which were pressed while the event occurred.
        
        Zero or more constants from the com.sun.star.awt.KeyModifier group.

        **Libre Office Type:** ``short``
        """
        return self._Modifiers

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global InputEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        InputEvent = namedtuple('InputEvent', ['Modifiers'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['InputEvent']

