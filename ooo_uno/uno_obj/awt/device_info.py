# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class DeviceInfo(object):
    """
    contains information about a device.

    See Also:
        `API DeviceInfo <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1DeviceInfo.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, BitsPerPixel: int, BottomInset: int, Capabilities: int, Height: int, LeftInset: int, PixelPerMeterX: float, PixelPerMeterY: float, RightInset: int, TopInset: int, Width: int):
        self._BitsPerPixel = BitsPerPixel
        self._BottomInset = BottomInset
        self._Capabilities = Capabilities
        self._Height = Height
        self._LeftInset = LeftInset
        self._PixelPerMeterX = PixelPerMeterX
        self._PixelPerMeterY = PixelPerMeterY
        self._RightInset = RightInset
        self._TopInset = TopInset
        self._Width = Width

    @property
    def BitsPerPixel(self) -> int:
        """
        contains the color-depth of the device.

        **Libre Office Type:** ``short``
        """
        return self._BitsPerPixel

    @property
    def BottomInset(self) -> int:
        """
        contains the inset from the bottom.

        **Libre Office Type:** ``long``
        """
        return self._BottomInset

    @property
    def Capabilities(self) -> int:
        """
        specifies special operations which are possible on the device.

        **Libre Office Type:** ``long``
        """
        return self._Capabilities

    @property
    def Height(self) -> int:
        """
        contains the height of the device in pixels.

        **Libre Office Type:** ``long``
        """
        return self._Height

    @property
    def LeftInset(self) -> int:
        """
        contains the inset from the left.

        **Libre Office Type:** ``long``
        """
        return self._LeftInset

    @property
    def PixelPerMeterX(self) -> float:
        """
        contains the X-axis resolution of the device in pixel/meter.

        **Libre Office Type:** ``double``
        """
        return self._PixelPerMeterX

    @property
    def PixelPerMeterY(self) -> float:
        """
        contains the Y-axis resolution of the device in pixel/meter.

        **Libre Office Type:** ``double``
        """
        return self._PixelPerMeterY

    @property
    def RightInset(self) -> int:
        """
        contains the inset from the right.

        **Libre Office Type:** ``long``
        """
        return self._RightInset

    @property
    def TopInset(self) -> int:
        """
        contains the inset from the top.

        **Libre Office Type:** ``long``
        """
        return self._TopInset

    @property
    def Width(self) -> int:
        """
        contains the width of the device in pixels.

        **Libre Office Type:** ``long``
        """
        return self._Width

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global DeviceInfo
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        DeviceInfo = namedtuple('DeviceInfo', ['BitsPerPixel', 'BottomInset', 'Capabilities', 'Height', 'LeftInset', 'PixelPerMeterX', 'PixelPerMeterY', 'RightInset', 'TopInset', 'Width'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['DeviceInfo']

