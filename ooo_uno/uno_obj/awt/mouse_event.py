# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class MouseEvent(object):
    """
    specifies an event from the mouse.

    This event is also used for pop-up menu requests on objects. See PopupTrigger for details.

    See Also:
        `API MouseEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1MouseEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, Buttons: int, ClickCount: int, PopupTrigger: bool, X: int, Y: int):
        self._Buttons = Buttons
        self._ClickCount = ClickCount
        self._PopupTrigger = PopupTrigger
        self._X = X
        self._Y = Y

    @property
    def Buttons(self) -> int:
        """
        contains the pressed mouse buttons.
        
        Zero ore more constants from the com.sun.star.awt.MouseButton group.

        **Libre Office Type:** ``short``
        """
        return self._Buttons

    @property
    def ClickCount(self) -> int:
        """
        contains the number of mouse clicks associated with event.

        **Libre Office Type:** ``long``
        """
        return self._ClickCount

    @property
    def PopupTrigger(self) -> bool:
        """
        specifies if this event is a pop-up menu trigger event.
        
        If this member is TRUE, the event describes a request for a pop-up menu, also known as context menu, on an object.
        
        In this case, X and Y describe the position where the request was issued. If those members are -1, then the request was issued using the keyboard, by pressing the operating-system dependent key combination for this purpose.

        **Libre Office Type:** ``boolean``
        """
        return self._PopupTrigger

    @property
    def X(self) -> int:
        """
        contains the x coordinate location of the mouse.

        **Libre Office Type:** ``long``
        """
        return self._X

    @property
    def Y(self) -> int:
        """
        contains the y coordinate location of the mouse.

        **Libre Office Type:** ``long``
        """
        return self._Y

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global MouseEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        MouseEvent = namedtuple('MouseEvent', ['Buttons', 'ClickCount', 'PopupTrigger', 'X', 'Y'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['MouseEvent']

