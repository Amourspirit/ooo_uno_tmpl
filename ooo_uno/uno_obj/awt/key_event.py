# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class KeyEvent(object):
    """
    specifies a key event.

    See Also:
        `API KeyEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1KeyEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, KeyChar: str, KeyCode: int, KeyFunc: int):
        self._KeyChar = KeyChar
        self._KeyCode = KeyCode
        self._KeyFunc = KeyFunc

    @property
    def KeyChar(self) -> str:
        """
        contains the Unicode character generated by this event or 0.

        **Libre Office Type:** ``char``
        """
        return self._KeyChar

    @property
    def KeyCode(self) -> int:
        """
        contains the integer code representing the key of the event.
        
        This is a constant from the constant group Key.

        **Libre Office Type:** ``short``
        """
        return self._KeyCode

    @property
    def KeyFunc(self) -> int:
        """
        contains the function type of the key event.
        
        This is a constant from the constant group KeyFunction.

        **Libre Office Type:** ``short``
        """
        return self._KeyFunc

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global KeyEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        KeyEvent = namedtuple('KeyEvent', ['KeyChar', 'KeyCode', 'KeyFunc'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['KeyEvent']

