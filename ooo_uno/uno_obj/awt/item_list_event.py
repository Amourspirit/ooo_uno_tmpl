# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class ItemListEvent(object):
    """
    is the event broadcasted by a XListItems implementation for changes in its item list.

    See Also:
        `API ItemListEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1ItemListEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, ItemPosition: int, string: str, string: str):
        self._ItemPosition = ItemPosition
        self._string = string
        self._string = string

    @property
    def ItemPosition(self) -> int:
        """
        specifies the position of the item which is affected by the event
        
        In case the event is not related to a single item, but to the complete list, the value of this member is undefined.

        **Libre Office Type:** ``long``
        """
        return self._ItemPosition

    @property
    def string(self) -> str:
        """
        the URL of the image of the item
        
        If the event being notified did not touch the image of an item, this member is empty. For instance, upon invocation of XItemList.setItemText(), only ItemText will be set, and ItemImageURL will be empty.

        **Libre Office Type:** ``string``
        """
        return self._string

    @property
    def string(self) -> str:
        """
        the text of the item.
        
        If the event being notified did not touch the text of an item, this member is empty. For instance, upon invocation of XItemList.setItemImage(), only ItemImageURL will be set, and ItemText will be empty.

        **Libre Office Type:** ``string``
        """
        return self._string

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global ItemListEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        ItemListEvent = namedtuple('ItemListEvent', ['ItemPosition', 'string', 'string'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['ItemListEvent']

