# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .point import Point

class EndPopupModeEvent(object):
    """
    specifies an end pop-up mode event.

    See Also:
        `API EndPopupModeEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1EndPopupModeEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, FloatingPosition: 'Point', bTearoff: bool):
        self._FloatingPosition = FloatingPosition
        self._bTearoff = bTearoff

    @property
    def FloatingPosition(self) -> 'Point':
        """
        specifies the new position of the floating window in frame coordinates if bTearoff is TRUE

        **Libre Office Type:** ``com.sun.star.awt.Point``
        """
        return self._FloatingPosition

    @property
    def bTearoff(self) -> bool:
        """
        specifies how the pop-up mode was ended TRUE means the window should be teared-off and positioned at FloatingPosition FALSE means the window was closed

        **Libre Office Type:** ``boolean``
        """
        return self._bTearoff

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global EndPopupModeEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        EndPopupModeEvent = namedtuple('EndPopupModeEvent', ['FloatingPosition', 'bTearoff'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['EndPopupModeEvent']

