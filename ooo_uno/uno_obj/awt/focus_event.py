# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .uno.x_interface import XInterface

class FocusEvent(object):
    """
    specifies a keyboard focus event.

    There are two levels of focus change events: permanent and temporary. Permanent focus change events occur when focus is directly moved from one component to another, such as through calls to requestFocus() or as the user uses the Tab key to traverse components. Temporary focus change events occur when focus is gained or lost for a component as the indirect result of another operation, such as window deactivation or a scrollbar drag. In this case, the original focus state will automatically be restored once that operation is finished, or for the case of window deactivation, when the window is reactivated. Both permanent and temporary focus events are delivered using the FOCUS_GAINED and FOCUS_LOST event ids; the levels may be distinguished in the event using the isTemporary() method.

    See Also:
        `API FocusEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1FocusEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, FocusFlags: int, NextFocus: 'XInterface', Temporary: bool):
        self._FocusFlags = FocusFlags
        self._NextFocus = NextFocus
        self._Temporary = Temporary

    @property
    def FocusFlags(self) -> int:
        """
        specifies the reason for the focus change as an arithmetic-or combination of FocusChangeReason.

        **Libre Office Type:** ``short``
        """
        return self._FocusFlags

    @property
    def NextFocus(self) -> 'XInterface':
        """
        contains the window which gets the focus on a lose focus event.

        **Libre Office Type:** ``com.sun.star.uno.XInterface``
        """
        return self._NextFocus

    @property
    def Temporary(self) -> bool:
        """
        specifies if this focus change event is a temporary change.

        **Libre Office Type:** ``boolean``
        """
        return self._Temporary

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global FocusEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        FocusEvent = namedtuple('FocusEvent', ['FocusFlags', 'NextFocus', 'Temporary'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['FocusEvent']

