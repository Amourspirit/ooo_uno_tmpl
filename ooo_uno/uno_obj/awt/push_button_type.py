# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from typing import TYPE_CHECKING
from enum import Enum
from ...oenv import UNO_ENVIRONMENT
if (not TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ...helper.enum_helper import uno_enum_class_new
    from com.sun.star.awt.PushButtonType import (CANCEL, HELP, OK, STANDARD)


class PushButtonType(Enum):
    """
    specifies the default actions of a button.

    See Also:
        `API PushButtonType <https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1awt.html#aa4e49c7e6c5bf2b4d010ad4a50b90ec0>`_
    """
    CANCEL = 'CANCEL'
    """
    acts like a cancel button.
    """
    HELP = 'HELP'
    """
    acts like a help button.
    """
    OK = 'OK'
    """
    acts like an OK button.
    """
    STANDARD = 'STANDARD'
    """
    acts like a standard push button.
    """


def _dynamic_enum():
    # Dynamically create class that actually contains UNO enum instances

    global PushButtonType
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if (not TYPE_CHECKING) and UNO_ENVIRONMENT:

        _dict = {
            "CANCEL": CANCEL,
            "HELP": HELP,
            "OK": OK,
            "STANDARD": STANDARD,
        }
        PushButtonType = type('PushButtonType', (object,), {
            '__doc__': 'class created dynamically. Class loosly mimics Enum',
            "__new__": uno_enum_class_new
        })
        for k, v in _dict.items():
            setattr(PushButtonType, k, v)


if UNO_ENVIRONMENT:
    _dynamic_enum()

__all__ = ['PushButtonType']
