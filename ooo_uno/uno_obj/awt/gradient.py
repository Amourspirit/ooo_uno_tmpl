# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .util.color import Color
    from .gradient_style import GradientStyle

class Gradient(object):
    """
    Describes a gradient between two colors.

    Many aspects of the gradient are undefined, like the algorithm and color space to use to interpolate between the colors and what "intensity" means.

    See Also:
        `API Gradient <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1Gradient.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, Angle: int, Border: int, EndColor: 'Color', EndIntensity: int, StartColor: 'Color', StartIntensity: int, StepCount: int, Style: 'GradientStyle', XOffset: int, YOffset: int):
        self._Angle = Angle
        self._Border = Border
        self._EndColor = EndColor
        self._EndIntensity = EndIntensity
        self._StartColor = StartColor
        self._StartIntensity = StartIntensity
        self._StepCount = StepCount
        self._Style = Style
        self._XOffset = XOffset
        self._YOffset = YOffset

    @property
    def Angle(self) -> int:
        """
        angle of the gradient in 1/10 degree.

        **Libre Office Type:** ``short``
        """
        return self._Angle

    @property
    def Border(self) -> int:
        """
        per cent of the total width where just the start color is used.

        **Libre Office Type:** ``short``
        """
        return self._Border

    @property
    def EndColor(self) -> 'Color':
        """
        specifies the color at the end point of the gradient.

        **Libre Office Type:** ``com.sun.star.util.Color``
        """
        return self._EndColor

    @property
    def EndIntensity(self) -> int:
        """
        specifies the intensity at the end point of the gradient.

        **Libre Office Type:** ``short``
        """
        return self._EndIntensity

    @property
    def StartColor(self) -> 'Color':
        """
        specifies the color at the start point of the gradient.

        **Libre Office Type:** ``com.sun.star.util.Color``
        """
        return self._StartColor

    @property
    def StartIntensity(self) -> int:
        """
        Specifies the intensity at the start point of the gradient.
        
        What that means is undefined.

        **Libre Office Type:** ``short``
        """
        return self._StartIntensity

    @property
    def StepCount(self) -> int:
        """
        Specifies the number of steps of change color.
        
        What that means is undefined.

        **Libre Office Type:** ``short``
        """
        return self._StepCount

    @property
    def Style(self) -> 'GradientStyle':
        """
        specifies the style of the gradient.

        **Libre Office Type:** ``com.sun.star.awt.GradientStyle``
        """
        return self._Style

    @property
    def XOffset(self) -> int:
        """
        Specifies the X-coordinate, where the gradient begins.
        
        This is effectively the center of the RADIAL, ELLIPTICAL, SQUARE and RECT style gradients.

        **Libre Office Type:** ``short``
        """
        return self._XOffset

    @property
    def YOffset(self) -> int:
        """
        Specifies the Y-coordinate, where the gradient begins.
        
        See previous field.

        **Libre Office Type:** ``short``
        """
        return self._YOffset

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global Gradient
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        Gradient = namedtuple('Gradient', ['Angle', 'Border', 'EndColor', 'EndIntensity', 'StartColor', 'StartIntensity', 'StepCount', 'Style', 'XOffset', 'YOffset'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['Gradient']

