# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING

class WindowEvent(object):
    """
    specifies a window event.

    See Also:
        `API WindowEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1WindowEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, BottomInset: int, Height: int, LeftInset: int, RightInset: int, TopInset: int, Width: int, X: int, Y: int):
        self._BottomInset = BottomInset
        self._Height = Height
        self._LeftInset = LeftInset
        self._RightInset = RightInset
        self._TopInset = TopInset
        self._Width = Width
        self._X = X
        self._Y = Y

    @property
    def BottomInset(self) -> int:
        """
        specifies the inset from the bottom.
        
        The inset is the distance between the outer and the inner window, that means the bottom inset is the height of the bottom border.

        **Libre Office Type:** ``long``
        """
        return self._BottomInset

    @property
    def Height(self) -> int:
        """
        specifies the outer (total) height of the window.

        **Libre Office Type:** ``long``
        """
        return self._Height

    @property
    def LeftInset(self) -> int:
        """
        specifies the inset from the left.
        
        The inset is the distance between the outer and the inner window, that means the left inset is the width of the left border.

        **Libre Office Type:** ``long``
        """
        return self._LeftInset

    @property
    def RightInset(self) -> int:
        """
        specifies the inset from the right.
        
        The inset is the distance between the outer and the inner window, that means the right inset is the width of the right border.

        **Libre Office Type:** ``long``
        """
        return self._RightInset

    @property
    def TopInset(self) -> int:
        """
        specifies the inset from the top.
        
        The inset is the distance between the outer and the inner window, that means the top inset is the height of the top border.

        **Libre Office Type:** ``long``
        """
        return self._TopInset

    @property
    def Width(self) -> int:
        """
        specifies the outer (total) width of the window.

        **Libre Office Type:** ``long``
        """
        return self._Width

    @property
    def X(self) -> int:
        """
        specifies the outer x position of the window.

        **Libre Office Type:** ``long``
        """
        return self._X

    @property
    def Y(self) -> int:
        """
        specifies the outer y position of the window.

        **Libre Office Type:** ``long``
        """
        return self._Y

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global WindowEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        WindowEvent = namedtuple('WindowEvent', ['BottomInset', 'Height', 'LeftInset', 'RightInset', 'TopInset', 'Width', 'X', 'Y'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['WindowEvent']

