# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .point import Point
    from .rectangle import Rectangle

class DockingEvent(object):
    """
    specifies a docking event.

    See Also:
        `API DockingEvent <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1DockingEvent.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, MousePos: 'Point', TrackingRectangle: 'Rectangle', bInteractive: bool, bLiveMode: bool):
        self._MousePos = MousePos
        self._TrackingRectangle = TrackingRectangle
        self._bInteractive = bInteractive
        self._bLiveMode = bLiveMode

    @property
    def MousePos(self) -> 'Point':
        """
        specifies the current mouse position in frame coordinates

        **Libre Office Type:** ``com.sun.star.awt.Point``
        """
        return self._MousePos

    @property
    def TrackingRectangle(self) -> 'Rectangle':
        """
        specifies the current tracking rectangle

        **Libre Office Type:** ``com.sun.star.awt.Rectangle``
        """
        return self._TrackingRectangle

    @property
    def bInteractive(self) -> bool:
        """
        specifies if the docking procedure is interactive which means that the user is currently dragging the window to a new position if this member is FALSE the window will be docked or undocked immediately using the returned tracking rectangle

        **Libre Office Type:** ``boolean``
        """
        return self._bInteractive

    @property
    def bLiveMode(self) -> bool:
        """
        specifies if the layout should be adjusted immediately

        **Libre Office Type:** ``boolean``
        """
        return self._bLiveMode

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global DockingEvent
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        DockingEvent = namedtuple('DockingEvent', ['MousePos', 'TrackingRectangle', 'bInteractive', 'bLiveMode'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['DockingEvent']

