# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from collections import namedtuple
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from .font_slant import FontSlant

class FontDescriptor(object):
    """
    describes the characteristics of a font.

    For example, this can be used to select a font.

    See Also:
        `API FontDescriptor <https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1FontDescriptor.html>`_

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, CharSet: int, CharacterWidth: float, Family: int, Height: int, Kerning: bool, Name: str, Orientation: float, Pitch: int, Slant: 'FontSlant', Strikeout: int, StyleName: str, Type: int, Underline: int, Weight: float, Width: int, WordLineMode: bool):
        self._CharSet = CharSet
        self._CharacterWidth = CharacterWidth
        self._Family = Family
        self._Height = Height
        self._Kerning = Kerning
        self._Name = Name
        self._Orientation = Orientation
        self._Pitch = Pitch
        self._Slant = Slant
        self._Strikeout = Strikeout
        self._StyleName = StyleName
        self._Type = Type
        self._Underline = Underline
        self._Weight = Weight
        self._Width = Width
        self._WordLineMode = WordLineMode

    @property
    def CharSet(self) -> int:
        """
        specifies the character set which is supported by the font.
        
        Use one value out of the constant group com.sun.star.awt.CharSet.

        **Libre Office Type:** ``short``
        """
        return self._CharSet

    @property
    def CharacterWidth(self) -> float:
        """
        specifies the character width.
        
        Depending on the specified width, a font that supports this width may be selected.
        
        The value is expressed as a percentage.

        **Libre Office Type:** ``float``
        """
        return self._CharacterWidth

    @property
    def Family(self) -> int:
        """
        specifies the general style of the font.
        
        Use one value out of the constant group com.sun.star.awt.FontFamily.

        **Libre Office Type:** ``short``
        """
        return self._Family

    @property
    def Height(self) -> int:
        """
        specifies the height of the font in the measure of the destination.

        **Libre Office Type:** ``short``
        """
        return self._Height

    @property
    def Kerning(self) -> bool:
        """
        For requesting, it specifies if there is a kerning table available.
        
        For selecting, it specifies if the kerning table is to be used.

        **Libre Office Type:** ``boolean``
        """
        return self._Kerning

    @property
    def Name(self) -> str:
        """
        specifies the exact name of the font.

        **Libre Office Type:** ``string``
        """
        return self._Name

    @property
    def Orientation(self) -> float:
        """
        specifies the rotation of the font.
        
        The unit of measure is degrees; 0 is the baseline.

        **Libre Office Type:** ``float``
        """
        return self._Orientation

    @property
    def Pitch(self) -> int:
        """
        specifies the pitch of the font.
        
        Use one value out of the constant group com.sun.star.awt.FontPitch.

        **Libre Office Type:** ``short``
        """
        return self._Pitch

    @property
    def Slant(self) -> 'FontSlant':
        """
        specifies the slant of the font.

        **Libre Office Type:** ``com.sun.star.awt.FontSlant``
        """
        return self._Slant

    @property
    def Strikeout(self) -> int:
        """
        specifies the kind of strikeout.
        
        Use one value out of the constant group com.sun.star.awt.FontStrikeout.

        **Libre Office Type:** ``short``
        """
        return self._Strikeout

    @property
    def StyleName(self) -> str:
        """
        specifies the style name of the font.

        **Libre Office Type:** ``string``
        """
        return self._StyleName

    @property
    def Type(self) -> int:
        """
        specifies the technology of the font representation.
        
        One or more values out of the constant group com.sun.star.awt.FontType can be combined by an arithmetical or-operation.

        **Libre Office Type:** ``short``
        """
        return self._Type

    @property
    def Underline(self) -> int:
        """
        specifies the kind of underlining.
        
        Use one value out of the constant group com.sun.star.awt.FontUnderline.

        **Libre Office Type:** ``short``
        """
        return self._Underline

    @property
    def Weight(self) -> float:
        """
        specifies the thickness of the line.
        
        Depending on the specified weight, a font that supports this thickness may be selected.
        
        The value is expressed as a percentage.

        **Libre Office Type:** ``float``
        """
        return self._Weight

    @property
    def Width(self) -> int:
        """
        specifies the width of the font in the measure of the destination.

        **Libre Office Type:** ``short``
        """
        return self._Width

    @property
    def WordLineMode(self) -> bool:
        """
        specifies if only words get underlined.
        
        TRUE means that only non-space characters get underlined, FALSE means that the spacing also gets underlined.
        
        This property is only valid if the property com.sun.star.awt.FontDescriptor.Underline is not FontUnderline.NONE.

        **Libre Office Type:** ``boolean``
        """
        return self._WordLineMode

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global FontDescriptor
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        FontDescriptor = namedtuple('FontDescriptor', ['CharSet', 'CharacterWidth', 'Family', 'Height', 'Kerning', 'Name', 'Orientation', 'Pitch', 'Slant', 'Strikeout', 'StyleName', 'Type', 'Underline', 'Weight', 'Width', 'WordLineMode'])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['FontDescriptor']

