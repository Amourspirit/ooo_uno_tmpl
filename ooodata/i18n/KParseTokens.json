{
  "id": "uno-ooo-parser",
  "version": "0.2.15",
  "libre_office_ver": "7.4",
  "name": "KParseTokens",
  "type": "const",
  "pytype": "int",
  "namespace": "com.sun.star.i18n",
  "parser_args": {
    "sort": false,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "hex": false,
    "flags": true,
    "include_desc": true
  },
  "data": {
    "name": "KParseTokens",
    "namespace": "com.sun.star.i18n",
    "url": "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1i18n_1_1KParseTokens.html",
    "flags": true,
    "pytype": "int",
    "allow_db": true,
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "from_imports": [],
    "from_imports_typing": [],
    "fullname": "com.sun.star.i18n.KParseTokens",
    "desc": [
      "These constants specify the characters a name or identifier token to be parsed can have.",
      "",
      "They are passed to XCharacterClassification.parseAnyToken() and XCharacterClassification.parsePredefinedToken(). They are also set in the ParseResult.StartFlags and ParseResult.ContFlags.",
      "",
      "**since**",
      "",
      "    LibreOffice 6.2"
    ],
    "items": [
      {
        "name": "ASC_UPALPHA",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1,
        "lines": [
          "ASCII A-Z upper alpha."
        ]
      },
      {
        "name": "ASC_LOALPHA",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2,
        "lines": [
          "ASCII a-z lower alpha."
        ]
      },
      {
        "name": "ASC_DIGIT",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4,
        "lines": [
          "ASCII 0-9 digit."
        ]
      },
      {
        "name": "ASC_UNDERSCORE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 8,
        "lines": [
          "ASCII '_' underscore."
        ]
      },
      {
        "name": "ASC_DOLLAR",
        "type": "int",
        "value_type": "INTEGER",
        "value": 16,
        "lines": [
          "ASCII '$' dollar."
        ]
      },
      {
        "name": "ASC_DOT",
        "type": "int",
        "value_type": "INTEGER",
        "value": 32,
        "lines": [
          "ASCII '.' dot/point."
        ]
      },
      {
        "name": "ASC_COLON",
        "type": "int",
        "value_type": "INTEGER",
        "value": 64,
        "lines": [
          "ASCII ':' colon."
        ]
      },
      {
        "name": "ASC_CONTROL",
        "type": "int",
        "value_type": "INTEGER",
        "value": 512,
        "lines": [
          "Special value to allow control characters (0x00 < char < 0x20)"
        ]
      },
      {
        "name": "ASC_ANY_BUT_CONTROL",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1024,
        "lines": [
          "Special value to allow anything below 128 except control characters.",
          "",
          "Not set in ParseResult."
        ]
      },
      {
        "name": "ASC_OTHER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2048,
        "lines": [
          "Additional flag set in ParseResult.StartFlags or ParseResult.ContFlags.",
          "",
          "Set if none of the above ASC_... (except ASC_ANY_...) single values match an ASCII character parsed."
        ]
      },
      {
        "name": "UNI_UPALPHA",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4096,
        "lines": [
          "Unicode (above 127) upper case letter."
        ]
      },
      {
        "name": "UNI_LOALPHA",
        "type": "int",
        "value_type": "INTEGER",
        "value": 8192,
        "lines": [
          "Unicode (above 127) lower case letter."
        ]
      },
      {
        "name": "UNI_DIGIT",
        "type": "int",
        "value_type": "INTEGER",
        "value": 16384,
        "lines": [
          "Unicode (above 127) decimal digit number."
        ]
      },
      {
        "name": "UNI_TITLE_ALPHA",
        "type": "int",
        "value_type": "INTEGER",
        "value": 32768,
        "lines": [
          "Unicode (above 127) title case letter."
        ]
      },
      {
        "name": "UNI_MODIFIER_LETTER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 65536,
        "lines": [
          "Unicode (above 127) modifier letter."
        ]
      },
      {
        "name": "UNI_OTHER_LETTER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 131072,
        "lines": [
          "Unicode (above 127) other letter."
        ]
      },
      {
        "name": "UNI_LETTER_NUMBER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 262144,
        "lines": [
          "Unicode (above 127) letter number."
        ]
      },
      {
        "name": "UNI_OTHER_NUMBER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 524288,
        "lines": [
          "Unicode (above 127) other number."
        ]
      },
      {
        "name": "GROUP_SEPARATOR_IN_NUMBER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 134217728,
        "lines": [
          "If this bit is set in nContCharFlags parameters, the locale's group separator characters in numbers are accepted and ignored/skipped.",
          "",
          "Else a group separator in a number ends the current token. A leading group separator is never accepted. If an accepted group separator was encountered in a number (ParseResult.TokenType is KParseType.ASC_NUMBER or KParseType.UNI_NUMBER) this bit is also set in ParseResult.ContFlags.",
          "",
          "NOTE: absence of this bit in nContCharFlags changes the default behaviour that in prior releases accepted numbers with group separators but lead to unexpected results when parsing formula expressions where the user entered a (wrong) separator that happened to be the group separator instead of an intended decimal separator. Usually inline numbers in a formula expression do not contain group separators.",
          "",
          "**since**",
          "",
          "    LibreOffice 6.2"
        ]
      },
      {
        "name": "TWO_DOUBLE_QUOTES_BREAK_STRING",
        "type": "int",
        "value_type": "INTEGER",
        "value": 268435456,
        "lines": [
          "If this bit is set in nContCharFlags parameters and a string enclosed in double quotes is parsed and two consecutive double quotes are encountered, the string is ended.",
          "",
          "If this bit is not set, the two double quotes are parsed as one escaped double quote and string parsing continues. The bit is ignored in nStartCharFlags parameters.",
          "",
          "Example: \\\"abc\\\"\\\"def\\\" --> bit not set => abc\\\"def <br/>\\\"abc\\\"\\\"def\\\" --> bit set => abc"
        ]
      },
      {
        "name": "UNI_OTHER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 536870912,
        "lines": [
          "Additional flag set in ParseResult.StartFlags or ParseResult.ContFlags.",
          "",
          "Set if none of the above UNI_... single values match a Unicode character parsed."
        ]
      },
      {
        "name": "IGNORE_LEADING_WS",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1073741824,
        "lines": [
          "Only valid for nStartCharFlags parameter to CharacterClassification.parseAnyToken() and CharacterClassification.parsePredefinedToken(), ignored on nContCharFlags parameter.",
          "",
          "Not set in ParseResult."
        ]
      },
      {
        "name": "ASC_ALPHA",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_UPALPHA | ASC_LOALPHA",
        "lines": [
          "ASCII a-zA-Z lower or upper alpha."
        ]
      },
      {
        "name": "ASC_ALNUM",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_ALPHA | ASC_DIGIT",
        "lines": [
          "ASCII a-zA-Z0-9 alphanumeric."
        ]
      },
      {
        "name": "UNI_ALPHA",
        "type": "int",
        "value_type": "STRING",
        "value": "UNI_UPALPHA | UNI_LOALPHA | UNI_TITLE_ALPHA",
        "lines": [
          "Unicode (above 127) lower or upper or title case alpha."
        ]
      },
      {
        "name": "UNI_ALNUM",
        "type": "int",
        "value_type": "STRING",
        "value": "UNI_ALPHA | UNI_DIGIT",
        "lines": [
          "Unicode (above 127) alphanumeric."
        ]
      },
      {
        "name": "UNI_LETTER",
        "type": "int",
        "value_type": "STRING",
        "value": "UNI_ALPHA | UNI_MODIFIER_LETTER | UNI_OTHER_LETTER",
        "lines": [
          "Unicode (above 127) alpha or letter."
        ]
      },
      {
        "name": "UNI_NUMBER",
        "type": "int",
        "value_type": "STRING",
        "value": "UNI_DIGIT | UNI_LETTER_NUMBER | UNI_OTHER_NUMBER",
        "lines": [
          "Unicode (above 127) number."
        ]
      },
      {
        "name": "ANY_ALPHA",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_ALPHA | UNI_ALPHA",
        "lines": [
          "any (ASCII or Unicode) alpha"
        ]
      },
      {
        "name": "ANY_DIGIT",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_DIGIT | UNI_DIGIT",
        "lines": [
          "any (ASCII or Unicode) digit"
        ]
      },
      {
        "name": "ANY_ALNUM",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_ALNUM | UNI_ALNUM",
        "lines": [
          "any (ASCII or Unicode) alphanumeric"
        ]
      },
      {
        "name": "ANY_LETTER",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_ALPHA | UNI_LETTER",
        "lines": [
          "any (ASCII or Unicode) letter"
        ]
      },
      {
        "name": "ANY_NUMBER",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_DIGIT | UNI_NUMBER",
        "lines": [
          "any (ASCII or Unicode) number"
        ]
      },
      {
        "name": "ANY_LETTER_OR_NUMBER",
        "type": "int",
        "value_type": "STRING",
        "value": "ANY_LETTER | ANY_NUMBER",
        "lines": [
          "any (ASCII or Unicode) letter or number"
        ]
      }
    ]
  }
}