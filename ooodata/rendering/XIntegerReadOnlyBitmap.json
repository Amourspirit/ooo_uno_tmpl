{
  "id": "uno-ooo-parser",
  "version": "0.1.26",
  "libre_office_ver": "7.2",
  "name": "XIntegerReadOnlyBitmap",
  "type": "interface",
  "namespace": "com.sun.star.rendering",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        ".x_bitmap",
        "XBitmap",
        "XBitmap_b1b70b7b"
      ]
    ],
    "from_imports_typing": [
      [
        "..geometry.integer_point2_d",
        "IntegerPoint2D",
        "IntegerPoint2D_8f0dc2"
      ],
      [
        "..geometry.integer_rectangle2_d",
        "IntegerRectangle2D",
        "IntegerRectangle2D_3c5c0f4d"
      ],
      [
        ".integer_bitmap_layout",
        "IntegerBitmapLayout",
        "IntegerBitmapLayout_5b94106f"
      ]
    ],
    "extends_map": {
      "com.sun.star.rendering.XBitmap": "XBitmap_b1b70b7b"
    },
    "quote": [
      "IntegerBitmapLayout_5b94106f",
      "IntegerPoint2D_8f0dc2",
      "IntegerRectangle2D_3c5c0f4d",
      "typing.Tuple[int, ...]"
    ],
    "typings": [
      "typing.Tuple[int, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.rendering.XBitmap"
      ],
      "typing": [
        "com.sun.star.geometry.IntegerPoint2D",
        "com.sun.star.geometry.IntegerRectangle2D",
        "com.sun.star.rendering.IntegerBitmapLayout"
      ]
    },
    "name": "XIntegerReadOnlyBitmap",
    "imports": [],
    "namespace": "com.sun.star.rendering",
    "extends": [
      "com.sun.star.rendering.XBitmap"
    ],
    "desc": [
      "This is a specialized interface for bitmaps having integer color channels.",
      "",
      "In contrast to XIntegerBitmap, this interface only permits read-only access.",
      "",
      "Use this interface for e.g. bitmaps that are calculated on-the-fly, or that are pure functional, and thus cannot be modified.",
      "",
      "If you get passed an instance of XIntegerReadOnlyBitmap that also supports the XVolatileBitmap interface, things become a bit more complicated. When reading data, one has to check for both VolatileContentDestroyedException and mismatching IntegerBitmapLayout return values. If either of them occurs, the whole bitmap read operation should be repeated, if you need consistent information."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1rendering_1_1XIntegerReadOnlyBitmap.html",
    "items": {
      "methods": [
        {
          "name": "getData",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< byte >",
          "desc": [
            "Query the raw data of this bitmap.",
            "",
            "Query the raw data of this bitmap, in the format as defined by getMemoryLayout(). With the given rectangle, a subset of the whole bitmap can be queried. If the internal data format's pixel are not integer multiples of bytes (i.e. if one pixel occupies less than a byte), the leftover content of the bytes at the right of each scanline is filled with zeros. The details of the scanline padding are to be retrieved from the passed bitmap layout.",
            "",
            "Note that the bitmap memory layout might change over time for volatile bitmaps."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            {
              "name": "bitmapLayout",
              "type": "IntegerBitmapLayout_5b94106f",
              "direction": "out",
              "origin": "com.sun.star.rendering.IntegerBitmapLayout"
            },
            {
              "name": "rect",
              "type": "IntegerRectangle2D_3c5c0f4d",
              "direction": "in",
              "origin": "com.sun.star.geometry.IntegerRectangle2D"
            }
          ]
        },
        {
          "name": "getMemoryLayout",
          "returns": "IntegerBitmapLayout_5b94106f",
          "returns_origin": "com.sun.star.rendering.IntegerBitmapLayout",
          "desc": [
            "Query the memory layout for this bitmap.",
            "",
            "Please note that for volatile bitmaps, the memory layout might change between subsequent calls."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPixel",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< byte >",
          "desc": [
            "Get a single pixel of the bitmap, returning its color value.",
            "",
            "If the internal data format's pixel are not integer multiples of bytes (i.e. if one pixel occupies less than a byte - the case of more than one byte per pixel is not specified), the color value is returned in the least significant bits of the single byte returned as the color. The details of the returned pixel data are to be retrieved from the passed bitmap layout.",
            "",
            "Note that the bitmap memory layout might change for volatile bitmaps."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            {
              "name": "bitmapLayout",
              "type": "IntegerBitmapLayout_5b94106f",
              "direction": "out",
              "origin": "com.sun.star.rendering.IntegerBitmapLayout"
            },
            {
              "name": "pos",
              "type": "IntegerPoint2D_8f0dc2",
              "direction": "in",
              "origin": "com.sun.star.geometry.IntegerPoint2D"
            }
          ]
        }
      ]
    }
  }
}