{
  "id": "uno-ooo-parser",
  "version": "2024.2.0",
  "libre_office_ver": "2024.2",
  "name": "XOutParameters",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": []
    },
    "imports": [],
    "name": "XOutParameters",
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "is used to register Out-Parameters for stored procedures.",
      "",
      "SDBC provides a stored procedure SQL escape that allows stored procedures to be called in a standard way for all RDBMSs. This escape syntax has one form that includes a result parameter and one that does not. If used, the result parameter must be registered as an OUT parameter. The other parameters can be used for input, output, or both. Parameters are referred to sequentially, by number. The first parameter is 1."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XOutParameters.html",
    "items": {
      "methods": [
        {
          "name": "registerNumericOutParameter",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "registers the OUT parameter in ordinal position parameterIndex to the SDBC type sqlType.",
            "",
            "All OUT parameters must be registered before a stored procedure is executed.",
            "",
            "The SDBC type specified by sqlType for an OUT parameter determines the type that must be used in the get method to read the value of that parameter. This version of com.sun.star.sdbc.XOutParameters.registerOutParameter() should be used when the parameter is of SDBC type com.sun.star.sdbc.DataType.NUMERIC or com.sun.star.sdbc.DataType.DECIMAL."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "parameterIndex",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "sqlType",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "scale",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "registerOutParameter",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "registers the designated output parameter.",
            "",
            "This version of the method com.sun.star.sdbc.XOutParameters.registerOutParameter() should be used for a user-named or REF output parameter. Examples of user-named types include: STRUCT, DISTINCT, OBJECT, and named array types.",
            "",
            "Before executing a stored procedure call, you must explicitly call com.sun.star.sdbc.XOutParameters.registerOutParameter() to register the type from com.sun.star.sdbc.DataType for each OUT parameter. For a user-named parameter the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. An SDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-named and REF parameters.",
            "",
            "Although it is intended for user-named and REF parameters, this method may be used to register a parameter of any SDBC type. If the parameter does not have a user-named or REF type, the typeName parameter is ignored.",
            "",
            "Note: When reading the value of an out parameter, you must use the getXXX method whose type XXX corresponds to the parameter's registered SQL type."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "parameterIndex",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "sqlType",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "typeName",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        }
      ]
    }
  }
}