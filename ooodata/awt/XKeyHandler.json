{
  "id": "uno-ooo-parser",
  "version": "0.1.26",
  "libre_office_ver": "7.2",
  "name": "XKeyHandler",
  "type": "interface",
  "namespace": "com.sun.star.awt",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..lang.x_event_listener",
        "XEventListener",
        "XEventListener_c7230c4a"
      ]
    ],
    "from_imports_typing": [
      [
        ".key_event",
        "KeyEvent",
        "KeyEvent_7a78097f"
      ]
    ],
    "extends_map": {
      "com.sun.star.lang.XEventListener": "XEventListener_c7230c4a"
    },
    "quote": [
      "KeyEvent_7a78097f"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.lang.XEventListener"
      ],
      "typing": [
        "com.sun.star.awt.KeyEvent"
      ]
    },
    "name": "XKeyHandler",
    "imports": [],
    "namespace": "com.sun.star.awt",
    "extends": [
      "com.sun.star.lang.XEventListener"
    ],
    "desc": [
      "This key handler is similar to com.sun.star.awt.XKeyListener but allows the consumption of key events.",
      "",
      "If a key event is consumed by one handler both the following handlers, with respect to the list of key handlers of the broadcaster, and a following handling by the broadcaster will not take place.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1awt_1_1XKeyHandler.html",
    "items": {
      "methods": [
        {
          "name": "keyPressed",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "This function is called by the broadcaster, an com.sun.star.awt.XExtendedToolkit for instance, after a key has been pressed but before it is released.",
            "",
            "The return value decides about whether other handlers will be called and a handling by the broadcaster will take place.",
            "",
            "Consume the event if the action performed by the implementation is mutually exclusive with the default action of the broadcaster or, when known, with that of other handlers.",
            "",
            "Consuming this event does not prevent the pending key-release event from being broadcasted."
          ],
          "raises": [],
          "args": [
            {
              "name": "aEvent",
              "type": "KeyEvent_7a78097f",
              "direction": "in",
              "origin": "com.sun.star.awt.KeyEvent"
            }
          ]
        },
        {
          "name": "keyReleased",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "This function is called by the broadcaster, an com.sun.star.awt.XExtendedToolkit for instance, after a key has been pressed and released.",
            "",
            "The return value decides about whether other handlers will be called and a handling by the broadcaster will take place.",
            "",
            "Consume the event if the action performed by the implementation is mutually exclusive with the default action of the broadcaster or, when known, with that of other handlers."
          ],
          "raises": [],
          "args": [
            {
              "name": "aEvent",
              "type": "KeyEvent_7a78097f",
              "direction": "in",
              "origin": "com.sun.star.awt.KeyEvent"
            }
          ]
        }
      ]
    }
  }
}