{
  "id": "uno-ooo-parser",
  "version": "0.4.0",
  "libre_office_ver": "2024.2",
  "name": "XFont",
  "type": "interface",
  "namespace": "com.sun.star.awt",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        ".font_descriptor",
        "FontDescriptor",
        "FontDescriptor_bc110c0a"
      ],
      [
        ".simple_font_metric",
        "SimpleFontMetric",
        "SimpleFontMetric_d53c0cb9"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "FontDescriptor_bc110c0a",
      "SimpleFontMetric_d53c0cb9",
      "typing.Tuple[int, ...]",
      "typing.Tuple[str, ...]"
    ],
    "typings": [
      "typing.Tuple[int, ...]",
      "typing.Tuple[str, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.awt.FontDescriptor",
        "com.sun.star.awt.SimpleFontMetric"
      ]
    },
    "imports": [],
    "name": "XFont",
    "namespace": "com.sun.star.awt",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "describes a font on a specific device.",
      "",
      "All values are in pixels within this device."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1awt_1_1XFont.html",
    "items": {
      "methods": [
        {
          "name": "getCharWidth",
          "returns": "int",
          "returns_origin": "short",
          "desc": [
            "returns the width of the specified character."
          ],
          "raises": [],
          "args": [
            {
              "name": "c",
              "type": "str",
              "direction": "in",
              "origin": "char"
            }
          ]
        },
        {
          "name": "getCharWidths",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< short >",
          "desc": [
            "returns the widths of the specified characters."
          ],
          "raises": [],
          "args": [
            {
              "name": "nFirst",
              "type": "str",
              "direction": "in",
              "origin": "char"
            },
            {
              "name": "nLast",
              "type": "str",
              "direction": "in",
              "origin": "char"
            }
          ]
        },
        {
          "name": "getFontDescriptor",
          "returns": "FontDescriptor_bc110c0a",
          "returns_origin": "com.sun.star.awt.FontDescriptor",
          "desc": [
            "returns the description of the font.",
            "",
            "The unit of measurement is pixels for the device."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getFontMetric",
          "returns": "SimpleFontMetric_d53c0cb9",
          "returns_origin": "com.sun.star.awt.SimpleFontMetric",
          "desc": [
            "returns additional information about the font."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getKernPairs",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "queries the kerning pair table."
          ],
          "raises": [],
          "args": [
            {
              "name": "Chars1",
              "type": "typing.Tuple[str, ...]",
              "direction": "out",
              "origin": "sequence< char >"
            },
            {
              "name": "Chars2",
              "type": "typing.Tuple[str, ...]",
              "direction": "out",
              "origin": "sequence< char >"
            },
            {
              "name": "Kerns",
              "type": "typing.Tuple[int, ...]",
              "direction": "out",
              "origin": "sequence< short >"
            }
          ]
        },
        {
          "name": "getStringWidth",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "returns the string width."
          ],
          "raises": [],
          "args": [
            {
              "name": "str",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "getStringWidthArray",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "returns the string and the character widths."
          ],
          "raises": [],
          "args": [
            {
              "name": "str",
              "type": "str",
              "direction": "in",
              "origin": "string"
            },
            {
              "name": "aDXArray",
              "type": "typing.Tuple[int, ...]",
              "direction": "out",
              "origin": "sequence< long >"
            }
          ]
        }
      ]
    }
  }
}