{
  "id": "uno-ooo-parser",
  "version": "0.2.0",
  "libre_office_ver": "7.3",
  "name": "FrameSearchFlag",
  "type": "const",
  "namespace": "com.sun.star.frame",
  "parser_args": {
    "sort": false,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "hex": false,
    "flags": false,
    "include_desc": true
  },
  "data": {
    "name": "FrameSearchFlag",
    "namespace": "com.sun.star.frame",
    "url": "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1frame_1_1FrameSearchFlag.html",
    "flags": false,
    "base_class": "ConstIntBase",
    "allow_db": true,
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "from_imports": [],
    "from_imports_typing": [],
    "fullname": "com.sun.star.frame.FrameSearchFlag",
    "desc": [
      "these types describe the algorithm to be used to search a frame",
      "",
      "Such flags will be used on methods XFrame.findFrame(), XDispatchProvider.queryDispatch() or XComponentLoader.loadComponentFromURL() if no special target frame name (e.g. \\\"_blank\\\", \\\"_self\\\") is used."
    ],
    "items": [
      {
        "name": "AUTO",
        "type": "int",
        "value_type": "INTEGER",
        "value": 0,
        "lines": [
          "no longer supported",
          "",
          "Using of this flag will do nothing. Use right combination of other flags instead of this one."
        ]
      },
      {
        "name": "PARENT",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1,
        "lines": [
          "allows search on the parent frames"
        ]
      },
      {
        "name": "SELF",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2,
        "lines": [
          "includes the start frame himself"
        ]
      },
      {
        "name": "CHILDREN",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4,
        "lines": [
          "includes all child frames of the start frame",
          "",
          "Note: That means all direct children and of course her children too. Search doesn't stop at the next level inside the tree!"
        ]
      },
      {
        "name": "CREATE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 8,
        "lines": [
          "frame will be created if not found"
        ]
      },
      {
        "name": "SIBLINGS",
        "type": "int",
        "value_type": "INTEGER",
        "value": 16,
        "lines": [
          "includes the direct siblings of the start frame",
          "",
          "Normally it's interpreted as search on the direct children of the parent only. But in combination with e.g. the CHILDREN flag it can include all children of it too."
        ]
      },
      {
        "name": "TASKS",
        "type": "int",
        "value_type": "INTEGER",
        "value": 32,
        "lines": [
          "allow the search outside the current sub task tree of the whole possible frame tree",
          "",
          "If this flag isn't present, any search from bottom to top has to stop, if a top frame will be reached. It doesn't influence a search from top to bottom. But it can be used at the root of the frame tree to search on direct children of it only. Because the direct children of the root node are the root's of the task sub trees, which are top frames too. Instead of using the CHILDREN flag there, it's possible so to suppress a deeper search so."
        ]
      },
      {
        "name": "ALL",
        "type": "int",
        "value_type": "INTEGER",
        "value": 23,
        "lines": [
          "includes all frames except frames in other tasks sub trees but doesn't create any new frame"
        ]
      },
      {
        "name": "GLOBAL",
        "type": "int",
        "value_type": "INTEGER",
        "value": 55,
        "lines": [
          "searches in the whole hierarchy of frames but doesn't create any new frame"
        ]
      }
    ]
  }
}