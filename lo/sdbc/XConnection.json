{
  "id": "uno-ooo-parser",
  "version": "0.2.15",
  "libre_office_ver": "7.4",
  "name": "XConnection",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        ".x_closeable",
        "XCloseable",
        "XCloseable_98290a86"
      ]
    ],
    "from_imports_typing": [
      [
        "..container.x_name_access",
        "XNameAccess",
        "XNameAccess_e2ab0cf6"
      ],
      [
        ".x_database_meta_data",
        "XDatabaseMetaData",
        "XDatabaseMetaData_eafd0d12"
      ],
      [
        ".x_prepared_statement",
        "XPreparedStatement",
        "XPreparedStatement_fbc80de4"
      ],
      [
        ".x_statement",
        "XStatement",
        "XStatement_98e90ab1"
      ]
    ],
    "extends_map": {
      "com.sun.star.sdbc.XCloseable": "XCloseable_98290a86"
    },
    "quote": [
      "XDatabaseMetaData_eafd0d12",
      "XNameAccess_e2ab0cf6",
      "XPreparedStatement_fbc80de4",
      "XStatement_98e90ab1"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.sdbc.XCloseable"
      ],
      "typing": [
        "com.sun.star.container.XNameAccess",
        "com.sun.star.sdbc.XDatabaseMetaData",
        "com.sun.star.sdbc.XPreparedStatement",
        "com.sun.star.sdbc.XStatement"
      ]
    },
    "imports": [],
    "name": "XConnection",
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.sdbc.XCloseable"
    ],
    "desc": [
      "represents a connection (session) with a specific database.",
      "",
      "Within the context of a Connection, SQL statements are executed and results are returned.",
      "",
      "A Connection's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, and the capabilities of this connection. This information is obtained with the com.sun.star.sdbc.XDatabaseMetaData.getMetaData() method."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XConnection.html",
    "items": {
      "methods": [
        {
          "name": "commit",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "makes all changes made since the previous commit/rollback permanent and releases any database locks currently held by the Connection.",
            "",
            "This method should be used only when auto-commit mode has been disabled."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "createStatement",
          "returns": "XStatement_98e90ab1",
          "returns_origin": "com.sun.star.sdbc.XStatement",
          "desc": [
            "creates a new com.sun.star.sdbc.Statement object for sending SQL statements to the database.",
            "",
            "SQL statements without parameters are normally executed using Statement objects. If the same SQL statement is executed many times, it is more efficient to use a com.sun.star.sdbc.PreparedStatement.",
            "",
            "Result sets created using the returned Statement will have forward-only type, and read-only concurrency, by default.",
            "",
            "Escape processing for the SQL-Statement is enabled, by default."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getAutoCommit",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "gets the current auto-commit state."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getCatalog",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "returns the Connection's current catalog name."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMetaData",
          "returns": "XDatabaseMetaData_eafd0d12",
          "returns_origin": "com.sun.star.sdbc.XDatabaseMetaData",
          "desc": [
            "gets the metadata regarding this connection's database.",
            "",
            "A Connection's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is made available through a DatabaseMetaData object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTransactionIsolation",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "gets this Connection's current transaction isolation level."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTypeMap",
          "returns": "XNameAccess_e2ab0cf6",
          "returns_origin": "com.sun.star.container.XNameAccess",
          "desc": [
            "gets the type map object associated with this connection.",
            "",
            "Only drivers which implement the custom type mapping facility will return an object otherwise NULL could be returned.",
            "",
            "Unless the application has added an entry to the type map, the map returned will be empty."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "isClosed",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "tests to see if a connection is closed.",
            "",
            "Note:  A Connection is automatically closed if no one references it anymore. Certain fatal errors also result in a closed Connection."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "isReadOnly",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "tests to see if the connection is in read-only mode."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nativeSQL",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "converts the given SQL statement into the system's native SQL grammar.",
            "",
            "A driver may convert the JDBC SQL grammar into its system's native SQL grammar prior to sending it; this method returns the native form of the statement that the driver would have sent."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "sql",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "prepareCall",
          "returns": "XPreparedStatement_fbc80de4",
          "returns_origin": "com.sun.star.sdbc.XPreparedStatement",
          "desc": [
            "creates a com.sun.star.sdbc.CallableStatement object for calling database stored procedures.",
            "",
            "The CallableStatement provides methods for setting up its IN and OUT parameters, and methods for executing the call to a stored procedure.",
            "",
            "Note:  This method is optimized for handling stored procedure call statements. Some drivers may send the call statement to the database when the method prepareCall is done; others may wait until the CallableStatement is executed. This has no direct effect on users; however, it does affect which method throws certain SQLExceptions. Result sets created using the returned CallableStatement will have forward-only type and read-only concurrency, by default."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "sql",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "prepareStatement",
          "returns": "XPreparedStatement_fbc80de4",
          "returns_origin": "com.sun.star.sdbc.XPreparedStatement",
          "desc": [
            "creates a com.sun.star.sdbc.PreparedStatement object for sending parameterized SQL statements to the database.",
            "",
            "A SQL statement with or without IN parameters can be pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.",
            "",
            "Note:  This method is optimized for handling parametric SQL statements that benefit from precompilation. If the driver supports precompilation, the method prepareStatement will send the statement to the database for precompilation. Some drivers may not support precompilation. In this case, the statement may not be sent to the database until the com.sun.star.sdbc.PreparedStatement is executed. This has no direct effect on users; however, it does affect which method throws certain SQLExceptions.",
            "",
            "Result sets created using the returned PreparedStatement will have forward-only type and read-only concurrency, by default.",
            "",
            "Escape processing for the SQL-Statement is enabled, by default."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "sql",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "rollback",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "drops all changes made since the previous commit/rollback and releases any database locks currently held by this Connection.",
            "",
            "This method should be used only when auto-commit has been disabled."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "setAutoCommit",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "sets this connection's auto-commit mode.",
            "",
            "If a connection is in auto-commit mode, then all its SQL statements will be executed and committed as individual transactions. Otherwise, its SQL statements are grouped into transactions that are terminated by a call to either the method com.sun.star.sdbc.XConnection.commit() or the method com.sun.star.sdbc.XConnection.rollback(). By default, new connections are in auto-commit mode.",
            "",
            "The commit occurs when the statement completes or the next execute occurs, whichever comes first. In the case of statements returning a ResultSet, the statement completes when the last row of the ResultSet has been retrieved or the ResultSet has been closed. In advanced cases, a single statement may return multiple results as well as output parameter values. In these cases the commit occurs when all results and output parameter values have been retrieved."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "autoCommit",
              "type": "bool",
              "direction": "in",
              "origin": "boolean"
            }
          ]
        },
        {
          "name": "setCatalog",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "sets a catalog name in order to select a subspace of this Connection's database in which to work.",
            "",
            "If the driver does not support catalogs, it will silently ignore this request."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "catalog",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "setReadOnly",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "puts this connection in read-only mode as a hint to enable database optimizations.",
            "",
            "Note:  This method cannot be called while in the middle of a transaction. Calling setReadOnly with TRUE does not necessarily cause writes to be prohibited."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "readOnly",
              "type": "bool",
              "direction": "in",
              "origin": "boolean"
            }
          ]
        },
        {
          "name": "setTransactionIsolation",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "attempts to change the transaction isolation level to the one given.",
            "",
            "The constants defined in com.sun.star.sdbc.TransactionIsolation are the possible transaction isolation levels.",
            "",
            "Note:  This method cannot be called while in the middle of a transaction."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "level",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "setTypeMap",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "installs the given type map as the type map for this connection.",
            "",
            "The type map will be used for the custom mapping of SQL structured types and distinct types.",
            "",
            "Only if the driver supports custom type mapping is the setting of a map allowed."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "typeMap",
              "type": "XNameAccess_e2ab0cf6",
              "direction": "in",
              "origin": "com.sun.star.container.XNameAccess"
            }
          ]
        }
      ]
    }
  }
}