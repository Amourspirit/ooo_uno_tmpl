{
  "id": "uno-ooo-parser",
  "version": "0.2.9",
  "libre_office_ver": "7.3",
  "name": "XDriver",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        "..beans.property_value",
        "PropertyValue",
        "PropertyValue_c9610c73"
      ],
      [
        ".driver_property_info",
        "DriverPropertyInfo",
        "DriverPropertyInfo_fd970e01"
      ],
      [
        ".x_connection",
        "XConnection",
        "XConnection_a36a0b0c"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "XConnection_a36a0b0c",
      "typing.Tuple[DriverPropertyInfo_fd970e01, ...]",
      "typing.Tuple[PropertyValue_c9610c73, ...]"
    ],
    "typings": [
      "typing.Tuple[DriverPropertyInfo_fd970e01, ...]",
      "typing.Tuple[PropertyValue_c9610c73, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.beans.PropertyValue",
        "com.sun.star.sdbc.DriverPropertyInfo",
        "com.sun.star.sdbc.XConnection"
      ]
    },
    "imports": [],
    "name": "XDriver",
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "is the interface that every driver class must implement.",
      "",
      "Each driver should supply a service that implements the Driver interface.",
      "",
      "The DriverManager will try to load as many drivers as it can find, and then for any given connection request, it will ask each driver in turn to try to connect to the target URL.",
      "",
      "It is strongly recommended that each Driver object should be small and standalone so that the Driver object can be loaded and queried without bringing in vast quantities of supporting code."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XDriver.html",
    "items": {
      "methods": [
        {
          "name": "acceptsURL",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "returns TRUE if the driver thinks that it can open a connection to the given URL.",
            "",
            "Typically drivers will return TRUE if they understand the subprotocol specified in the URL and FALSE if they do not."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "url",
              "type": "str",
              "direction": "in",
              "origin": "string"
            }
          ]
        },
        {
          "name": "connect",
          "returns": "XConnection_a36a0b0c",
          "returns_origin": "com.sun.star.sdbc.XConnection",
          "desc": [
            "attempts to make a database connection to the given URL.",
            "",
            "The driver should return NULL if it realizes it is the wrong kind of driver to connect to the given URL. This will be common, as when the driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn.",
            "",
            "The driver should raise a com.sun.star.sdbc.SQLException if it is the right driver to connect to the given URL, but has trouble connecting to the database.",
            "",
            "The info argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least \\\"user\\\" and \\\"password\\\" properties should be included in the Properties. For a JDBC driver also the Java class must be supplied in the property named JavaDriverClass, and a class path (a space-separated list of URLs) needed to locate that class can optionally be supplied in a property named JavaDriverClassPath. Possible property value names are when supported by the driver:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "url",
              "type": "str",
              "direction": "in",
              "origin": "string"
            },
            {
              "name": "info",
              "type": "typing.Tuple[PropertyValue_c9610c73, ...]",
              "direction": "in",
              "origin": "sequence< com.sun.star.beans.PropertyValue >"
            }
          ]
        },
        {
          "name": "getMajorVersion",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "gets the driver's major version number.",
            "",
            "Initially this should be 1."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getMinorVersion",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "gets the driver's minor version number.",
            "",
            "Initially this should be 0."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPropertyInfo",
          "returns": "typing.Tuple[DriverPropertyInfo_fd970e01, ...]",
          "returns_origin": "sequence< DriverPropertyInfo >",
          "desc": [
            "gets information about the possible properties for this driver.",
            "",
            "The getPropertyInfo method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to getPropertyInfo."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            {
              "name": "url",
              "type": "str",
              "direction": "in",
              "origin": "string"
            },
            {
              "name": "info",
              "type": "typing.Tuple[PropertyValue_c9610c73, ...]",
              "direction": "in",
              "origin": "sequence< com.sun.star.beans.PropertyValue >"
            }
          ]
        }
      ]
    }
  }
}