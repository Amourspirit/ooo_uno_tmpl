{
  "id": "uno-ooo-parser",
  "version": "0.1.21",
  "libre_office_ver": "7.2",
  "name": "XRow",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        "..container.x_name_access",
        "XNameAccess",
        "XNameAccess_e2ab0cf6"
      ],
      [
        "..io.x_input_stream",
        "XInputStream",
        "XInputStream_98d40ab4"
      ],
      [
        ".x_array",
        "XArray",
        "XArray_708108fb"
      ],
      [
        ".x_blob",
        "XBlob",
        "XBlob_6773087b"
      ],
      [
        ".x_clob",
        "XClob",
        "XClob_6777087c"
      ],
      [
        ".x_ref",
        "XRef",
        "XRef_5f110819"
      ],
      [
        "..util.date",
        "Date",
        "Date_60040844"
      ],
      [
        "..util.date_time",
        "DateTime",
        "DateTime_84de09d3"
      ],
      [
        "..util.time",
        "Time",
        "Time_604e0855"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "DateTime_84de09d3",
      "Date_60040844",
      "Time_604e0855",
      "XArray_708108fb",
      "XBlob_6773087b",
      "XClob_6777087c",
      "XInputStream_98d40ab4",
      "XNameAccess_e2ab0cf6",
      "XRef_5f110819",
      "typing.Tuple[int, ...]"
    ],
    "typings": [
      "typing.Tuple[int, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.container.XNameAccess",
        "com.sun.star.io.XInputStream",
        "com.sun.star.sdbc.XArray",
        "com.sun.star.sdbc.XBlob",
        "com.sun.star.sdbc.XClob",
        "com.sun.star.sdbc.XRef",
        "com.sun.star.util.Date",
        "com.sun.star.util.DateTime",
        "com.sun.star.util.Time"
      ]
    },
    "name": "XRow",
    "imports": [],
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "is used to access data which is collected in a row.",
      "",
      "All methods raise a com.sun.star.sdbc.SQLException if a database access error occurs."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XRow.html",
    "items": {
      "methods": [
        {
          "name": "getArray",
          "returns": "XArray_708108fb",
          "desc": [
            "gets a SQL ARRAY value from the current row of this ResultSet object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getBinaryStream",
          "returns": "XInputStream_98d40ab4",
          "desc": [
            "gets the value of a column in the current row as a stream of uninterpreted bytes.",
            "",
            "The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY values.",
            "",
            "Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. Also, a stream may return 0 when the method com.sun.star.io.XInputStream.available() is called whether there is data available or not."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getBlob",
          "returns": "XBlob_6773087b",
          "desc": [
            "gets a BLOB value in the current row."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getBoolean",
          "returns": "bool",
          "desc": [
            "gets the value of a column in the current row as boolean."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getByte",
          "returns": "int",
          "desc": [
            "get the value of a column in the current row as a byte."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getBytes",
          "returns": "typing.Tuple[int, ...]",
          "desc": [
            "gets the value of a column in the current row as a byte array.",
            "",
            "The bytes represent the raw values returned by the driver."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getCharacterStream",
          "returns": "XInputStream_98d40ab4",
          "desc": [
            "gets the value of a column in the current row as a stream of uninterpreted bytes.",
            "",
            "The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY or LONGVARCHAR values.",
            "",
            "Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. Also, a stream may return 0 when the method com.sun.star.io.XInputStream.available() is called whether there is data available or not."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getClob",
          "returns": "XClob_6777087c",
          "desc": [
            "gets a CLOB value in the current row of this ResultSet object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getDate",
          "returns": "Date_60040844",
          "desc": [
            "gets the value of a column in the current row as a date object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getDouble",
          "returns": "float",
          "desc": [
            "gets the value of a column in the current row as a double."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getFloat",
          "returns": "float",
          "desc": [
            "gets the value of a column in the current row as a float."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getInt",
          "returns": "int",
          "desc": [
            "get the value of a column in the current row as an integer."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getLong",
          "returns": "int",
          "desc": [
            "get the value of a column in the current row as a long."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getObject",
          "returns": "object",
          "desc": [
            "returns the value of a column in the current row as an object.",
            "",
            "This method uses the given Map object for the custom mapping of the SQL structure or distinct type that is being retrieved."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ],
            [
              "typeMap",
              "XNameAccess_e2ab0cf6",
              "in"
            ]
          ]
        },
        {
          "name": "getRef",
          "returns": "XRef_5f110819",
          "desc": [
            "gets a REF(&lt;structured-type&gt;) column value from the current row."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getShort",
          "returns": "int",
          "desc": [
            "gets the value of a column in the current row as a short."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getString",
          "returns": "str",
          "desc": [
            "gets the value of a column in the current row as a string."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getTime",
          "returns": "Time_604e0855",
          "desc": [
            "gets the value of a column in the current row as a time object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getTimestamp",
          "returns": "DateTime_84de09d3",
          "desc": [
            "gets the value of a column in the current row as a datetime object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "columnIndex",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "wasNull",
          "returns": "bool",
          "desc": [
            "reports whether the last column read had a value of SQL NULL.",
            "",
            "Note that you must first call getXXX on a column to try to read its value and then call wasNull() to see if the value read was SQL NULL."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        }
      ]
    }
  }
}