{
  "id": "uno-ooo-parser",
  "version": "0.1.22",
  "libre_office_ver": "7.2",
  "name": "XSSOPasswordCache",
  "type": "interface",
  "namespace": "com.sun.star.auth",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": []
    },
    "name": "XSSOPasswordCache",
    "imports": [],
    "namespace": "com.sun.star.auth",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "supports password caching for security mechanisms which use passwords as credentials or as an input to credential creation but don't have an external method to cache these passwords.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1auth_1_1XSSOPasswordCache.html",
    "items": {
      "methods": [
        {
          "name": "addPassword",
          "returns": "None",
          "desc": [
            "adds a username/password combination to the cache.",
            "",
            "If an entry for the specified username already exists in the cache, it will be overwritten."
          ],
          "raises": [
            "InvalidArgumentException",
            "PersistenceFailureException"
          ],
          "args": [
            [
              "UserName",
              "str",
              "in"
            ],
            [
              "Password",
              "str",
              "in"
            ],
            [
              "Persist",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "getPassword",
          "returns": "str",
          "desc": [
            "retrieves a password for a given user from the cache.",
            "",
            "Non persistent cache is searched first, followed by the persistent cache ( if it exists )."
          ],
          "raises": [
            "InvalidArgumentException",
            "PersistenceFailureException"
          ],
          "args": [
            [
              "UserName",
              "str",
              "in"
            ],
            [
              "Persist",
              "bool",
              "out"
            ]
          ]
        },
        {
          "name": "removePassword",
          "returns": "None",
          "desc": [
            "removes a password from the cache"
          ],
          "raises": [
            "InvalidArgumentException",
            "PersistenceFailureException"
          ],
          "args": [
            [
              "UserName",
              "str",
              "in"
            ],
            [
              "RemovePersist",
              "bool",
              "in"
            ]
          ]
        }
      ]
    }
  }
}