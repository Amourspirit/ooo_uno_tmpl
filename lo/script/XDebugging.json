{
  "id": "uno-ooo-parser",
  "version": "0.1.23",
  "libre_office_ver": "7.2",
  "name": "XDebugging",
  "type": "interface",
  "namespace": "com.sun.star.script",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        ".context_information",
        "ContextInformation",
        "ContextInformation_1ece0f08"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "ContextInformation_1ece0f08",
      "typing.Tuple[str, ...]"
    ],
    "typings": [
      "typing.Tuple[str, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.script.ContextInformation"
      ]
    },
    "name": "XDebugging",
    "imports": [],
    "namespace": "com.sun.star.script",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "makes it possible to set breakpoints in an interpreter.",
      "",
      ".. deprecated::",
      "",
      "    Class is deprecated."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1script_1_1XDebugging.html",
    "items": {
      "methods": [
        {
          "name": "clearAllBreakPoints",
          "returns": "None",
          "desc": [
            "clears all breakpoints in the module set by \\\"setBreakPoint\\\"."
          ],
          "raises": [],
          "args": [
            [
              "aModuleName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "doContinue",
          "returns": "None",
          "desc": [
            "continues the program execution."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "dumpVariable",
          "returns": "str",
          "desc": [
            "returns the value of the variable at the given stack position."
          ],
          "raises": [],
          "args": [
            [
              "aVariableName",
              "str",
              "in"
            ],
            [
              "nCallStackPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "eval",
          "returns": "str",
          "desc": [
            "Evaluates an expression."
          ],
          "raises": [],
          "args": [
            [
              "aSourceCode",
              "str",
              "in"
            ],
            [
              "nCallStackPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getContextInformation",
          "returns": "ContextInformation_1ece0f08",
          "desc": [
            "returns more detailed information about a specified stack frame."
          ],
          "raises": [],
          "args": [
            [
              "nCallStackPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getStackTrace",
          "returns": "typing.Tuple[str, ...]",
          "desc": [
            "Returns the engine's stack trace of the current execute position.",
            "",
            "Line break is the delimiter."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isVariable",
          "returns": "bool",
          "desc": [
            "returns whether the given variable exists within the specified stack frame."
          ],
          "raises": [],
          "args": [
            [
              "aVariableName",
              "str",
              "in"
            ],
            [
              "nCallStackPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "setBreakPoint",
          "returns": "int",
          "desc": [
            "returns the source code line where the breakpoint was set."
          ],
          "raises": [],
          "args": [
            [
              "aModuleName",
              "str",
              "in"
            ],
            [
              "nSourceCodeLine",
              "int",
              "in"
            ],
            [
              "bOn",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "setVariable",
          "returns": "None",
          "desc": [
            "sets the value of the specified variable within the specified stack frame."
          ],
          "raises": [],
          "args": [
            [
              "aVariableName",
              "str",
              "in"
            ],
            [
              "aValue",
              "str",
              "in"
            ],
            [
              "nCallStackPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "stepIn",
          "returns": "None",
          "desc": [
            "executes the next and only the next statement.",
            "",
            "If the next statement is a function call, only the function entered."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "stepOut",
          "returns": "None",
          "desc": [
            "executes the program until the next return from this stack frame."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "stepOver",
          "returns": "None",
          "desc": [
            "executes the next and only the next statement.",
            "",
            "If the next statement is a function call, the function is executed completely."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "stop",
          "returns": "None",
          "desc": [
            "stops the execution of the interpreter.",
            "",
            "To continue with the execution, call XDebugging.doContinue()."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}