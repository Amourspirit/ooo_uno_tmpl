{
  "id": "uno-ooo-parser",
  "version": "0.1.32",
  "libre_office_ver": "7.2",
  "name": "XTreeNode",
  "type": "interface",
  "namespace": "com.sun.star.awt.tree",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [],
    "from_imports_typing": [],
    "extends_map": {},
    "quote": [
      "XTreeNode"
    ],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [],
      "typing": []
    },
    "imports": [],
    "name": "XTreeNode",
    "namespace": "com.sun.star.awt.tree",
    "extends": [],
    "desc": [
      "An instance implementing this interface represents the model data for an entry in a XTreeDataModel.",
      "",
      "The TreeControl uses this interface to retrieve the model information needed to display a hierarchical outline",
      "",
      "Each XTreeNode in a XTreeDataModel must be unique."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1awt_1_1tree_1_1XTreeNode.html",
    "items": {
      "methods": [
        {
          "name": "getChildAt",
          "returns": "XTreeNode",
          "returns_origin": "com.sun.star.awt.tree.XTreeNode",
          "desc": [
            "Returns the child tree node at Index."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "Index",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getChildCount",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the number of child nodes."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getCollapsedGraphicURL",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "The URL for a graphic that is rendered to visualize collapsed non leaf nodes.",
            "",
            "If URL is empty, XTreeControl.DefaultCollapsedGraphicURL is used."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getDisplayValue",
          "returns": "object",
          "returns_origin": "any",
          "desc": [
            "If not empty, the textual representation of this any is used as the text part of this node."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getExpandedGraphicURL",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "The URL for a graphic that is rendered to visualize expanded non leaf nodes.",
            "",
            "If URL is empty, XTreeControl.DefaultExpandedGraphicURL is used."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getIndex",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the index of Node in this instances children."
          ],
          "raises": [],
          "args": [
            {
              "name": "Node",
              "type": "XTreeNode",
              "direction": "in",
              "origin": "com.sun.star.awt.tree.XTreeNode"
            }
          ]
        },
        {
          "name": "getNodeGraphicURL",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "The URL for a graphic that is rendered before the text part of this node.",
            "",
            "If this URL is empty, no graphic is rendered."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getParent",
          "returns": "XTreeNode",
          "returns_origin": "com.sun.star.awt.tree.XTreeNode",
          "desc": [
            "Returns the parent node of this node."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "hasChildrenOnDemand",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Returns TRUE if the children of this node are created on demand.",
            "",
            "A TreeControl will handle a node that returns TRUE always like a node that has child nodes, even if getChildCount() returns 0."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}