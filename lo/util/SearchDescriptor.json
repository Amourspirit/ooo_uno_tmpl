{
  "id": "uno-ooo-parser",
  "version": "0.1.21",
  "libre_office_ver": "7.2",
  "name": "SearchDescriptor",
  "type": "service",
  "namespace": "com.sun.star.util",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        ".x_search_descriptor",
        "XSearchDescriptor",
        "XSearchDescriptor_ef600d93"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.util.XSearchDescriptor": "XSearchDescriptor_ef600d93"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.util.XSearchDescriptor"
      ],
      "typing": []
    },
    "name": "SearchDescriptor",
    "imports": [],
    "namespace": "com.sun.star.util",
    "extends": [
      "com.sun.star.util.XSearchDescriptor"
    ],
    "desc": [
      "describes what and how to search within a container.",
      "",
      "**since**",
      "",
      "    LibreOffice 5.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1util_1_1SearchDescriptor.html",
    "items": {
      "properties": [
        {
          "name": "SearchBackwards",
          "returns": "bool",
          "desc": [
            "If TRUE, the search is done backwards in the document."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchCaseSensitive",
          "returns": "bool",
          "desc": [
            "If TRUE, the case of the letters is important for the match."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchRegularExpression",
          "returns": "bool",
          "desc": [
            "If TRUE, the search string is evaluated as a regular expression.",
            "",
            "SearchRegularExpression, SearchWildcard and SearchSimilarity are mutually exclusive, only one can be TRUE at the same time."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchSimilarity",
          "returns": "bool",
          "desc": [
            "If TRUE, a \\\"similarity search\\\" is performed.",
            "",
            "In the case of a similarity search, the following properties specify the kind of similarity:",
            "",
            "SearchRegularExpression, SearchWildcard and SearchSimilarity are mutually exclusive, only one can be TRUE at the same time."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchSimilarityAdd",
          "returns": "int",
          "desc": [
            "specifies the number of characters that must be added to match the search pattern."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchSimilarityExchange",
          "returns": "int",
          "desc": [
            "This property specifies the number of characters that must be replaced to match the search pattern."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchSimilarityRelax",
          "returns": "bool",
          "desc": [
            "If TRUE, all similarity rules are applied together.",
            "",
            "In the case of a relaxed similarity search, the following properties are applied together:"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchSimilarityRemove",
          "returns": "int",
          "desc": [
            "This property specifies the number of characters that may be ignored to match the search pattern."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchStyles",
          "returns": "bool",
          "desc": [
            "If TRUE, it is searched for positions where the paragraph style with the name of the search pattern is applied."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchWildcard",
          "returns": "bool",
          "desc": [
            "If TRUE, the search string is evaluated as a wildcard pattern.",
            "",
            "Wildcards are '*' (asterisk) for any sequence of characters, including an empty sequence, and '?' (question mark) for exactly one character. Escape character is '\\\\' (U+005C REVERSE SOLIDUS) aka backslash, it escapes the special meaning of a question mark, asterisk or escape character that follows immediately after the escape character.",
            "",
            "SearchRegularExpression, SearchWildcard and SearchSimilarity are mutually exclusive, only one can be TRUE at the same time.",
            "",
            "**since**",
            "",
            "    LibreOffice 5.2"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "SearchWords",
          "returns": "bool",
          "desc": [
            "If TRUE, only complete words will be found."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}