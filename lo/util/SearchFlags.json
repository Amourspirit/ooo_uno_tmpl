{
  "id": "uno-ooo-parser",
  "version": "0.2.9",
  "libre_office_ver": "7.3",
  "name": "SearchFlags",
  "type": "const",
  "namespace": "com.sun.star.util",
  "parser_args": {
    "sort": false,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "hex": false,
    "flags": true,
    "include_desc": true
  },
  "data": {
    "name": "SearchFlags",
    "namespace": "com.sun.star.util",
    "url": "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1util_1_1SearchFlags.html",
    "flags": true,
    "base_class": "ConstIntFlagsBase",
    "allow_db": true,
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "from_imports": [],
    "from_imports_typing": [],
    "fullname": "com.sun.star.util.SearchFlags",
    "desc": [
      "Flags for search methods.",
      "",
      "**since**",
      "",
      "    LibreOffice 5.2"
    ],
    "items": [
      {
        "name": "ALL_IGNORE_CASE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1,
        "lines": []
      },
      {
        "name": "NORM_WORD_ONLY",
        "type": "int",
        "value_type": "INTEGER",
        "value": 16,
        "lines": [
          "Flag for normal (Boyer-Moore) search / Search for word only."
        ]
      },
      {
        "name": "REG_EXTENDED",
        "type": "int",
        "value_type": "INTEGER",
        "value": 256,
        "lines": [
          "Flag for \\\"regular expression\\\" search / Interpret as extended regular expression."
        ]
      },
      {
        "name": "REG_NOSUB",
        "type": "int",
        "value_type": "INTEGER",
        "value": 512,
        "lines": [
          "Flag for \\\"regular expression\\\" search / No register information or backreferences, i.e., avoid sub expressions.",
          "",
          "Return only true/false if matched or not."
        ]
      },
      {
        "name": "REG_NEWLINE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1024,
        "lines": [
          "Flag for \\\"regular expression\\\" search / Special new line treatment.",
          "",
          "A NEWLINE character in string will not be matched by a period outside bracket expression or by any form of a non matching list.",
          "",
          "A circumflex (^) in pattern when used to specify expression anchoring will match the zero length string immediately after a newline in string, regardless of the setting of REG_NOT_BEGINOFLINE.",
          "",
          "A dollar-sign ($) in pattern when used to specify expression anchoring, will match zero-length string immediately before a new line in string, regardless of the setting of REG_NOT_ENDOFLINE."
        ]
      },
      {
        "name": "REG_NOT_BEGINOFLINE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2048,
        "lines": [
          "The first character in the string is not the beginning of the line therefore ^ will not match with first character of the string."
        ]
      },
      {
        "name": "REG_NOT_ENDOFLINE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4096,
        "lines": [
          "The last character in the string is not the end of the line therefore $ will not match with last character of the string."
        ]
      },
      {
        "name": "LEV_RELAXED",
        "type": "int",
        "value_type": "INTEGER",
        "value": 65536,
        "lines": [
          "Flag for \\\"Weighted Levenshtein Distance\\\" search / Relaxed checking of limit, split weigh pools.",
          "",
          "If not specified (strict), the search is successful if the WLD is within a calculated limit where each insertion, deletion and replacement adds a weight to a common pool of weights. This is the mathematically correct WLD.",
          "",
          "From a user's point of view the strict WLD is an exclusive-OR of the arguments given, for example if allowed insertions=2 and allowed replacements=2, the search fails if 2 characters had been inserted and an additional operation would be needed to match. Depending on the weights it may also fail if 1 character was inserted and 1 character replaced and an additional operation would be needed to match. The strict algorithm may match less than expected from a first glance of the specified arguments, but does not return false positives.",
          "",
          "If specified (relaxed), the search is also successful if the combined pool for insertions and deletions is below a doubled calculated limit and replacements are treated differently. Additionally, swapped characters are counted as one replacement.",
          "",
          "From a user's point of view the relaxed WLD is an inclusive-OR of the arguments given, for example if allowed insertions=2 and allowed replacements=2, the search succeeds if 2 characters had been inserted and an additional replacement is needed to match. The relaxed algorithm may return false positives, but meets user expectation better."
        ]
      },
      {
        "name": "WILD_MATCH_SELECTION",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1048576,
        "lines": [
          "Flag for wildcards search if entire selection must match the pattern.",
          "",
          "If com.sun.star.util.SearchOptions2.AlgorithmType2 is com.sun.star.util.SearchAlgorithms2.WILDCARD specifies whether a wildcard pattern must match the entire selected range of the string from start position to end position or a substring match is allowed.",
          "",
          "If set, the entire selection must match. If not set, a substring match is allowed.",
          "",
          "**since**",
          "",
          "    LibreOffice 5.2"
        ]
      }
    ]
  }
}