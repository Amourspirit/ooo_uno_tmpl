{
  "id": "uno-ooo-parser",
  "version": "0.1.28",
  "libre_office_ver": "7.2",
  "type": "struct",
  "name": "ParseResult",
  "namespace": "com.sun.star.i18n",
  "parser_args": {
    "sort": false,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "sort": true,
    "dynamic_struct": true,
    "include_desc": true
  },
  "data": {
    "name": "ParseResult",
    "namespace": "com.sun.star.i18n",
    "url": "https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1i18n_1_1ParseResult.html",
    "from_imports": [],
    "from_imports_typing": [],
    "extends_map": {},
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [],
      "typing": []
    },
    "fullname": "com.sun.star.i18n.ParseResult",
    "desc": [
      "Parser results returned by XCharacterClassification.parseAnyToken() and XCharacterClassification.parsePredefinedToken()."
    ],
    "imports": [],
    "extends": [],
    "items": [
      {
        "name": "LeadingWhiteSpace",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "Count of ignored leading whitespace, in UTF-16 code units, not Unicode code points."
        ]
      },
      {
        "name": "EndPos",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "UTF-16 code unit index of first unprocessed character."
        ]
      },
      {
        "name": "CharLen",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "Number of code points (not UTF-16 code units) of the parsed token, not including leading whitespace."
        ]
      },
      {
        "name": "Value",
        "type": "float",
        "origtype": null,
        "origin": "double",
        "desc": [
          "Value of token in case of numeric."
        ]
      },
      {
        "name": "TokenType",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "KParseType token type like KParseType.IDENTNAME."
        ]
      },
      {
        "name": "StartFlags",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "KParseTokens flags of first character of actual token matched.",
          "",
          "If TokenType is a KParseType.SINGLE_QUOTE_NAME or a KParseType.DOUBLE_QUOTE_STRING the first character is the first character inside the quotes, not the quote itself."
        ]
      },
      {
        "name": "ContFlags",
        "type": "int",
        "origtype": null,
        "origin": "long",
        "desc": [
          "KParseTokens flags of remaining characters of actual token matched."
        ]
      },
      {
        "name": "DequotedNameOrString",
        "type": "str",
        "origtype": null,
        "origin": "string",
        "desc": [
          "If a quoted name or string is encountered the dequoted result goes here."
        ]
      }
    ]
  }
}