{
  "id": "uno-ooo-parser",
  "version": "0.1.23",
  "libre_office_ver": "7.2",
  "name": "XDocument",
  "type": "interface",
  "namespace": "com.sun.star.xml.dom",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        ".x_node",
        "XNode",
        "XNode_83fb09a5"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_attr",
        "XAttr",
        "XAttr_840309ba"
      ],
      [
        ".xcdata_section",
        "XCDATASection",
        "XCDATASection_d9c00c51"
      ],
      [
        ".x_comment",
        "XComment",
        "XComment_a3690af2"
      ],
      [
        ".xdom_implementation",
        "XDOMImplementation",
        "XDOMImplementation_22320ec5"
      ],
      [
        ".x_document_fragment",
        "XDocumentFragment",
        "XDocumentFragment_17850e92"
      ],
      [
        ".x_document_type",
        "XDocumentType",
        "XDocumentType_e0340d00"
      ],
      [
        ".x_element",
        "XElement",
        "XElement_a33d0ae9"
      ],
      [
        ".x_entity_reference",
        "XEntityReference",
        "XEntityReference_9b70e2b"
      ],
      [
        ".x_node_list",
        "XNodeList",
        "XNodeList_ae540b41"
      ],
      [
        ".x_processing_instruction",
        "XProcessingInstruction",
        "XProcessingInstruction_691810de"
      ],
      [
        ".x_text",
        "XText",
        "XText_842c09c4"
      ]
    ],
    "extends_map": {
      "com.sun.star.xml.dom.XNode": "XNode_83fb09a5"
    },
    "quote": [
      "XAttr_840309ba",
      "XCDATASection_d9c00c51",
      "XComment_a3690af2",
      "XDOMImplementation_22320ec5",
      "XDocumentFragment_17850e92",
      "XDocumentType_e0340d00",
      "XElement_a33d0ae9",
      "XEntityReference_9b70e2b",
      "XNodeList_ae540b41",
      "XNode_83fb09a5",
      "XProcessingInstruction_691810de",
      "XText_842c09c4"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.xml.dom.XNode"
      ],
      "typing": [
        "com.sun.star.xml.dom.XAttr",
        "com.sun.star.xml.dom.XCDATASection",
        "com.sun.star.xml.dom.XComment",
        "com.sun.star.xml.dom.XDOMImplementation",
        "com.sun.star.xml.dom.XDocumentFragment",
        "com.sun.star.xml.dom.XDocumentType",
        "com.sun.star.xml.dom.XElement",
        "com.sun.star.xml.dom.XEntityReference",
        "com.sun.star.xml.dom.XNodeList",
        "com.sun.star.xml.dom.XProcessingInstruction",
        "com.sun.star.xml.dom.XText"
      ]
    },
    "name": "XDocument",
    "imports": [],
    "namespace": "com.sun.star.xml.dom",
    "extends": [
      "com.sun.star.xml.dom.XNode"
    ],
    "desc": [],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1xml_1_1dom_1_1XDocument.html",
    "items": {
      "methods": [
        {
          "name": "createAttribute",
          "returns": "XAttr_840309ba",
          "desc": [
            "Creates an Attr of the given name.",
            "",
            "Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "name",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createAttributeNS",
          "returns": "XAttr_840309ba",
          "desc": [
            "Creates an attribute of the given qualified name and namespace URI.",
            "",
            "Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character, per the XML 1.0 specification . NAMESPACE_ERR: Raised if the qualifiedName is malformed per the Namespaces in XML specification, if the qualifiedName has a prefix and the namespaceURI is null, if the qualifiedName has a prefix that is \\\"xml\\\" and the namespaceURI is different from \\\" http://www.w3.org/XML/1998/namespace\\\", or if the qualifiedName, or its prefix, is \\\"xmlns\\\" and the namespaceURI is different from \\\" http://www.w3.org/2000/xmlns/\\\". NOT_SUPPORTED_ERR: Always thrown if the current document does not support the \\\"XML\\\" feature, since namespaces were defined by XML."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "namespaceURI",
              "str",
              "in"
            ],
            [
              "qualifiedName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createCDATASection",
          "returns": "XCDATASection_d9c00c51",
          "desc": [
            "Creates a CDATASection node whose value is the specified string.",
            "",
            "Throws: DOMException - NOT_SUPPORTED_ERR: Raised if this document is an HTML document."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "data",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createComment",
          "returns": "XComment_a3690af2",
          "desc": [
            "Creates a Comment node given the specified string."
          ],
          "raises": [],
          "args": [
            [
              "data",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createDocumentFragment",
          "returns": "XDocumentFragment_17850e92",
          "desc": [
            "Creates an empty DocumentFragment object."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "createElement",
          "returns": "XElement_a33d0ae9",
          "desc": [
            "Creates an element of the type specified.",
            "",
            "Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "tagName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createElementNS",
          "returns": "XElement_a33d0ae9",
          "desc": [
            "Creates an element of the given qualified name and namespace URI.",
            "",
            "Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character, per the XML 1.0 specification . NAMESPACE_ERR: Raised if the qualifiedName is malformed per the Namespaces in XML specification, if the qualifiedName has a prefix and the namespaceURI is null, or if the qualifiedName has a prefix that is \\\"xml\\\" and the namespaceURI is different from \\\" http://www.w3.org/XML/1998/namespace\\\" . NOT_SUPPORTED_ERR: Always thrown if the current document does not support the \\\"XML\\\" feature, since namespaces were defined by XML."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "namespaceURI",
              "str",
              "in"
            ],
            [
              "qualifiedName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createEntityReference",
          "returns": "XEntityReference_9b70e2b",
          "desc": [
            "Throws: DOMException - NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported.",
            "",
            "Creates an EntityReference object. Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified name contains an illegal character. NOT_SUPPORTED_ERR: Raised if this document is an HTML document."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "name",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createProcessingInstruction",
          "returns": "XProcessingInstruction_691810de",
          "desc": [
            "Creates a ProcessingInstruction node given the specified name and data strings.",
            "",
            "Throws: DOMException - INVALID_CHARACTER_ERR: Raised if the specified target contains an illegal character. NOT_SUPPORTED_ERR: Raised if this document is an HTML document."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "target",
              "str",
              "in"
            ],
            [
              "data",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createTextNode",
          "returns": "XText_842c09c4",
          "desc": [
            "Creates a Text node given the specified string."
          ],
          "raises": [],
          "args": [
            [
              "data",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getDoctype",
          "returns": "XDocumentType_e0340d00",
          "desc": [
            "The Document Type Declaration (see DocumentType) associated with this document."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getDocumentElement",
          "returns": "XElement_a33d0ae9",
          "desc": [
            "This is a convenience attribute that allows direct access to the child node that is the root element of the document."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getElementById",
          "returns": "XElement_a33d0ae9",
          "desc": [
            "Returns the Element whose ID is given by elementId."
          ],
          "raises": [],
          "args": [
            [
              "elementId",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getElementsByTagName",
          "returns": "XNodeList_ae540b41",
          "desc": [
            "Returns a NodeList of all the Elements with a given tag name in the order in which they are encountered in a preorder traversal of the Document tree."
          ],
          "raises": [],
          "args": [
            [
              "tagname",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getElementsByTagNameNS",
          "returns": "XNodeList_ae540b41",
          "desc": [
            "Returns a NodeList of all the Elements with a given local name and namespace URI in the order in which they are encountered in a preorder traversal of the Document tree."
          ],
          "raises": [],
          "args": [
            [
              "namespaceURI",
              "str",
              "in"
            ],
            [
              "localName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getImplementation",
          "returns": "XDOMImplementation_22320ec5",
          "desc": [
            "The DOMImplementation object that handles this document."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "importNode",
          "returns": "XNode_83fb09a5",
          "desc": [
            "Imports a node from another document to this document.",
            "",
            "Throws: DOMException - NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported."
          ],
          "raises": [
            "DOMException"
          ],
          "args": [
            [
              "importedNode",
              "XNode_83fb09a5",
              "in"
            ],
            [
              "deep",
              "bool",
              "in"
            ]
          ]
        }
      ]
    }
  }
}