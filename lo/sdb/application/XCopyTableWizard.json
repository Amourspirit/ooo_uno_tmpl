{
  "id": "uno-ooo-parser",
  "version": "0.2.10",
  "libre_office_ver": "7.3",
  "name": "XCopyTableWizard",
  "type": "interface",
  "namespace": "com.sun.star.sdb.application",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "...ui.dialogs.x_executable_dialog",
        "XExecutableDialog",
        "XExecutableDialog_450f0fa1"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_copy_table_listener",
        "XCopyTableListener",
        "XCopyTableListener_ad581224"
      ]
    ],
    "extends_map": {
      "com.sun.star.ui.dialogs.XExecutableDialog": "XExecutableDialog_450f0fa1"
    },
    "quote": [
      "XCopyTableListener_ad581224"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.ui.dialogs.XExecutableDialog"
      ],
      "typing": [
        "com.sun.star.sdb.application.XCopyTableListener"
      ]
    },
    "imports": [],
    "name": "XCopyTableWizard",
    "namespace": "com.sun.star.sdb.application",
    "extends": [
      "com.sun.star.ui.dialogs.XExecutableDialog"
    ],
    "desc": [
      "describes a wizard which can be used to copy table like data from one database to another.",
      "",
      "Copying table data between databases can be a complex task. Especially when it comes to matching field types in the source and in the target database, some heuristics, and sometimes support from the user doing the operation, are required.",
      "",
      "The copy table wizard described by this interfaces cares for those, and other, settings.",
      "",
      "**since**",
      "",
      "    OOo 2.4"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdb_1_1application_1_1XCopyTableWizard.html",
    "items": {
      "methods": [
        {
          "name": "addCopyTableListener",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "adds a listener which is to be notified of progress in the copy operation"
          ],
          "raises": [],
          "args": [
            {
              "name": "Listener",
              "type": "XCopyTableListener_ad581224",
              "direction": "in",
              "origin": "com.sun.star.sdb.application.XCopyTableListener"
            }
          ]
        },
        {
          "name": "removeCopyTableListener",
          "returns": "None",
          "returns_origin": "void",
          "desc": [
            "removes a listener"
          ],
          "raises": [],
          "args": [
            {
              "name": "Listener",
              "type": "XCopyTableListener_ad581224",
              "direction": "in",
              "origin": "com.sun.star.sdb.application.XCopyTableListener"
            }
          ]
        }
      ],
      "properties": [
        {
          "name": "CreatePrimaryKey",
          "returns": "object",
          "origtype": null,
          "origin": null,
          "desc": [
            "specifies that a new primary key is to be created in the target database",
            "",
            "At initialization time, you can specify the initial settings for the primary key in the UI.",
            "",
            "You cannot use this attribute to determine the primary key, possibly created by the wizard, after it finished. The reason is that during the wizard run, the user can define an arbitrarily complex primary key, e.g. including multiple columns, which cannot be represented in this simple attribute anymore.",
            "",
            "This attribute is ignored if Operation is CopyTableOperation.AppendData.",
            "",
            "Changing this attribute while the dialog is running is not supported, the result of such an attempt is undefined.",
            "",
            "When a primary key is to be created by the wizard, it will be an auto-increment column, if possible."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "DestinationTableName",
          "returns": "str",
          "origtype": null,
          "origin": "string",
          "desc": [
            "specifies the name of the table in the destination database.",
            "",
            "At initialization time, you can use this attribute to control the initial table name as suggested to the user.",
            "",
            "After the wizard has finished, you can use this attribute to determine what table was actually created resp. to which existing table the source table's data was appended.",
            "",
            "Changing this attribute while the dialog is running is not supported, the result of such an attempt is undefined."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Operation",
          "returns": "int",
          "origtype": null,
          "origin": "short",
          "desc": [
            "specifies the basic operation for the wizard to execute.",
            "",
            "This must be one of the CopyTableOperation constants.",
            "",
            "At initialization time, you can use this attribute to control the initial operation in the wizard.",
            "",
            "After the wizard has finished, you can use this attribute to determine what operation was actually executed.",
            "",
            "Changing this attribute while the dialog is running is not supported, the result of such an attempt is undefined."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "UseHeaderLineAsColumnNames",
          "returns": "bool",
          "origtype": null,
          "origin": "boolean",
          "desc": [
            "specifies that the first row should be used to identify column names.",
            "",
            "This attribute is ignored when the source defines the column names which isn't the case when only a part of a table should be copied e.g. in the RTF format or in the HTML format."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}