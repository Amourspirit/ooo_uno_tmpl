{
  "id": "uno-ooo-parser",
  "version": "0.2.0",
  "libre_office_ver": "7.3",
  "name": "XAccessibleStateSet",
  "type": "interface",
  "namespace": "com.sun.star.accessibility",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "typing.Tuple[int, ...]"
    ],
    "typings": [
      "typing.Tuple[int, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": []
    },
    "name": "XAccessibleStateSet",
    "imports": [],
    "namespace": "com.sun.star.accessibility",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Implement this interface to represent a set of states.",
      "",
      "The interface XAccessibleStateSet represents a set of states of an accessible object. It can hold any combination of states defined by the constants collection AccessibleStateType.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1accessibility_1_1XAccessibleStateSet.html",
    "items": {
      "methods": [
        {
          "name": "contains",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Checks if the given state is a member of the state set of the called object."
          ],
          "raises": [],
          "args": [
            {
              "name": "aState",
              "type": "int",
              "direction": "in",
              "origin": "short"
            }
          ]
        },
        {
          "name": "containsAll",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Checks if all of the given states are in the state set of the called object."
          ],
          "raises": [],
          "args": [
            {
              "name": "aStateSet",
              "type": "typing.Tuple[int, ...]",
              "direction": "in",
              "origin": "sequence< short >"
            }
          ]
        },
        {
          "name": "getStates",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< short >",
          "desc": [
            "Get all currently set states as a sequence of state ids.",
            "",
            "The purpose of this function is to reduce the communication between accessibility objects and AT. Without this function an AT-Tool had to call contains() for every state type. Now a single call is sufficient."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isEmpty",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Checks whether the current state set is empty."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}