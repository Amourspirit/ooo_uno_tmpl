{
  "id": "uno-ooo-parser",
  "version": "0.1.24",
  "libre_office_ver": "7.2",
  "name": "XAccessibleTable",
  "type": "interface",
  "namespace": "com.sun.star.accessibility",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_accessible",
        "XAccessible",
        "XAccessible_1cbc0eb6"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "XAccessibleTable",
      "XAccessible_1cbc0eb6",
      "typing.Tuple[int, ...]"
    ],
    "typings": [
      "typing.Tuple[int, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.accessibility.XAccessible"
      ]
    },
    "name": "XAccessibleTable",
    "imports": [],
    "namespace": "com.sun.star.accessibility",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Implement this interface to give access to a two-dimensional table.",
      "",
      "The XAccessibleTable interface is used to represent two-dimensional tables. This interface combines the two interfaces javax.accessibility.AccessibleTable and javax.accessibility.AccessibleExtendedTable of the Java Accessibility API (version 1.4).",
      "",
      "All XAccessible objects that represent cells or cell-clusters of a table have to be at the same time children of the table. This is necessary to be able to convert row and column indices into child indices and vice versa with the methods XAccessibleTable.getAccessibleIndex(), XAccessibleTable.getAccessibleRow(), and XAccessibleTable.getAccessibleColumn().",
      "",
      "The range of valid coordinates for this interface are implementation dependent. However, that range includes at least the intervals from the from the first row or column with the index 0 up to the last (but not including) used row or column as returned by XAccessibleTable.getAccessibleRowCount() and XAccessibleTable.getAccessibleColumnCount(). In case of the Calc the current range of valid indices for retrieving data include the maximal table size\u2013256 columns and 32000 rows\u2013minus one.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1accessibility_1_1XAccessibleTable.html",
    "items": {
      "methods": [
        {
          "name": "getAccessibleCaption",
          "returns": "XAccessible_1cbc0eb6",
          "returns_origin": "com.sun.star.accessibility.XAccessible",
          "desc": [
            "Returns the caption for the table."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getAccessibleCellAt",
          "returns": "XAccessible_1cbc0eb6",
          "returns_origin": "com.sun.star.accessibility.XAccessible",
          "desc": [
            "Returns the XAccessible object at the specified row and column in the table.",
            "",
            "This method has been renamed from the Java name getAccessibleAt to XAccessibleTable.getAccessibleCellAt() to avoid ambiguities with the XAccessibleComponent.getAccessibleAt() method when accessed, for instance, from StarBasic."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleColumn",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Translate the given child index into the corresponding column index."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nChildIndex",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleColumnCount",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the number of used columns in the table.",
            "",
            "The implementation, however, may allow the access of columns beyond this number."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getAccessibleColumnDescription",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "Returns the description text of the specified column in the table."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleColumnExtentAt",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the number of columns occupied by the Accessible at the specified row and column in the table.",
            "",
            "The result differs from 1 if the specified cell spans multiple columns."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleColumnHeaders",
          "returns": "XAccessibleTable",
          "returns_origin": "com.sun.star.accessibility.XAccessibleTable",
          "desc": [
            "Returns the column headers as an XAccessibleTable object.",
            "",
            "Content and size of the returned table are implementation dependent."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getAccessibleIndex",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the child index of the accessible object that spans the specified cell.",
            "",
            "This is the same index that would be returned by calling XAccessibleContext.getAccessibleIndexInParent() for that accessible object."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleRow",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Translate the given child index into the corresponding row index."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nChildIndex",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleRowCount",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the number of used rows in the table.",
            "",
            "The implementation, however, may allow the access of columns beyond this number."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getAccessibleRowDescription",
          "returns": "str",
          "returns_origin": "string",
          "desc": [
            "Returns the description text of the specified row in the table."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleRowExtentAt",
          "returns": "int",
          "returns_origin": "long",
          "desc": [
            "Returns the number of rows occupied by the Accessible at the specified row and column in the table.",
            "",
            "The result differs from 1 if the specified cell spans multiple rows."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "getAccessibleRowHeaders",
          "returns": "XAccessibleTable",
          "returns_origin": "com.sun.star.accessibility.XAccessibleTable",
          "desc": [
            "Returns the row headers as an XAccessibleTable object.",
            "",
            "Content and size of the returned table are implementation dependent."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getAccessibleSummary",
          "returns": "XAccessible_1cbc0eb6",
          "returns_origin": "com.sun.star.accessibility.XAccessible",
          "desc": [
            "Returns the summary description of the table."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getSelectedAccessibleColumns",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< long >",
          "desc": [
            "Returns a list of the indices of completely selected columns in a table."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getSelectedAccessibleRows",
          "returns": "typing.Tuple[int, ...]",
          "returns_origin": "sequence< long >",
          "desc": [
            "Returns a list of the indices of completely selected rows in a table."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isAccessibleColumnSelected",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Returns a boolean value indicating whether the specified column is completely selected."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "isAccessibleRowSelected",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Returns a boolean value indicating whether the specified row is completely selected."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        },
        {
          "name": "isAccessibleSelected",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Returns a boolean value indicating whether the accessible at the specified row and column is selected."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            {
              "name": "nRow",
              "type": "int",
              "direction": "in",
              "origin": "long"
            },
            {
              "name": "nColumn",
              "type": "int",
              "direction": "in",
              "origin": "long"
            }
          ]
        }
      ]
    }
  }
}