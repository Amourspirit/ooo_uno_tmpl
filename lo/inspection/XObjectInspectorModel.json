{
  "id": "uno-ooo-parser",
  "version": "0.1.21",
  "libre_office_ver": "7.2",
  "name": "XObjectInspectorModel",
  "type": "interface",
  "namespace": "com.sun.star.inspection",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [],
    "from_imports_typing": [
      [
        ".property_category_descriptor",
        "PropertyCategoryDescriptor",
        "PropertyCategoryDescriptor_f4691406"
      ]
    ],
    "extends_map": {},
    "quote": [
      "typing.Tuple[PropertyCategoryDescriptor_f4691406, ...]",
      "typing.Tuple[object, ...]"
    ],
    "typings": [
      "typing.Tuple[PropertyCategoryDescriptor_f4691406, ...]",
      "typing.Tuple[object, ...]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [],
      "typing": [
        "com.sun.star.inspection.PropertyCategoryDescriptor"
      ]
    },
    "name": "XObjectInspectorModel",
    "imports": [],
    "namespace": "com.sun.star.inspection",
    "extends": [],
    "desc": [
      "describes the model of an ObjectInspector",
      "",
      "**since**",
      "",
      "    OOo 2.0.3"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1inspection_1_1XObjectInspectorModel.html",
    "items": {
      "methods": [
        {
          "name": "describeCategories",
          "returns": "typing.Tuple[PropertyCategoryDescriptor_f4691406, ...]",
          "desc": [
            "describes the property categories used by the property handlers.",
            "",
            "Properties can be sorted into different categories, described by the LineDescriptor.Category attribute, which is filled in XPropertyHandler.describePropertyLine() method of your property handler.",
            "Those names provided by the handlers are programmatic names. All other information about categories is part of the PropertyCategoryDescriptor, and describeCategories() assembles information about all categories which all property handlers provided by the model use."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPropertyOrderIndex",
          "returns": "int",
          "desc": [
            "retrieves an index in a global property ordering, for a given property name",
            "",
            "In the user interface of an ObjectInspector, single properties are represented by single lines, and those lines are displayed successively. To determine an order of the property lines, the inspector model can associate an \\\"order index\\\" with each property. The ObjectInspector will then sort the property lines in a way that they have the same relative ordering as the \\\"order indexes\\\" of their properties.",
            "",
            "Note that the concrete value the model returns for a given property does not matter. All what matters is that if you want a certain property Foo to be displayed after another property Bar, then the order index of Foo should be greater than the order index of Bar.",
            "",
            "If for two different properties the same order index is returned, the ObjectInspector will assume the order in which those properties were provided by the respective property handler (XPropertyHandler.getSupportedProperties()).",
            "If two such properties originate from different handlers, they will be ordered according to the order of the handlers, as provided in the HandlerFactories attribute."
          ],
          "raises": [],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ]
          ]
        }
      ]
    }
  }
}