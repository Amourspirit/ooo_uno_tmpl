{
  "id": "uno-ooo-parser",
  "version": "0.2.10",
  "libre_office_ver": "7.3",
  "name": "XJavaVM",
  "type": "interface",
  "namespace": "com.sun.star.java",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": true,
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": []
    },
    "imports": [
      "uno"
    ],
    "name": "XJavaVM",
    "namespace": "com.sun.star.java",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "must be implemented by the user of the XJavaVM.",
      "",
      ".. deprecated::",
      "",
      "    Class is deprecated."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1java_1_1XJavaVM.html",
    "items": {
      "methods": [
        {
          "name": "getJavaVM",
          "returns": "object",
          "returns_origin": "any",
          "desc": [
            "returns the address of the Java Virtual Machine.",
            "",
            "If the VM is not already instantiated, it will be now.",
            "",
            "If the processID is a normal 16-byte ID, the returned any contains a JNI JavaVM pointer as a long or hyper integer (depending on the platform). If the processID does not match the current process, or if the VM cannot be instantiated for whatever reason, a VOID any is returned.",
            "",
            "If the processID has an additional 17th byte of value\u00a00, the returned any contains a non\u2013reference-counted pointer to a (reference-counted) instance of the C++ jvmaccess.VirtualMachine class, always represented as a hyper integer. The pointer is guaranteed to be valid as long as the reference to this com.sun.star.java.XJavaVM is valid (but the pointer should be converted into a reference-counted reference as soon as possible). Again, if the first 16 bytes of the processID do not match the current process, or if the VM cannot be instantiated for whatever reason, a VOID any is returned.",
            "",
            "If the processID has an additional 17th byte of value\u00a01, the returned any contains a non\u2013reference-counted pointer to a (reference-counted) instance of the C++ jvmaccess.UnoVirtualMachine class, always represented as a hyper integer. The pointer is guaranteed to be valid as long as the reference to this com.sun.star.java.XJavaVM is valid. Again, if the first 16 bytes of the processID do not match the current process, or if the VM cannot be instantiated for whatever reason, a VOID any is returned.",
            "",
            "The first form (returning a JNI JavaVM pointer) is mainly for backwards compatibility, new code should use the second form (returning a pointer to a jvmaccess.VirtualMachine) if it does not want to use the Java UNO environment, and it should use the third form (returning a pointer to a jvmaccess.UnoVirtualMachine) if it wants to use the Java UNO environment. For example, one advantage of using jvmaccess.VirtualMachine instead of the raw JavaVM pointer is that whenever you attach a native thread to the Java virtual machine, that thread's context ClassLoader (see java.lang.Thread.getContextClassLoader) will automatically be set to a meaningful value."
          ],
          "raises": [],
          "args": [
            {
              "name": "processID",
              "type": "uno.ByteSequence",
              "direction": "in",
              "origin": "sequence< byte >"
            }
          ]
        },
        {
          "name": "isVMEnabled",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "Returns TRUE if the VM is enabled.",
            "",
            "It is only possible to get the VM, if this method return 0."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isVMStarted",
          "returns": "bool",
          "returns_origin": "boolean",
          "desc": [
            "returns TRUE if the VM is started successfully, otherwise FALSE."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}