{
  "id": "uno-ooo-parser",
  "version": "0.1.14",
  "libre_office_ver": "7.2",
  "name": "XTabBar",
  "type": "interface",
  "namespace": "com.sun.star.drawing.framework",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [],
    "from_imports_typing": [
      [
        ".tab_bar_button",
        "TabBarButton"
      ]
    ],
    "quote": [
      "TabBarButton",
      "typing.List[TabBarButton]"
    ],
    "typings": [
      "typing.List[TabBarButton]"
    ],
    "requires_typing": true,
    "name": "XTabBar",
    "imports": [],
    "namespace": "com.sun.star.drawing.framework",
    "extends": [],
    "desc": [
      "UI control for the selection of views in a pane.",
      "",
      "Every tab of a tab bar has, besides its localized title and help text, the URL of a view. A possible alternative would be to use a command URL instead of the view URL.",
      "",
      "In the current Impress implementation a tab bar is only used for the center pane to switch between views in the center pane. Tab bars can make sense for other panes as well, i.e. for showing either the slide sorter or the outline view in the left pane.",
      "",
      "Tab bar buttons are identified by their resource id. Note that because the resource anchors are all the same (the tab bar), it is the resource URL that really identifies a button. There can not be two buttons with the same resource id.",
      "",
      "A better place for this interface (in an extended version) would be com.sun.star.awt"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1drawing_1_1framework_1_1XTabBar.html",
    "items": {
      "methods": [
        {
          "name": "addTabBarButtonAfter",
          "returns": "None",
          "desc": [
            "Add a tab bar button to the right of another one."
          ],
          "raises": [],
          "args": [
            [
              "aButton",
              "TabBarButton",
              "in"
            ],
            [
              "aAnchor",
              "TabBarButton",
              "in"
            ]
          ]
        },
        {
          "name": "appendTabBarButton",
          "returns": "None",
          "desc": [
            "Add a tab bar button at the right most position."
          ],
          "raises": [],
          "args": [
            [
              "aButton",
              "TabBarButton",
              "in"
            ]
          ]
        },
        {
          "name": "getTabBarButtons",
          "returns": "typing.List[TabBarButton]",
          "desc": [
            "Return a sequence of all the tab bar buttons.",
            "",
            "Their order reflects the visible order in the tab bar.",
            "",
            "This method can be used when addTabBarButtonAfter() does not provide enough control as to where to insert a new button."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "hasTabBarButton",
          "returns": "bool",
          "desc": [
            "Test whether the specified button exists in the tab bar."
          ],
          "raises": [],
          "args": [
            [
              "aButton",
              "TabBarButton",
              "in"
            ]
          ]
        },
        {
          "name": "removeTabBarButton",
          "returns": "None",
          "desc": [
            "Remove a tab bar button."
          ],
          "raises": [],
          "args": [
            [
              "aButton",
              "TabBarButton",
              "in"
            ]
          ]
        }
      ]
    }
  }
}