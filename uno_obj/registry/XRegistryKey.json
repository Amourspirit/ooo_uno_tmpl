{
  "id": "uno-ooo-parser",
  "version": "0.1.8",
  "timestamp": "2021-12-27 22:15:26+00:00",
  "name": "XRegistryKey",
  "type": "interface",
  "namespace": "com.sun.star.registry",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        ".registry_key_type",
        "RegistryKeyType"
      ],
      [
        ".registry_value_type",
        "RegistryValueType"
      ],
      [
        ".x_registry_key",
        "XRegistryKey"
      ]
    ],
    "quote": [
      "XRegistryKey",
      "RegistryValueType",
      "typing.List[XRegistryKey]",
      "typing.List[str]",
      "RegistryKeyType",
      "typing.List[int]"
    ],
    "typings": [
      "typing.List[str]",
      "typing.List[XRegistryKey]",
      "typing.List[int]"
    ],
    "requires_typing": true,
    "name": "XRegistryKey",
    "imports": [],
    "namespace": "com.sun.star.registry",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "makes structural information (except regarding tree structures) of a single registry key accessible.",
      "",
      "This is the main interface for registry keys."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1registry_1_1XRegistryKey.html",
    "items": {
      "methods": [
        {
          "name": "closeKey",
          "returns": "None",
          "desc": [
            "closes a key in the registry."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": []
        },
        {
          "name": "createKey",
          "returns": "XRegistryKey",
          "desc": [
            "creates a new key in the registry.",
            "",
            "If the key already exists, the function will open the key."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "aKeyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createLink",
          "returns": "bool",
          "desc": [
            "creates a new link in the registry."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "aLinkName",
              "str",
              "in"
            ],
            [
              "aLinkTarget",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "deleteKey",
          "returns": "None",
          "desc": [
            "deletes a key from the registry."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "rKeyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "deleteLink",
          "returns": "None",
          "desc": [
            "deletes a link from the registry."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "rLinkName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getAsciiListValue",
          "returns": "typing.List[str]",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getAsciiValue",
          "returns": "str",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getBinaryValue",
          "returns": "typing.List[int]",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getKeyNames",
          "returns": "typing.List[str]",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": []
        },
        {
          "name": "getKeyType",
          "returns": "RegistryKeyType",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "rKeyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getLinkTarget",
          "returns": "str",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "rLinkName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getLongListValue",
          "returns": "typing.List[int]",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getLongValue",
          "returns": "int",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getResolvedName",
          "returns": "str",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "aKeyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getStringListValue",
          "returns": "typing.List[str]",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getStringValue",
          "returns": "str",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException",
            "com.sun.star.registry.InvalidValueException"
          ],
          "args": []
        },
        {
          "name": "getValueType",
          "returns": "RegistryValueType",
          "desc": [],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": []
        },
        {
          "name": "isReadOnly",
          "returns": "bool",
          "desc": [
            "checks if the key can be overwritten."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": []
        },
        {
          "name": "isValid",
          "returns": "bool",
          "desc": [
            "checks if the key points to an open valid key in the data-source."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "openKey",
          "returns": "XRegistryKey",
          "desc": [
            "opens a sub key of the key.",
            "",
            "If the sub key does not exist, the function returns a NULL-interface."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "aKeyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "openKeys",
          "returns": "typing.List[XRegistryKey]",
          "desc": [
            "opens all subkeys of the key.",
            "",
            "If a subkey is a link, the link will be resolved and the appropriate key will be opened."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": []
        },
        {
          "name": "setAsciiListValue",
          "returns": "None",
          "desc": [
            "sets an ASCII string list value to the key.",
            "",
            "The high byte of the string should be NULL. If not, there is no guarantee that the string will be correctly transported. If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "seqValue",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "setAsciiValue",
          "returns": "None",
          "desc": [
            "sets an ASCII string value to the key.",
            "",
            "The high byte of the string should be NULL. If not, there is no guarantee that the string will be correctly transported. If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "value",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "setBinaryValue",
          "returns": "None",
          "desc": [
            "sets a binary value to the key.",
            "",
            "If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "value",
              "typing.List[int]",
              "in"
            ]
          ]
        },
        {
          "name": "setLongListValue",
          "returns": "None",
          "desc": [
            "sets a long list value to the key.",
            "",
            "If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "seqValue",
              "typing.List[int]",
              "in"
            ]
          ]
        },
        {
          "name": "setLongValue",
          "returns": "None",
          "desc": [
            "sets a long value to the key.",
            "",
            "If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "value",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "setStringListValue",
          "returns": "None",
          "desc": [
            "sets a unicode string value to the key.",
            "",
            "If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "seqValue",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "setStringValue",
          "returns": "None",
          "desc": [
            "sets a unicode string value to the key.",
            "",
            "If the key already has a value, the value will be overridden."
          ],
          "raises": [
            "com.sun.star.registry.InvalidRegistryException"
          ],
          "args": [
            [
              "value",
              "str",
              "in"
            ]
          ]
        }
      ],
      "properties": [
        {
          "name": "KeyName",
          "returns": "str",
          "desc": [
            "This is the key of the entry relative to its parent.",
            "",
            "The access path starts with the root \\\"/\\\" and all parent entry names are delimited with slashes \\\"/\\\" too, like in a UNIX (R) file system. Slashes which are part of single names are represented as hexadecimals preceded with a \\\"%\\\" like in URL syntax."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}