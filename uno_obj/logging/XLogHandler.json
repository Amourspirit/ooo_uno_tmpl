{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "XLogHandler",
  "type": "interface",
  "namespace": "com.sun.star.logging",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..lang.x_component",
        "XComponent",
        "XComponent_98dc0ab5"
      ]
    ],
    "from_imports_typing": [
      [
        ".log_record",
        "LogRecord",
        "LogRecord_b0c20b70"
      ],
      [
        ".x_log_formatter",
        "XLogFormatter",
        "XLogFormatter_e23d0d1d"
      ]
    ],
    "extends_map": {
      "com.sun.star.lang.XComponent": "XComponent_98dc0ab5"
    },
    "quote": [
      "LogRecord_b0c20b70",
      "XLogFormatter_e23d0d1d"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.lang.XComponent"
      ],
      "typing": [
        "com.sun.star.logging.LogRecord",
        "com.sun.star.logging.XLogFormatter"
      ]
    },
    "name": "XLogHandler",
    "imports": [],
    "namespace": "com.sun.star.logging",
    "extends": [
      "com.sun.star.lang.XComponent"
    ],
    "desc": [
      "provides possibilities to send LogRecords to an arbitrary output channel.",
      "",
      "**since**",
      "",
      "    OOo 2.3"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1logging_1_1XLogHandler.html",
    "items": {
      "methods": [
        {
          "name": "flush",
          "returns": "None",
          "desc": [
            "flushes all buffered output of the handler",
            "",
            "Log handlers are allowed to buffer their output. Upon flush being called, they must flush all their buffers."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "publish",
          "returns": "bool",
          "desc": [
            "publish the given log record at the handler's output channel."
          ],
          "raises": [],
          "args": [
            [
              "Record",
              "LogRecord_b0c20b70",
              "in"
            ]
          ]
        }
      ],
      "properties": [
        {
          "name": "Encoding",
          "returns": "str",
          "desc": [
            "specifies MIME charset name for the encoding to be used by this handler",
            "",
            "It depends on the concrete handler implementation whether or not this parameter is needed."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Formatter",
          "returns": "XLogFormatter_e23d0d1d",
          "desc": [
            "specifies the formatter to be used by this handler."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Level",
          "returns": "int",
          "desc": [
            "specifies the log level of this handler",
            "",
            "Different handlers can have different log levels, which again might be different from the log level of the XLogger for which the handlers are used."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}