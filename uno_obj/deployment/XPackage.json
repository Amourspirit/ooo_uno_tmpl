{
  "id": "uno-ooo-parser",
  "version": "0.1.16",
  "libre_office_ver": "7.2",
  "name": "XPackage",
  "type": "interface",
  "namespace": "com.sun.star.deployment",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..lang.x_component",
        "XComponent",
        "lang_x_component_i"
      ],
      [
        "..util.x_modify_broadcaster",
        "XModifyBroadcaster",
        "util_x_modify_broadcaster_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..beans.string_pair",
        "StringPair",
        "beans_string_pair_i"
      ],
      [
        ".x_package_type_info",
        "XPackageTypeInfo",
        "x_package_type_info_i"
      ],
      [
        "..graphic.x_graphic",
        "XGraphic",
        "graphic_x_graphic_i"
      ],
      [
        "..task.x_abort_channel",
        "XAbortChannel",
        "task_x_abort_channel_i"
      ],
      [
        "..ucb.x_command_environment",
        "XCommandEnvironment",
        "ucb_x_command_environment_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.lang.XComponent": "lang_x_component_i",
      "com.sun.star.util.XModifyBroadcaster": "util_x_modify_broadcaster_i"
    },
    "quote": [
      "beans_string_pair_i",
      "graphic_x_graphic_i",
      "task_x_abort_channel_i",
      "typing.List[XPackage]",
      "typing.List[str]",
      "ucb_x_command_environment_i",
      "x_package_type_info_i"
    ],
    "typings": [
      "typing.List[XPackage]",
      "typing.List[str]"
    ],
    "requires_typing": true,
    "name": "XPackage",
    "imports": [],
    "namespace": "com.sun.star.deployment",
    "extends": [
      "com.sun.star.lang.XComponent",
      "com.sun.star.util.XModifyBroadcaster"
    ],
    "desc": [
      "Objects of this interface reflect a bound package and are issued by a PackageRegistryBackend.",
      "",
      "**since**",
      "",
      "    OOo 2.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1deployment_1_1XPackage.html",
    "items": {
      "methods": [
        {
          "name": "checkDependencies",
          "returns": "bool",
          "desc": [
            "checks if the dependencies for this package are still satisfied",
            "",
            "After updating the OpenOffice.org, some dependencies for packages might no longer be satisfied.",
            "",
            "**since**",
            "",
            "    OOo 3.2"
          ],
          "raises": [
            "DeploymentException",
            "ExtensionRemovedException",
            "com.sun.star.ucb.CommandFailedException"
          ],
          "args": [
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        },
        {
          "name": "checkPrerequisites",
          "returns": "int",
          "desc": [
            "checks if the package can be installed.",
            "",
            "Only if the return value is TRUE the package is allowed to be installed. In case of FALSE or in case of an exception, the package must be removed completely. After return of this function no code from the extension may be used anymore, so that the extension can be safely removed from the hard disk."
          ],
          "raises": [
            "DeploymentException",
            "ExtensionRemovedException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException"
          ],
          "args": [
            [
              "xAbortChannel",
              "task_x_abort_channel_i",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ],
            [
              "alreadyInstalled",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "createAbortChannel",
          "returns": "task_x_abort_channel_i",
          "desc": [
            "creates a command channel to be used to asynchronously abort a command."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "exportTo",
          "returns": "None",
          "desc": [
            "exports package to given destination URL."
          ],
          "raises": [
            "ExtensionRemovedException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException",
            "com.sun.star.ucb.ContentCreationException"
          ],
          "args": [
            [
              "destFolderURL",
              "str",
              "in"
            ],
            [
              "newTitle",
              "str",
              "in"
            ],
            [
              "nameClashAction",
              "int",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        },
        {
          "name": "getBundle",
          "returns": "typing.List[XPackage]",
          "desc": [
            "Gets packages of the bundle.",
            "",
            "If isRemoved() returns TRUE then getBundle may return an empty sequence in case the object is not registered."
          ],
          "raises": [
            "DeploymentException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xAbortChannel",
              "task_x_abort_channel_i",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        },
        {
          "name": "getDescription",
          "returns": "str",
          "desc": [
            "returns a description string to describe the package."
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getDisplayName",
          "returns": "str",
          "desc": [
            "returns the display name of the package, e.g.",
            "",
            "for graphical user interfaces (GUI)."
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getIcon",
          "returns": "graphic_x_graphic_i",
          "desc": [
            "returns an icon for a package."
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": [
            [
              "highContrast",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "getIdentifier",
          "returns": "object",
          "desc": [
            "returns the unique extension identifier."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getLicenseText",
          "returns": "str",
          "desc": [
            "returns a string containing the license text."
          ],
          "raises": [
            "DeploymentException",
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getName",
          "returns": "str",
          "desc": [
            "returns the file name of the package."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPackageType",
          "returns": "x_package_type_info_i",
          "desc": [
            "returns the XPackageTypeInfo, e.g.",
            "",
            "media-type etc."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPublisherInfo",
          "returns": "beans_string_pair_i",
          "desc": [
            "returns the publisher info for the package, the strings might be empty, if there is no publisher",
            "",
            "com.sun.star.beans.StringPair.First represents the publisher name and com.sun.star.beans.StringPair.Second represents the URL to the publisher."
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getRegistrationDataURL",
          "returns": "object",
          "desc": [
            "return a URL to a directory which contains the registration data.",
            "",
            "This data may be created when calling XPackage.registerPackage(). If this is the case is indicated by com.sun.star.beans.Optional.IsPresent of the return value. If registration data are created during registration, but the package is currently not registered, for example after calling XPackage.revokePackage(), then com.sun.star.beans.Optional.IsPresent is TRUE and the com.sun.star.beans.Optional.Value may be an empty string."
          ],
          "raises": [
            "DeploymentException",
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getRepositoryName",
          "returns": "str",
          "desc": [
            "returns the name of the repository where this object comes from."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getURL",
          "returns": "str",
          "desc": [
            "returns the location of the package."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getUpdateInformationURLs",
          "returns": "typing.List[str]",
          "desc": [
            "returns a sequence of update information URLs.",
            "",
            "The sequence may be empty in case no update information is available. If the sequence contains more than one URL, the extra URLs must mirror the information available at the first URL."
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "getVersion",
          "returns": "str",
          "desc": [
            "returns the textual version representation of the package.",
            "",
            "A textual version representation is a finite string following the BNF",
            "version .= [element (\\\".\\\" element)*]",
            "element .= (\\\"0\\\" | \\\"1\\\" | \\\"2\\\" | \\\"3\\\" | \\\"4\\\" | \\\"5\\\" | \\\"6\\\" | \\\"7\\\" | \\\"8\\\" | \\\"9\\\")+"
          ],
          "raises": [
            "ExtensionRemovedException"
          ],
          "args": []
        },
        {
          "name": "isBundle",
          "returns": "bool",
          "desc": [
            "reflects whether this package is a bundle of one or more packages, e.g.",
            "",
            "a zip (legacy) package file or a document hosting script packages."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isRegistered",
          "returns": "object",
          "desc": [
            "determines whether the package is currently registered, i.e.",
            "",
            "whether it is active."
          ],
          "raises": [
            "DeploymentException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException"
          ],
          "args": [
            [
              "xAbortChannel",
              "task_x_abort_channel_i",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        },
        {
          "name": "isRemoved",
          "returns": "bool",
          "desc": [
            "indicates if this object represents a removed extension or extension item.",
            "",
            "This is the case when it was created by providing TRUE for the removed parameter in the function XPackageRegistry.bindPackage()."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "registerPackage",
          "returns": "None",
          "desc": [
            "registers this XPackage.",
            "",
            "NEVER call this directly. This is done by the extension manager if necessary."
          ],
          "raises": [
            "DeploymentException",
            "ExtensionRemovedException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "startup",
              "bool",
              "in"
            ],
            [
              "xAbortChannel",
              "task_x_abort_channel_i",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        },
        {
          "name": "revokePackage",
          "returns": "None",
          "desc": [
            "revokes this XPackage.",
            "",
            "NEVER call this directly. This is done by the extension manager if necessary."
          ],
          "raises": [
            "DeploymentException",
            "com.sun.star.ucb.CommandFailedException",
            "com.sun.star.ucb.CommandAbortedException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "startup",
              "bool",
              "in"
            ],
            [
              "xAbortChannel",
              "task_x_abort_channel_i",
              "in"
            ],
            [
              "xCmdEnv",
              "ucb_x_command_environment_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}