{
  "id": "uno-ooo-parser",
  "version": "0.1.3",
  "timestamp": "2021-12-17 11:22:06+00:00",
  "name": "XUndoManager",
  "type": "interface",
  "namespace": "com.sun.star.document",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..container.x_child",
        "XChild"
      ],
      [
        "..util.x_lockable",
        "XLockable"
      ]
    ],
    "from_imports_typing": [],
    "name": "XUndoManager",
    "imports": [
      "com.sun.star.container.XChild",
      "com.sun.star.util.XLockable"
    ],
    "namespace": "com.sun.star.document",
    "extends": [
      "com.sun.star.util.XLockable",
      "com.sun.star.container.XChild"
    ],
    "desc": [
      "provides access to the undo/redo stacks of a document",
      "",
      "Changes to a document usually result in recording of information how to undo those changes, if desired. A so-called undo action records the information how to undo a single change. Undo actions are maintained in a stack, so that the changes they represent can be undo in the reverse order they have originally been applied.",
      "",
      "Additionally, the Undo manager manages a Redo stack: Actions which are undone are moved from the Undo to the Redo stack, so it is possible to re-apply the changes to the document.",
      "",
      "For collecting multiple changes in a single undo action, so-called Undo contexts are provided. When an Undo context is entered, all subsequently added Undo actions are not pushed onto the undo stack directly, but considered a sub action of the Undo context. Once the Undo context is left, a single undo action is pushed onto the undo stack, which comprises all those single Undo actions.\n Undo contexts can be arbitrarily nested.",
      "",
      "Hidden Undo actions are those which in no observable way contribute to the undo stack. That is, any method retrieving information about the stack will behave as if the undo action does not exist. Nonetheless, calling undo() respectively redo() will include those actions.\n Hidden Undo actions can be created by calling enterHiddenUndoContext(), following by leaveUndoContext().",
      "",
      "An Undo manager can be locked and unlocked, using the XLockable.lock() and XLockable.unlock() methods. When it is locked, then every attempt to add an undo action, or to enter or leave an Undo context, will be silently ignored.",
      "",
      "**See Also**",
      "",
      "    OOo 3.4"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1document_1_1XUndoManager.html",
    "items": {}
  }
}