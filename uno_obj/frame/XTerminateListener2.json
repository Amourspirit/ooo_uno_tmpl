{
  "id": "uno-ooo-parser",
  "version": "0.1.5",
  "timestamp": "2021-12-24 00:52:00+00:00",
  "name": "XTerminateListener2",
  "type": "interface",
  "namespace": "com.sun.star.frame",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        ".x_terminate_listener",
        "XTerminateListener"
      ]
    ],
    "from_imports_typing": [],
    "name": "XTerminateListener2",
    "imports": [],
    "namespace": "com.sun.star.frame",
    "extends": [
      "com.sun.star.frame.XTerminateListener"
    ],
    "desc": [
      "extend interface XTerminateListener so a listener will be informed in case termination process was canceled by other reasons."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XTerminateListener2.html",
    "items": {
      "methods": [
        {
          "name": "cancelTermination",
          "returns": "None",
          "desc": [
            "is called when the master environment (e.g., desktop) was canceled in it's terminate request.",
            "",
            "Termination can be intercepted by throwing TerminationVetoException. But if a listener was queried for termination .. doesn't throw a veto exception ... it doesn't know if termination will be real next time. Because any other listener can throw those exception too ... and so it can happen that after queryTermination() no notifyTermination() will occur. But these listener don't know if it's allowed to start new processes then. Using this optional(!) interface will make it possible to be informed about canceled termination requests also."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}