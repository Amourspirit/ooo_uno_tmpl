{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "name": "XFrame2",
  "type": "interface",
  "namespace": "com.sun.star.frame",
  "parser_args": {
    "sort": true,
    "long_names": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        ".x_dispatch_provider_interception",
        "XDispatchProviderInterception",
        "x_dispatch_provider_interception_i"
      ],
      [
        ".x_frames_supplier",
        "XFramesSupplier",
        "x_frames_supplier_i"
      ],
      [
        "..task.x_status_indicator_factory",
        "XStatusIndicatorFactory",
        "task_x_status_indicator_factory_i"
      ],
      [
        ".x_dispatch_provider",
        "XDispatchProvider",
        "x_dispatch_provider_i"
      ],
      [
        ".x_dispatch_information_provider",
        "XDispatchInformationProvider",
        "x_dispatch_information_provider_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..container.x_name_container",
        "XNameContainer",
        "container_x_name_container_i"
      ],
      [
        ".x_dispatch_recorder_supplier",
        "XDispatchRecorderSupplier",
        "x_dispatch_recorder_supplier_i"
      ],
      [
        "..uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.frame.XDispatchProviderInterception": "x_dispatch_provider_interception_i",
      "com.sun.star.frame.XFramesSupplier": "x_frames_supplier_i",
      "com.sun.star.task.XStatusIndicatorFactory": "task_x_status_indicator_factory_i",
      "com.sun.star.frame.XDispatchProvider": "x_dispatch_provider_i",
      "com.sun.star.frame.XDispatchInformationProvider": "x_dispatch_information_provider_i"
    },
    "quote": [
      "uno_x_interface_i",
      "container_x_name_container_i",
      "x_dispatch_recorder_supplier_i"
    ],
    "typings": [],
    "requires_typing": true,
    "name": "XFrame2",
    "imports": [],
    "namespace": "com.sun.star.frame",
    "extends": [
      "com.sun.star.frame.XDispatchProviderInterception",
      "com.sun.star.frame.XFramesSupplier",
      "com.sun.star.task.XStatusIndicatorFactory",
      "com.sun.star.frame.XDispatchProvider",
      "com.sun.star.frame.XDispatchInformationProvider"
    ],
    "desc": [
      "",
      "**since**",
      "",
      "    LibreOffice 4.1"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XFrame2.html",
    "items": {
      "properties": [
        {
          "name": "DispatchRecorderSupplier",
          "returns": "x_dispatch_recorder_supplier_i",
          "desc": [
            "provides access to the dispatch recorder of the frame",
            "",
            "Such recorder can be used to record dispatch requests. The supplier contains a dispatch recorder and provide the functionality to use it for any dispatch object from outside which supports the interface XDispatch. A supplier is available only, if recording was enabled. That means: if someone wishes to enable recoding on a frame he must set a supplier with a recorder object inside of it. Every user of dispatches has to check then if such supplier is available at this frame property. If value of this property is NULL he must call XDispatch.dispatch() on the original dispatch object. If it's a valid value he must use the supplier by calling his method XDispatchRecorderSupplier.dispatchAndRecord() with the original dispatch object as argument.",
            "",
            "Note:",
            "It's not recommended to cache an already gotten supplier. Because there exist no possibility to check for enabled/disabled recording then.",
            "",
            "**since**",
            "",
            "    OOo 1.1.2"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "LayoutManager",
          "returns": "uno_x_interface_i",
          "desc": [
            "Provides access to the LayoutManager of the frame.",
            "",
            "This is actually of type XLayoutManager, but this API is still experimental (unpublished)."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Title",
          "returns": "str",
          "desc": [
            "if possible it sets/gets the UI title on/from the frame container window",
            "",
            "It depends from the type of the frame container window. If it is a system task window all will be OK. Otherwise the title can't be set. Setting/getting of the pure value of this property must be possible in every case. Only showing on the UI can be fail."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "UserDefinedAttributes",
          "returns": "container_x_name_container_i",
          "desc": [
            "contains user defined attributes."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}