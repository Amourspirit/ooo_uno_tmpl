{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "DispatchRecorder",
  "type": "service",
  "namespace": "com.sun.star.frame",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        ".x_dispatch_recorder",
        "XDispatchRecorder",
        "x_dispatch_recorder_i"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.frame.XDispatchRecorder": "x_dispatch_recorder_i"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.frame.XDispatchRecorder"
      ],
      "typing": []
    },
    "name": "DispatchRecorder",
    "imports": [],
    "namespace": "com.sun.star.frame",
    "extends": [
      "com.sun.star.frame.XDispatchRecorder"
    ],
    "desc": [
      "provides functionality to record XDispatch.dispatch() requests",
      "",
      "It records all necessary parameters of a call XDispatch.dispatch() and generate code which can be executed at later time to run same operations again. Which code will be generated depends from real implementation. So it's possible to generate e.g. Java/Basic or may Perl code. By using of a DispatchRecorderSupplier, which is available on a property of a Frame.DispatchRecorderSupplier, it's possible to change such code generation for further requests or disable it in general by setting this property to NULL.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1frame_1_1DispatchRecorder.html",
    "items": {}
  }
}