{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "name": "XDispatchRecorder",
  "type": "interface",
  "namespace": "com.sun.star.frame",
  "parser_args": {
    "sort": true,
    "long_names": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..util.url",
        "URL",
        "util_url_i"
      ],
      [
        "..beans.property_value",
        "PropertyValue",
        "beans_property_value_i"
      ],
      [
        ".x_frame",
        "XFrame",
        "x_frame_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "uno_x_interface_i"
    },
    "quote": [
      "x_frame_i",
      "util_url_i",
      "typing.List[beans_property_value_i]"
    ],
    "typings": [
      "typing.List[beans_property_value_i]"
    ],
    "requires_typing": true,
    "name": "XDispatchRecorder",
    "imports": [],
    "namespace": "com.sun.star.frame",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "provides recording functionality of dispatches",
      "",
      "With such recorder it will be possible to record requests of type XDispatch by using additional interface XRecordableDispatch. The result of that will be a a script which can be used to start the dispatch at later time again. Such recorder objects are available on a XDispatchRecorderSupplier which is provided by the Frame service.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1frame_1_1XDispatchRecorder.html",
    "items": {
      "methods": [
        {
          "name": "endRecording",
          "returns": "None",
          "desc": [
            "stops the recording process",
            "",
            "Must be called in pairs with XDispatchRecorder.startRecording()."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getRecordedMacro",
          "returns": "str",
          "desc": [
            "returns the recorded source code",
            "",
            "This method must be used before endRecording() is called! Otherwise the macro will be released."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "recordDispatch",
          "returns": "None",
          "desc": [
            "records a single dispatch call identified by its command URL"
          ],
          "raises": [],
          "args": [
            [
              "URL",
              "util_url_i",
              "in"
            ],
            [
              "Arguments",
              "typing.List[beans_property_value_i]",
              "in"
            ]
          ]
        },
        {
          "name": "recordDispatchAsComment",
          "returns": "None",
          "desc": [
            "records a single dispatch call identified by its command URL, but comments it out",
            "",
            "This way calls that failed on execution can be documented."
          ],
          "raises": [],
          "args": [
            [
              "URL",
              "util_url_i",
              "in"
            ],
            [
              "Arguments",
              "typing.List[beans_property_value_i]",
              "in"
            ]
          ]
        },
        {
          "name": "startRecording",
          "returns": "None",
          "desc": [
            "initializes the recorder by passing the frame for which all macro statements shall be recorded"
          ],
          "raises": [],
          "args": [
            [
              "Frame",
              "x_frame_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}