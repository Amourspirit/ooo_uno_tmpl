#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from _const_base import const_base as c_base

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1638255369.4745529
__CHEETAH_genTimestamp__ = 'Tue Nov 30 01:56:09 2021'
__CHEETAH_src__ = '/home/paul/Documents/Projects/Python/Cheeta3/ooo_uno/uno_obj/awt/FontUnderline.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Nov 30 01:56:05 2021'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class FontUnderline(c_base):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(FontUnderline, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  set is const_dict is sorted
        #  $from_imports is a tuple eg: $from_imports = [('.tab_align', 'TabAlign')]
        #  $const_dict, Comment can be string or list or tupple eg:
        # 
        # $const_dict = {
        #     "NONE": ("0", "No column or page break is applied."),
        # }
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    hex = False

    sort = True 

    flags = False

    name = "FontUnderline"

    desc = (    'These values are used to specify the kind of underlining.',    '',    'They may be expanded in future versions.')

    imports = []

    from_imports = []

    link = "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1awt_1_1FontUnderline.html"

    const_dict = {    "NONE": ('0', 'specifies no underlining.'),    "SINGLE": ('1', 'specifies underlining with a single line.'),    "DOUBLE": ('2', 'specifies underlining with a double line.'),    "DOTTED": ('3', 'specifies underlining with a dotted line.'),    "DONTKNOW": ('4', 'The kind of underlining is not known.'),    "DASH": ('5', 'specifies underlining with a dashed line.'),    "LONGDASH": ('6', 'specifies underlining with long dashes.'),    "DASHDOT": ('7', 'specifies underlining with a dash and dot sequence.'),    "DASHDOTDOT": ('8', 'specifies underlining with a dash, dot, dot sequence.'),    "SMALLWAVE": ('9', 'specifies underlining with a small wave.'),    "WAVE": ('10', 'specifies underlining with a wave.'),    "DOUBLEWAVE": ('11', 'specifies underlining with a double wave.'),    "BOLD": ('12', 'specifies underlining with a bold line.'),    "BOLDDOTTED": ('13', 'specifies underlining with bold dots.'),    "BOLDDASH": ('14', 'specifies underlining with bold dashes.'),    "BOLDLONGDASH": ('15', 'specifies underlining with long bold dashes.'),    "BOLDDASHDOT": ('16', 'specifies underlining with a dash and dot sequence in bold.'),    "BOLDDASHDOTDOT": ('17', 'specifies underlining with a dash, dot, dot sequence in bold.'),    "BOLDWAVE": ('18', 'specifies underlining with a bold wave.')}

    _mainCheetahMethod_for_FontUnderline = 'writeBody'

## END CLASS DEFINITION

if not hasattr(FontUnderline, '_initCheetahAttributes'):
    templateAPIClass = getattr(FontUnderline,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(FontUnderline)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=FontUnderline()).run()


