{
  "id": "uno-ooo-parser",
  "version": "0.1.17",
  "libre_office_ver": "7.2",
  "name": "XPopupMenu",
  "type": "interface",
  "namespace": "com.sun.star.awt",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        ".x_menu",
        "XMenu",
        "x_menu_i"
      ]
    ],
    "from_imports_typing": [
      [
        ".key_event",
        "KeyEvent",
        "key_event_i"
      ],
      [
        ".rectangle",
        "Rectangle",
        "rectangle_i"
      ],
      [
        ".x_window_peer",
        "XWindowPeer",
        "x_window_peer_i"
      ],
      [
        "..graphic.x_graphic",
        "XGraphic",
        "graphic_x_graphic_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.awt.XMenu": "x_menu_i"
    },
    "quote": [
      "graphic_x_graphic_i",
      "key_event_i",
      "rectangle_i",
      "x_window_peer_i"
    ],
    "typings": [],
    "requires_typing": true,
    "name": "XPopupMenu",
    "imports": [],
    "namespace": "com.sun.star.awt",
    "extends": [
      "com.sun.star.awt.XMenu"
    ],
    "desc": [
      "controls a pop-up menu."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1awt_1_1XPopupMenu.html",
    "items": {
      "methods": [
        {
          "name": "checkItem",
          "returns": "None",
          "desc": [
            "sets the state of the item to be checked or unchecked."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ],
            [
              "bCheck",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "endExecute",
          "returns": "None",
          "desc": [
            "ends the execution of the PopupMenu.",
            "",
            "com.sun.star.awt.XPopupMenu.execute() will then return 0."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "execute",
          "returns": "int",
          "desc": [
            "executes the popup menu and returns the selected item or 0, if cancelled."
          ],
          "raises": [],
          "args": [
            [
              "Parent",
              "x_window_peer_i",
              "in"
            ],
            [
              "Position",
              "rectangle_i",
              "in"
            ],
            [
              "Direction",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getAcceleratorKeyEvent",
          "returns": "key_event_i",
          "desc": [
            "retrieves the KeyEvent for the menu item.",
            "",
            "The KeyEvent is only used as a container to transport the shortcut information, so that in this case com.sun.star.lang.EventObject.Source is NULL."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getDefaultItem",
          "returns": "int",
          "desc": [
            "returns the menu default item."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getItemImage",
          "returns": "graphic_x_graphic_i",
          "desc": [
            "retrieves the image for the menu item."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "insertSeparator",
          "returns": "None",
          "desc": [
            "inserts a separator at the specified position."
          ],
          "raises": [],
          "args": [
            [
              "nItemPos",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "isInExecute",
          "returns": "bool",
          "desc": [
            "queries if the PopupMenu is being.",
            "",
            "Returns TRUE only if the PopupMenu is being executed as a result of invoking XPopupMenu.execute(); that is, for a PopupMenu activated by a MenuBar item, this methods returns FALSE."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isItemChecked",
          "returns": "bool",
          "desc": [
            "returns whether the item is checked or unchecked."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "setAcceleratorKeyEvent",
          "returns": "None",
          "desc": [
            "sets the KeyEvent for the menu item.",
            "",
            "The KeyEvent is only used as a container to transport the shortcut information, this methods only draws the text corresponding to this keyboard shortcut. The client code is responsible for listening to keyboard events (typically done via XUserInputInterception), and dispatch the respective command."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ],
            [
              "aKeyEvent",
              "key_event_i",
              "in"
            ]
          ]
        },
        {
          "name": "setDefaultItem",
          "returns": "None",
          "desc": [
            "sets the menu default item."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "setItemImage",
          "returns": "None",
          "desc": [
            "sets the image for the menu item."
          ],
          "raises": [],
          "args": [
            [
              "nItemId",
              "int",
              "in"
            ],
            [
              "xGraphic",
              "graphic_x_graphic_i",
              "in"
            ],
            [
              "bScale",
              "bool",
              "in"
            ]
          ]
        }
      ]
    }
  }
}