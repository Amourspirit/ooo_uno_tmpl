#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from _struct_base import struct_base as s_base

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1638341622.653786
__CHEETAH_genTimestamp__ = 'Wed Dec  1 01:53:42 2021'
__CHEETAH_src__ = '/home/paul/Documents/Projects/Python/Cheeta3/ooo_uno_tmpl/uno_obj/awt/SimpleFontMetric.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec  1 01:53:05 2021'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class SimpleFontMetric(s_base):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(SimpleFontMetric, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    sort = True

    name = "SimpleFontMetric"

    desc = """describes the general metrics of a certain font."""

    link = "https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1awt_1_1SimpleFontMetric.html"

    imports = []

    from_imports = []

    auto_imports = []

    attribs = [    {        "name": "Ascent",        "type": "int",        "orig_type": "short",        "lines": ["specifies the portion of a lower case character that rises above the height of the character \"x\" of the font.",            "",            "For example, the letters \"b\", \"d\", \"h\", \"k\" and \"l\" have an ascent unequal to 0.",            "",            "The ascent is measured in pixels, thus the font metric is device dependent."]    },    {        "name": "Descent",        "type": "int",        "orig_type": "short",        "lines": ["specifies the portion of a letter falling below the baseline.",            "",            "For example, the letters \"g\", \"p\", and \"y\" have a descent unequal to 0.",            "",            "The descent is measured in pixels, thus the font metric is device dependent."]    },    {        "name": "FirstChar",        "type": "str",        "orig_type": "char",        "lines": "specifies the code of the first printable character in the font."    },    {        "name": "LastChar",        "type": "str",        "orig_type": "char",        "lines": "specifies the code of the last printable character in the font."    },    {        "name": "Leading",        "type": "int",        "orig_type": "short",        "lines": ["specifies the vertical space between lines of this font; it is also called internal line spacing.",            "",            "The leading is measured in pixels, thus the font metric is device dependent."]    },    {        "name": "Slant",        "type": "int",        "orig_type": "short",        "lines": ["specifies the slant of the characters (italic).",            "",            "The slant is measured in degrees from 0 to 359."]    }]

    _mainCheetahMethod_for_SimpleFontMetric = 'writeBody'

## END CLASS DEFINITION

if not hasattr(SimpleFontMetric, '_initCheetahAttributes'):
    templateAPIClass = getattr(SimpleFontMetric,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SimpleFontMetric)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SimpleFontMetric()).run()


