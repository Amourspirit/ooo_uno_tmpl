#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from _const_base import const_base as c_base

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1638311592.1236806
__CHEETAH_genTimestamp__ = 'Tue Nov 30 17:33:12 2021'
__CHEETAH_src__ = '/home/paul/Documents/Projects/Python/Cheeta3/ooo_uno_tmpl/uno_obj/awt/SystemPointer.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Nov 30 17:33:07 2021'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class SystemPointer(c_base):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(SystemPointer, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    hex = False

    sort = True

    flags = False

    name = "SystemPointer"

    desc = """specifies the shape of a mouse pointer."""

    imports = []

    from_imports = []

    link = "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1awt_1_1SystemPointer.html"

    const_dict = {    "ARROW": ("0", [        "specifies the normal arrow-like mouse pointer."    ]),    "INVISIBLE": ("1", [        "specifies an invisible mouse pointer."    ]),    "WAIT": ("2", [        "specifies a waiting symbol as a mouse pointer (for example hourglass)."    ]),    "TEXT": ("3", [        "specifies a mouse pointer for text (cursor-like)."    ]),    "HELP": ("4", [        "specifies a mouse pointer for on-line help."    ]),    "CROSS": ("5", [        "specifies a cross as a mouse pointer."    ]),    "MOVE": ("6", [        "specifies a mouse pointer which symbolizes movement."    ]),    "NSIZE": ("7", [        "specifies a mouse pointer which symbolizes resizing for a top border."    ]),    "SSIZE": ("8", [        "specifies a mouse pointer which symbolizes resizing for a bottom border."    ]),    "WSIZE": ("9", [        "specifies a mouse pointer which symbolizes resizing for a left border."    ]),    "ESIZE": ("10", [        "specifies a mouse pointer which symbolizes resizing for a right border."    ]),    "NWSIZE": ("11", [        "specifies a mouse pointer which symbolizes resizing for the top-left corner."    ]),    "NESIZE": ("12", [        "specifies a mouse pointer which symbolizes resizing for the top-right corner."    ]),    "SWSIZE": ("13", [        "specifies a mouse pointer which symbolizes resizing for the bottom-left corner."    ]),    "SESIZE": ("14", [        "specifies a mouse pointer which symbolizes resizing for the bottom-right corner."    ]),    "WINDOW_NSIZE": ("15", [        "specifies a mouse pointer which symbolizes window resizing for a top border."    ]),    "WINDOW_SSIZE": ("16", [        "specifies a mouse pointer which symbolizes window resizing for a bottom border."    ]),    "WINDOW_WSIZE": ("17", [        "specifies a mouse pointer which symbolizes window resizing for a left border."    ]),    "WINDOW_ESIZE": ("18", [        "specifies a mouse pointer which symbolizes window resizing for a right border."    ]),    "WINDOW_NWSIZE": ("19", [        "specifies a mouse pointer which symbolizes window resizing for the top-left corner."    ]),    "WINDOW_NESIZE": ("20", [        "specifies a mouse pointer which symbolizes window resizing for the top-right corner."    ]),    "WINDOW_SWSIZE": ("21", [        "specifies a mouse pointer which symbolizes window resizing for the bottom-left corner."    ]),    "WINDOW_SESIZE": ("22", [        "specifies a mouse pointer which symbolizes window resizing for the bottom-right corner."    ]),    "HSPLIT": ("23", [        "specifies a mouse pointer which symbolizes horizontal splitting."    ]),    "VSPLIT": ("24", [        "specifies a mouse pointer which symbolizes vertical splitting."    ]),    "HSIZEBAR": ("25", [        "specifies a mouse pointer which symbolizes horizontal resizing."    ]),    "VSIZEBAR": ("26", [        "specifies a mouse pointer which symbolizes vertical resizing."    ]),    "HAND": ("27", [        "specifies a hand symbol as mouse pointer."    ]),    "REFHAND": ("28", [        "specifies a pointing hand symbol as mouse pointer."    ]),    "PEN": ("29", [        "specifies a pen symbol as mouse pointer."    ]),    "MAGNIFY": ("30", [        "specifies a magnify symbol as mouse pointer."    ]),    "FILL": ("31", [        "specifies a fill symbol as mouse pointer."    ]),    "ROTATE": ("32", [        "specifies a rotate symbol as mouse pointer."    ]),    "HSHEAR": ("33", [        "specifies a horizontal shear symbol as mouse pointer."    ]),    "VSHEAR": ("34", [        "specifies a vertical shear symbol as mouse pointer."    ]),    "MIRROR": ("35", [        "specifies a mirror symbol as mouse pointer."    ]),    "CROOK": ("36", [        "specifies a crook symbol as mouse pointer."    ]),    "CROP": ("37", [        "specifies a crop symbol as mouse pointer."    ]),    "MOVEPOINT": ("38", [        "specifies a mouse pointer which symbolizes moving a point."    ]),    "MOVEBEZIERWEIGHT": ("39", [        "specifies a mouse pointer which symbolizes moving a Bezier weight."    ]),    "MOVEDATA": ("40", [        "specifies a mouse pointer which symbolizes moving data."    ]),    "COPYDATA": ("41", [        "specifies a mouse pointer which symbolizes copying data."    ]),    "LINKDATA": ("42", [        "specifies a mouse pointer which symbolizes linking data."    ]),    "MOVEDATALINK": ("43", [        "specifies a mouse pointer which symbolizes moving a data link."    ]),    "COPYDATALINK": ("44", [        "specifies a mouse pointer which symbolizes copying a data link."    ]),    "MOVEFILE": ("45", [        "specifies a mouse pointer which symbolizes moving a file."    ]),    "COPYFILE": ("46", [        "specifies a mouse pointer which symbolizes copying a file."    ]),    "LINKFILE": ("47", [        "specifies a mouse pointer which symbolizes linking a file."    ]),    "MOVEFILELINK": ("48", [        "specifies a mouse pointer which symbolizes moving a file link."    ]),    "COPYFILELINK": ("49", [        "specifies a mouse pointer which symbolizes copying a file link."    ]),    "MOVEFILES": ("50", [        "specifies a mouse pointer which symbolizes moving multiple files."    ]),    "COPYFILES": ("51", [        "specifies a mouse pointer which symbolizes copying multiple files."    ]),    "NOTALLOWED": ("52", [        "specifies a mouse pointer which symbolizes \"not allowed\"."    ]),    "DRAW_LINE": ("53", [        "specifies a mouse pointer which symbolizes drawing a line."    ]),    "DRAW_RECT": ("54", [        "specifies a mouse pointer which symbolizes drawing a rectangle."    ]),    "DRAW_POLYGON": ("55", [        "specifies a mouse pointer which symbolizes drawing a polygon."    ]),    "DRAW_BEZIER": ("56", [        "specifies a mouse pointer which symbolizes drawing a Bezier."    ]),    "DRAW_ARC": ("57", [        "specifies a mouse pointer which symbolizes drawing an arc."    ]),    "DRAW_PIE": ("58", [        "specifies a mouse pointer which symbolizes drawing a pie."    ]),    "DRAW_CIRCLECUT": ("59", [        "specifies a mouse pointer which symbolizes drawing a circle cut."    ]),    "DRAW_ELLIPSE": ("60", [        "specifies a mouse pointer which symbolizes drawing an ellipse."    ]),    "DRAW_FREEHAND": ("61", [        "specifies a mouse pointer which symbolizes drawing free handed."    ]),    "DRAW_CONNECT": ("62", [        "specifies a mouse pointer which symbolizes drawing a connector."    ]),    "DRAW_TEXT": ("63", [        "specifies a mouse pointer which symbolizes drawing text."    ]),    "DRAW_CAPTION": ("64", [        "specifies a mouse pointer which symbolizes drawing a text caption."    ]),    "CHART": ("65", [        "specifies a mouse pointer which symbolizes a chart."    ]),    "DETECTIVE": ("66", [        "specifies a mouse pointer which symbolizes a detective."    ]),    "PIVOT_COL": ("67", [        "specifies a mouse pointer which symbolizes a pivot column."    ]),    "PIVOT_ROW": ("68", [        "specifies a mouse pointer which symbolizes a pivot row."    ]),    "PIVOT_FIELD": ("69", [        "specifies a mouse pointer which symbolizes a pivot field."    ]),    "CHAIN": ("70", [        "specifies a mouse pointer which symbolizes a chain."    ]),    "CHAIN_NOTALLOWED": ("71", [        "specifies a mouse pointer which symbolizes \"chaining not allowed\"."    ])}

    _mainCheetahMethod_for_SystemPointer = 'writeBody'

## END CLASS DEFINITION

if not hasattr(SystemPointer, '_initCheetahAttributes'):
    templateAPIClass = getattr(SystemPointer,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(SystemPointer)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=SystemPointer()).run()


