{
  "id": "uno-ooo-parser",
  "version": "0.1.8",
  "timestamp": "2021-12-27 19:32:16+00:00",
  "name": "XCanvas",
  "type": "interface",
  "namespace": "com.sun.star.rendering",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        "..geometry.real_point2_d",
        "RealPoint2D"
      ],
      [
        "..geometry.real_bezier_segment2_d",
        "RealBezierSegment2D"
      ],
      [
        ".x_cached_primitive",
        "XCachedPrimitive"
      ],
      [
        ".render_state",
        "RenderState"
      ],
      [
        "..beans.property_value",
        "PropertyValue"
      ],
      [
        ".font_info",
        "FontInfo"
      ],
      [
        ".x_text_layout",
        "XTextLayout"
      ],
      [
        "..geometry.matrix2_d",
        "Matrix2D"
      ],
      [
        ".font_info",
        "FontInfo"
      ],
      [
        ".font_request",
        "FontRequest"
      ],
      [
        ".string_context",
        "StringContext"
      ],
      [
        ".x_poly_polygon2_d",
        "XPolyPolygon2D"
      ],
      [
        "..geometry.x_mapping2_d",
        "XMapping2D"
      ],
      [
        ".x_canvas_font",
        "XCanvasFont"
      ],
      [
        ".view_state",
        "ViewState"
      ],
      [
        ".stroke_attributes",
        "StrokeAttributes"
      ],
      [
        ".texture",
        "Texture"
      ],
      [
        ".x_bitmap",
        "XBitmap"
      ],
      [
        ".x_graphic_device",
        "XGraphicDevice"
      ]
    ],
    "quote": [
      "RealBezierSegment2D",
      "Matrix2D",
      "XTextLayout",
      "FontRequest",
      "StrokeAttributes",
      "ViewState",
      "typing.List[Texture]",
      "XBitmap",
      "XGraphicDevice",
      "RenderState",
      "XCachedPrimitive",
      "XMapping2D",
      "typing.List[FontInfo]",
      "FontInfo",
      "XPolyPolygon2D",
      "StringContext",
      "XCanvasFont",
      "RealPoint2D",
      "typing.List[PropertyValue]"
    ],
    "typings": [
      "typing.List[Texture]",
      "typing.List[FontInfo]",
      "typing.List[PropertyValue]"
    ],
    "requires_typing": true,
    "name": "XCanvas",
    "imports": [],
    "namespace": "com.sun.star.rendering",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Central interface for rendering.",
      "",
      "This is the central interface for graphical output production, and the place where all draw methods are located.",
      "",
      "Some notes are in order to explain the concepts used here. The XCanvas interface is free of client-modifiable state, i.e. it can be used safely and without external synchronization in a multi-threaded environment. On the other hand, this implies that for nearly every canvas operation, external state is required. This is provided by ViewState and RenderState in a unified fashion, supplemented by a few extra state parameters for some methods (e.g. textured polygons or text rendering).",
      "",
      "When used careless, this scheme can be inefficient to some extend, because internally, view, render and other states have to be combined before rendering. This is especially expensive for complex clip polygons, i.e. when both ViewState and RenderState have a complex clip polygon set, which have to be intersected before rendering. It is therefore recommended to combine ViewState and RenderState already at the client side, when objects are organized in a hierarchical way: the classic example are grouped draw shapes, whose parent group object imposes a common clipping and a common transformation on its siblings. The group object would therefore merge the ViewState and the RenderState it is called with into a new ViewState, and call its siblings with a RenderState containing only the local offset (and no extra clipping).",
      "",
      "Further on, this stateless nature provides easy ways for caching. Every non-trivial operation on XCanvas can return a cache object, which, when called to redraw, renders the primitive usually much more quickly than the original method. Note that such caching is a lot more complicated, should the actual rendering a method yields depend on internal state (which is the case e.g. for the com.sun.star.awt.XGraphics interface). Please note, though, that deciding whether to return an XCachedPrimitive is completely up to the implementation - don't rely on the methods returning something (this is because there might be cases when returning such a cache object will actually be a pessimization, since it involves memory allocation and comparisons).",
      "",
      "Things that need more than a small, fixed amount of data are encapsulated in own interfaces, e.g. polygons and bitmaps. You can, in principle, roll your own implementations of these interfaces, wrap it around your internal representation of polygons and bitmaps, and render them. It might just not be overly fast, because the XCanvas would need to convert for each render call. It is therefore recommended to create such objects via the XGraphicDevice factory (to be retrieved from every canvas object via the getDevice() call) - they will then internally optimize to the underlying graphics subsystem.",
      "",
      "**since**",
      "",
      "    OOo 2.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1rendering_1_1XCanvas.html",
    "items": {
      "methods": [
        {
          "name": "clear",
          "returns": "None",
          "desc": [
            "Clear the whole canvas area.",
            "",
            "This method clears the whole canvas area to the device default color (e.g. white for a printer, transparent for an XCustomSprite)."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "createFont",
          "returns": "XCanvasFont",
          "desc": [
            "Create a suitable font for the specified font description."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aFontRequest",
              "FontRequest",
              "in"
            ],
            [
              "aExtraFontProperties",
              "typing.List[PropertyValue]",
              "in"
            ],
            [
              "aFontMatrix",
              "Matrix2D",
              "in"
            ]
          ]
        },
        {
          "name": "drawBezier",
          "returns": "None",
          "desc": [
            "Draw a cubic Bezier curve in device resolution width (i.e.",
            "",
            "one device pixel wide)."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aBezierSegment",
              "RealBezierSegment2D",
              "in"
            ],
            [
              "aEndPoint",
              "RealPoint2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawBitmap",
          "returns": "XCachedPrimitive",
          "desc": [
            "Render the given bitmap.",
            "",
            "This method renders the bitmap, at a position and shape as specified by the combined view and render transformations. For fast render speed, the bitmap should be created by the corresponding XGraphicDevice's XGraphicDevice.createCompatibleBitmap() method."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xBitmap",
              "XBitmap",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawBitmapModulated",
          "returns": "XCachedPrimitive",
          "desc": [
            "Render the given bitmap, with a global color modulation.",
            "",
            "This method renders the bitmap, at a position and shape as specified by the combined view and render transformations. For fast render speed, the bitmap should be created by the corresponding XGraphicDevice's XGraphicDevice.createCompatibleBitmap() method. The bitmap's color channel values are multiplied with the device color values as specified in the render state."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xBitmap",
              "XBitmap",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawLine",
          "returns": "None",
          "desc": [
            "Draw a line in device resolution width (i.e.",
            "",
            "one device pixel wide)."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aStartPoint",
              "RealPoint2D",
              "in"
            ],
            [
              "aEndPoint",
              "RealPoint2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawPoint",
          "returns": "None",
          "desc": [
            "Draw a point in device resolution on the device."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aPoint",
              "RealPoint2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Draw a poly-polygon in device resolution line width (i.e.",
            "",
            "the lines are one device pixel wide)."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "drawText",
          "returns": "XCachedPrimitive",
          "desc": [
            "Draw the text given by the substring of the specified string with the given font.",
            "",
            "The local origin of this output operation is either the left end of the text baseline, for textDirection equal LEFT_TO_RIGHT, or the right end of the baseline, for textDirection equal to RIGHT_TO_LEFT, respectively."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aText",
              "StringContext",
              "in"
            ],
            [
              "xFont",
              "XCanvasFont",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "nTextDirection",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "drawTextLayout",
          "returns": "XCachedPrimitive",
          "desc": [
            "Draw the formatted text given by the text layout.",
            "",
            "The glyphs as represented by the text layout are always output with the reference position being the leftmost edge of the layout object's baseline. If the layout contains more than one baseline, the baseline of the first strong character in logical order is used here (strong in this context means that the character can be unambiguously assigned to a Unicode script)."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xLayoutetText",
              "XTextLayout",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "fillPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Fill the given poly-polygon.",
            "",
            "This method fills the given poly-polygon according to the RenderState's color and the poly-polygon's fill rule."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ]
          ]
        },
        {
          "name": "fillTextureMappedPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Fill the given poly-polygon with a mapped texture.",
            "",
            "This method fills the given poly-polygon according to the RenderState's color, the given textures and poly-polygon's fill rule. The texture is mapped to the poly-polygon's interior via the given texture mapping."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "xTextures",
              "typing.List[Texture]",
              "in"
            ],
            [
              "xMapping",
              "XMapping2D",
              "in"
            ]
          ]
        },
        {
          "name": "fillTexturedPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Fill the given poly-polygon with a texture.",
            "",
            "This method fills the given poly-polygon according to the RenderState's color, the given textures and poly-polygon's fill rule."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "xTextures",
              "typing.List[Texture]",
              "in"
            ]
          ]
        },
        {
          "name": "getDevice",
          "returns": "XGraphicDevice",
          "desc": [
            "Request the associated graphic device for this canvas.",
            "",
            "A graphic device provides methods specific to the underlying output device capabilities, which are common for all canvases rendering to such a device. This includes device resolution, color space, or bitmap formats."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "queryAvailableFonts",
          "returns": "typing.List[FontInfo]",
          "desc": [
            "Query font information, specific to this canvas."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aFilter",
              "FontInfo",
              "in"
            ],
            [
              "aFontProperties",
              "typing.List[PropertyValue]",
              "in"
            ]
          ]
        },
        {
          "name": "queryStrokeShapes",
          "returns": "XPolyPolygon2D",
          "desc": [
            "Query the polygonal representation of the stroke outlines, as it would be generated by the strokePolyPolygon methods.",
            "",
            "This method can be used to e.g. set a clipping which covers the same area as a stroke."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "aStrokeAttributes",
              "StrokeAttributes",
              "in"
            ]
          ]
        },
        {
          "name": "strokePolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Stroke each polygon of the provided poly-polygon with the specified stroke attributes.",
            "",
            "This method considers the stroking of all polygons as an atomic operation in relation to the RenderState's CompositeOperationy operation. That means, overlapping strokes from distinct polygons will look exactly as overlapping segments of the same polygon, even with transparency."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "aStrokeAttributes",
              "StrokeAttributes",
              "in"
            ]
          ]
        },
        {
          "name": "strokeTextureMappedPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Stroke each polygon of the provided poly-polygon with the specified stroke attributes, fill the stroked outline with the specified texture graphics, map the texture to the outline via the specified texture mapping.",
            "",
            "This method considers the stroking of all polygons as an atomic operation in relation to the RenderState's CompositeOp operation. That means, overlapping strokes from distinct polygons will look exactly as overlapping segments of the same polygon, even with transparency."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "aTextures",
              "typing.List[Texture]",
              "in"
            ],
            [
              "xMapping",
              "XMapping2D",
              "in"
            ],
            [
              "aStrokeAttributes",
              "StrokeAttributes",
              "in"
            ]
          ]
        },
        {
          "name": "strokeTexturedPolyPolygon",
          "returns": "XCachedPrimitive",
          "desc": [
            "Stroke each polygon of the provided poly-polygon with the specified stroke attributes, fill the stroked outline with the specified texture graphics.",
            "",
            "This method considers the stroking of all polygons as an atomic operation in relation to the RenderState's CompositeOp operation. That means, overlapping strokes from distinct polygons will look exactly as overlapping segments of the same polygon, even with transparency."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "VolatileContentDestroyedException"
          ],
          "args": [
            [
              "xPolyPolygon",
              "XPolyPolygon2D",
              "in"
            ],
            [
              "aViewState",
              "ViewState",
              "in"
            ],
            [
              "aRenderState",
              "RenderState",
              "in"
            ],
            [
              "aTextures",
              "typing.List[Texture]",
              "in"
            ],
            [
              "aStrokeAttributes",
              "StrokeAttributes",
              "in"
            ]
          ]
        }
      ]
    }
  }
}