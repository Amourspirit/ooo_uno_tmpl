{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "type": "struct",
  "name": "IntegerBitmapLayout",
  "namespace": "com.sun.star.rendering",
  "parser_args": {
    "sort": true,
    "long_names": true
  },
  "writer_args": {
    "sort": true,
    "dynamic_struct": false,
    "include_desc": true
  },
  "data": {
    "name": "IntegerBitmapLayout",
    "namespace": "com.sun.star.rendering",
    "url": "https://api.libreoffice.org/docs/idl/ref/structcom_1_1sun_1_1star_1_1rendering_1_1IntegerBitmapLayout.html",
    "from_imports": [],
    "from_imports_typing": [
      [
        ".x_integer_bitmap_color_space",
        "XIntegerBitmapColorSpace",
        "x_integer_bitmap_color_space_i"
      ],
      [
        ".x_bitmap_palette",
        "XBitmapPalette",
        "x_bitmap_palette_i"
      ]
    ],
    "extends_map": {},
    "quote": [
      "x_integer_bitmap_color_space_i",
      "x_bitmap_palette_i"
    ],
    "typings": [],
    "requires_typing": true,
    "fullname": "com.sun.star.rendering.IntegerBitmapLayout",
    "desc": [
      "This structure describes the memory layout of a bitmap having integer color channels.",
      "",
      "This structure collects all necessary information to describe the memory layout of a bitmap having integer color channels",
      "",
      "**since**",
      "",
      "    OOo 2.0"
    ],
    "imports": [],
    "extends": [],
    "items": [
      {
        "name": "ColorSpace",
        "type": "x_integer_bitmap_color_space_i",
        "lines": [
          "Color space the bitmap colors shall be interpreted within.",
          "",
          "Note that the actual pixel layout is specified at the color space. If this layout describes a palette bitmap format, this color space describes the index format (plus maybe an extra alpha channel). The palette itself references another color space, which describes the layout of the palette entries."
        ]
      },
      {
        "name": "IsMsbFirst",
        "type": "bool",
        "lines": [
          "This member determines the bit order (only relevant if a pixel uses less than 8 bits, of course).",
          "",
          "When TRUE, this member denotes that the leftmost pixel from an 8 bit amount of pixel data consists of the bits starting with the most significant bit. When FALSE, it's starting with the least significant bit.",
          "",
          "Example: for a 1bpp bitmap, each pixel is represented by exactly one bit. If this member is TRUE, the first pixel is the MSB of the first byte, and the eighth pixel is the LSB of the first byte. If this member is FALSE, it's just the opposite."
        ]
      },
      {
        "name": "Palette",
        "type": "x_bitmap_palette_i",
        "lines": [
          "This member determines whether the bitmap data are actually indices into a color map.",
          "",
          "When set to the nil reference, the bitmap data is assumed to contain direct color values (to be interpreted according to the associated color space). If this member references a valid palette, one of the pixel components as returned by the color space referenced from the ColorSpace is required to be of type ColorComponentTag.INDEX. That component is then used to index the palette."
        ]
      },
      {
        "name": "PlaneStride",
        "type": "int",
        "lines": [
          "Byte offset between the start of two consecutive planes.",
          "",
          "This value is permitted to be negative. If this value is zero, the bitmap is assumed to be in chunky format, otherwise it is assumed to be planar. The difference between chunky and planar layout lies in the way how color channels are interleaved. For a chunky format, all channel data for a single pixel lies consecutively in memory. For a planar layout, the first channel of all pixel is stored consecutive, followed by the second channel, and so forth."
        ]
      },
      {
        "name": "ScanLineBytes",
        "type": "int",
        "lines": [
          "Number of data bytes per scanline.",
          "",
          "This value must not be negative"
        ]
      },
      {
        "name": "ScanLineStride",
        "type": "int",
        "lines": [
          "Byte offset between the start of two consecutive scanlines.",
          "",
          "This value is permitted to be negative, denoting a bitmap whose content is flipped at the x axis."
        ]
      },
      {
        "name": "ScanLines",
        "type": "int",
        "lines": [
          "Number of scanlines for this bitmap.",
          "",
          "This value must not be negative"
        ]
      }
    ]
  }
}