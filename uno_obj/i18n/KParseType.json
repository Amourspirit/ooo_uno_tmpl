{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "name": "KParseType",
  "type": "const",
  "namespace": "com.sun.star.i18n",
  "parser_args": {
    "sort": false
  },
  "writer_args": {
    "hex": false,
    "flags": null
  },
  "data": {
    "name": "KParseType",
    "namespace": "com.sun.star.i18n",
    "url": "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1i18n_1_1KParseType.html",
    "flags": true,
    "base_class": "ConstIntFlagsBase",
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "from_imports": [
      [
        "ooo_uno.base.const",
        "ConstIntFlagsBase"
      ]
    ],
    "from_imports_typing": [],
    "fullname": "com.sun.star.i18n.KParseType",
    "desc": [
      "Constants to specify the type of a parsed token.",
      "",
      "Set by XCharacterClassification.parseAnyToken() and XCharacterClassification.parsePredefinedToken() in ParseResult.TokenType."
    ],
    "items": [
      {
        "name": "ANY_NUMBER",
        "type": "int",
        "value_type": "STRING",
        "value": "ASC_NUMBER | UNI_NUMBER",
        "lines": [
          "Any ASCII or Unicode number."
        ]
      },
      {
        "name": "ASC_NUMBER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 32,
        "lines": [
          "A number where all digits are ASCII characters.",
          "",
          "Numerical value in ParseResult.Value."
        ]
      },
      {
        "name": "BOOLEAN",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2,
        "lines": [
          "A Boolean operator like <, >, <>, =, <=, >=."
        ]
      },
      {
        "name": "DOUBLE_QUOTE_STRING",
        "type": "int",
        "value_type": "INTEGER",
        "value": 16,
        "lines": [
          "A double-quoted string ( \\\"str\\\\\"i\\\"\\\"ng\\\" ).",
          "",
          "Dequoted string in ParseResult.DequotedNameOrString ( str\\\"i\\\"ng )."
        ]
      },
      {
        "name": "IDENTNAME",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4,
        "lines": [
          "A name matching the conditions passed."
        ]
      },
      {
        "name": "MISSING_QUOTE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1073741824,
        "lines": [
          "Set (ored) if SINGLE_QUOTE_NAME or DOUBLE_QUOTE_STRING has no closing quote."
        ]
      },
      {
        "name": "ONE_SINGLE_CHAR",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1,
        "lines": [
          "One single character like ! # ; : $ et al."
        ]
      },
      {
        "name": "SINGLE_QUOTE_NAME",
        "type": "int",
        "value_type": "INTEGER",
        "value": 8,
        "lines": [
          "\\\"A single-quoted name matching the conditions passed ( 'na\\'me' ).\\\" \\\"Dequoted name in ParseResult.DequotedNameOrString ( na'me ).\\\""
        ]
      },
      {
        "name": "UNI_NUMBER",
        "type": "int",
        "value_type": "INTEGER",
        "value": 64,
        "lines": [
          "A number where at least some digits are Unicode (and maybe ASCII) characters.",
          "",
          "Numerical value inKParseType ParseResult.Value."
        ]
      }
    ]
  }
}