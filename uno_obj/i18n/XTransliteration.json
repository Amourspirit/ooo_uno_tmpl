{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "XTransliteration",
  "type": "interface",
  "namespace": "com.sun.star.i18n",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ]
    ],
    "from_imports_typing": [
      [
        ".transliteration_modules",
        "TransliterationModules",
        "TransliterationModules_32090f64"
      ],
      [
        ".transliteration_modules_new",
        "TransliterationModulesNew",
        "TransliterationModulesNew_6260108e"
      ],
      [
        "..lang.locale",
        "Locale",
        "Locale_70d308fa"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "XInterface_8f010a43"
    },
    "quote": [
      "Locale_70d308fa",
      "TransliterationModules_32090f64",
      "typing.List[TransliterationModulesNew_6260108e]",
      "typing.List[int]",
      "typing.List[str]"
    ],
    "typings": [
      "typing.List[TransliterationModulesNew_6260108e]",
      "typing.List[int]",
      "typing.List[str]"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.i18n.TransliterationModules",
        "com.sun.star.i18n.TransliterationModulesNew",
        "com.sun.star.lang.Locale"
      ]
    },
    "name": "XTransliteration",
    "imports": [],
    "namespace": "com.sun.star.i18n",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Character conversions like case folding or Hiragana to Katakana.",
      "",
      "Transliteration is a character to character conversion but it is not always a one to one mapping between characters. Transliteration modules are primarily used by collation, and search and replace modules to perform approximate search. It can also be used to format the numbers in different numbering systems.",
      "",
      "In order to select transliteration modules for different purposes, they are classified with attributes of TransliterationType.",
      "",
      "For Western languages there would be three transliteration modules available to compare two mixed case strings: upper to lower, lower to upper, and ignore case.",
      "",
      "A typical calling sequence of transliteration is",
      "",
      "or another one is"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1i18n_1_1XTransliteration.html",
    "items": {
      "methods": [
        {
          "name": "compareString",
          "returns": "int",
          "desc": [
            "Compare 2 strings as per this transliteration.",
            "",
            "It translates both strings before comparing them."
          ],
          "raises": [],
          "args": [
            [
              "aStr1",
              "str",
              "in"
            ],
            [
              "aStr2",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "compareSubstring",
          "returns": "int",
          "desc": [
            "Compare 2 substrings as per this transliteration.",
            "",
            "It translates both substrings before comparing them."
          ],
          "raises": [],
          "args": [
            [
              "aStr1",
              "str",
              "in"
            ],
            [
              "nOff1",
              "int",
              "in"
            ],
            [
              "nLen1",
              "int",
              "in"
            ],
            [
              "aStr2",
              "str",
              "in"
            ],
            [
              "nOff2",
              "int",
              "in"
            ],
            [
              "nLen2",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "equals",
          "returns": "bool",
          "desc": [
            "Match two substrings and find if they are equivalent as per this transliteration.",
            "",
            "This method can be called if the object has TransliterationType IGNORE attribute.",
            "",
            "Returns the number of matched code points in any case, even if strings are not equal, for example:",
            "equals( \\\"a\\\", 0, 1, nMatch1, \\\"aaa\\\", 0, 3, nMatch2 )",
            "returns FALSE and nMatch:=1 and nMatch2:=1",
            "equals( \\\"aab\\\", 0, 3, nMatch1, \\\"aaa\\\", 0, 3, nMatch2 )",
            "returns FALSE and nMatch:=2 and nMatch2:=2"
          ],
          "raises": [],
          "args": [
            [
              "aStr1",
              "str",
              "in"
            ],
            [
              "nPos1",
              "int",
              "in"
            ],
            [
              "nCount1",
              "int",
              "in"
            ],
            [
              "rMatch1",
              "int",
              "out"
            ],
            [
              "aStr2",
              "str",
              "in"
            ],
            [
              "nPos2",
              "int",
              "in"
            ],
            [
              "nCount2",
              "int",
              "in"
            ],
            [
              "rMatch2",
              "int",
              "out"
            ]
          ]
        },
        {
          "name": "folding",
          "returns": "str",
          "desc": [],
          "raises": [],
          "args": [
            [
              "aInStr",
              "str",
              "in"
            ],
            [
              "nStartPos",
              "int",
              "in"
            ],
            [
              "nCount",
              "int",
              "in"
            ],
            [
              "rOffset",
              "typing.List[int]",
              "out"
            ]
          ]
        },
        {
          "name": "getAvailableModules",
          "returns": "typing.List[str]",
          "desc": [
            "List the available transliteration modules for a given locale.",
            "",
            "It can be filtered based on its type."
          ],
          "raises": [],
          "args": [
            [
              "aLocale",
              "Locale_70d308fa",
              "in"
            ],
            [
              "nType",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getName",
          "returns": "str",
          "desc": [
            "Unique ASCII name to identify a module.",
            "",
            "This name is used to get its localized name for menus, dialogs etc. The behavior is undefined for TransliterationType.CASCADE modules."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getType",
          "returns": "int",
          "desc": [
            "Return the attribute(s) associated with this transliteration object, as defined in TransliterationType.",
            "",
            "The value is determined by the transliteration modules. For example, for UPPERCASE_LOWERCASE, a ONE_TO_ONE is returned, for IGNORE_CASE, IGNORE is returned."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "loadModule",
          "returns": "None",
          "desc": [
            "Load instance of predefined module - old style method."
          ],
          "raises": [],
          "args": [
            [
              "eModType",
              "TransliterationModules_32090f64",
              "in"
            ],
            [
              "aLocale",
              "Locale_70d308fa",
              "in"
            ]
          ]
        },
        {
          "name": "loadModuleByImplName",
          "returns": "None",
          "desc": [
            "Load instance of UNO registered module.",
            "",
            "Each transliteration module is registered under a different service name. The convention for the service name is com.sun.star.i18n.Transliteration.l10n.{implName}. The {implName} is a unique name used to identify a module. The implName is used to get a localized name for the transliteration module. The implName is used in locale data to list the available transliteration modules for the locale. There are some transliteration modules that are always available. The names of those modules are listed as enum TransliterationModules names. For modules not listed there it is possible to load them directly by their implName."
          ],
          "raises": [],
          "args": [
            [
              "aImplName",
              "str",
              "in"
            ],
            [
              "aLocale",
              "Locale_70d308fa",
              "in"
            ]
          ]
        },
        {
          "name": "loadModuleNew",
          "returns": "None",
          "desc": [
            "Load a sequence of instances of predefined modules - supersedes method XTransliteration.loadModule()."
          ],
          "raises": [],
          "args": [
            [
              "aModType",
              "typing.List[TransliterationModulesNew_6260108e]",
              "in"
            ],
            [
              "aLocale",
              "Locale_70d308fa",
              "in"
            ]
          ]
        },
        {
          "name": "loadModulesByImplNames",
          "returns": "None",
          "desc": [
            "Load a sequence of instances of transliteration modules.",
            "",
            "Output of one module is fed as input to the next module in the sequence. The object created by this call has TransliterationType CASCADE and IGNORE types."
          ],
          "raises": [],
          "args": [
            [
              "aImplNameList",
              "typing.List[str]",
              "in"
            ],
            [
              "aLocale",
              "Locale_70d308fa",
              "in"
            ]
          ]
        },
        {
          "name": "transliterate",
          "returns": "str",
          "desc": [
            "Transliterate a substring.",
            "",
            "This method can be called if the object doesn't have TransliterationType IGNORE attribute."
          ],
          "raises": [],
          "args": [
            [
              "aInStr",
              "str",
              "in"
            ],
            [
              "nStartPos",
              "int",
              "in"
            ],
            [
              "nCount",
              "int",
              "in"
            ],
            [
              "rOffset",
              "typing.List[int]",
              "out"
            ]
          ]
        },
        {
          "name": "transliterateRange",
          "returns": "typing.List[str]",
          "desc": [
            "Transliterate one set of characters to another.",
            "",
            "This method is intended for getting corresponding ranges and can be called if the object has TransliterationType IGNORE attribute.",
            "",
            "For example: generic CASE_IGNORE transliterateRange( \\\"a\\\", \\\"i\\\" ) returns {\\\"A\\\",\\\"I\\\",\\\"a\\\",\\\"i\\\"}, transliterateRange( \\\"a\\\", \\\"a\\\" ) returns {\\\"A\\\",\\\"A\\\",\\\"a\\\",\\\"a\\\"}.",
            "",
            "Use this transliteration to create regular expressions like [a-i] --> [A-Ia-i]."
          ],
          "raises": [],
          "args": [
            [
              "aStr1",
              "str",
              "in"
            ],
            [
              "aStr2",
              "str",
              "in"
            ]
          ]
        }
      ]
    }
  }
}