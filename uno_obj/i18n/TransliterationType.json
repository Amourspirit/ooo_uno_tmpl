{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "TransliterationType",
  "type": "const",
  "namespace": "com.sun.star.i18n",
  "parser_args": {
    "sort": false,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "hex": false,
    "flags": false,
    "include_desc": true
  },
  "data": {
    "name": "TransliterationType",
    "namespace": "com.sun.star.i18n",
    "url": "https://api.libreoffice.org/docs/idl/ref/namespacecom_1_1sun_1_1star_1_1i18n_1_1TransliterationType.html",
    "flags": false,
    "base_class": "ConstIntBase",
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "from_imports": [
      [
        "ooo_uno.base.const",
        "ConstIntBase"
      ]
    ],
    "from_imports_typing": [],
    "fullname": "com.sun.star.i18n.TransliterationType",
    "desc": [
      "Bitmask transliteration types used with XTransliteration.getType() and XTransliteration.getAvailableModules() methods.",
      "",
      "Non-IGNORE type modules provide XTransliteration.transliterate().",
      "IGNORE type modules provide XTransliteration.equals() and XTransliteration.transliterateRange()."
    ],
    "items": [
      {
        "name": "NONE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 0,
        "lines": []
      },
      {
        "name": "ONE_TO_ONE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 1,
        "lines": [
          "A transliteration module is ONE_TO_ONE if and only if it's mapping between characters is one to one like a-z to A-Z.",
          "",
          "Transliteration modules of this type can be used as choice in regular expressions based search/replace."
        ]
      },
      {
        "name": "NUMERIC",
        "type": "int",
        "value_type": "INTEGER",
        "value": 2,
        "lines": [
          "A transliteration module can have attribute NUMERIC if it transliterates numbers in different languages like Chinese numbers to Arabic numbers and vice versa.",
          "",
          "This mapping need not be one to one, it should be primarily used by number formatting and parsing methods."
        ]
      },
      {
        "name": "ONE_TO_ONE_NUMERIC",
        "type": "int",
        "value_type": "INTEGER",
        "value": 3,
        "lines": [
          "A transliteration module is ONE_TO_ONE_NUMERIC if it offers both one to one mapping and handles number also."
        ]
      },
      {
        "name": "IGNORE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 4,
        "lines": [
          "With a transliteration IGNORE case, the regular expression A-Z can be transformed to a-z, for example."
        ]
      },
      {
        "name": "CASCADE",
        "type": "int",
        "value_type": "INTEGER",
        "value": 8,
        "lines": [
          "If the transliteration is cascaded (uses more than one algorithm)."
        ]
      }
    ]
  }
}