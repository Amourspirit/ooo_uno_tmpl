{
  "id": "uno-ooo-parser",
  "version": "0.1.14",
  "libre_office_ver": "7.2",
  "name": "XCachedDynamicResultSetStubFactory",
  "type": "interface",
  "namespace": "com.sun.star.ucb",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_any_compare_factory",
        "XAnyCompareFactory"
      ],
      [
        ".x_dynamic_result_set",
        "XDynamicResultSet"
      ],
      [
        ".numbered_sorting_info",
        "NumberedSortingInfo"
      ]
    ],
    "quote": [
      "XAnyCompareFactory",
      "typing.List[NumberedSortingInfo]",
      "XDynamicResultSet"
    ],
    "typings": [
      "typing.List[NumberedSortingInfo]"
    ],
    "requires_typing": true,
    "name": "XCachedDynamicResultSetStubFactory",
    "imports": [],
    "namespace": "com.sun.star.ucb",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "creates a CachedDynamicResultSetStub and connects a non-remote optimized DynamicResultSet to a remote optimized CachedDynamicResultSet.",
      "",
      "Pay attention to instantiate this helper on server side where your source DynamicResultSet was instantiated.",
      "",
      "Method XCachedDynamicResultSetStubFactory.createCachedDynamicResultSetStub() can be used to create a stub on server side.",
      "",
      "If you have instantiated a CachedDynamicResultSet on client side already, use method connectToCache() to connect your given DynamicResultSet with this Cache.",
      "",
      "The needed cache on server side you can create using XCachedDynamicResultSetFactory."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1ucb_1_1XCachedDynamicResultSetStubFactory.html",
    "items": {
      "methods": [
        {
          "name": "connectToCache",
          "returns": "None",
          "desc": [
            "If you have instantiated a CachedDynamicResultSet on client side already, use this to connect your given Source on server side to the TargetCache."
          ],
          "raises": [
            "",
            "com.sun.star.ucb.AlreadyInitializedException"
          ],
          "args": [
            [
              "Source",
              "XDynamicResultSet",
              "in"
            ],
            [
              "TargetCache",
              "XDynamicResultSet",
              "in"
            ],
            [
              "SortingInfo",
              "typing.List[NumberedSortingInfo]",
              "in"
            ],
            [
              "CompareFactory",
              "XAnyCompareFactory",
              "in"
            ]
          ]
        },
        {
          "name": "createCachedDynamicResultSetStub",
          "returns": "XDynamicResultSet",
          "desc": [
            "creates a remote optimizes XDynamicResultSet."
          ],
          "raises": [],
          "args": [
            [
              "Source",
              "XDynamicResultSet",
              "in"
            ]
          ]
        }
      ]
    }
  }
}