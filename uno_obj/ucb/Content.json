{
  "id": "uno-ooo-parser",
  "version": "0.1.19",
  "libre_office_ver": "7.2",
  "name": "Content",
  "type": "service",
  "namespace": "com.sun.star.ucb",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": false,
    "from_imports": [
      [
        ".x_command_processor",
        "XCommandProcessor",
        "XCommandProcessor_dfe80d19"
      ]
    ],
    "from_imports_typing": [
      [
        "..uno.x_interface",
        "XInterface",
        "XInterface_8f010a43"
      ],
      [
        "..beans.x_property_set_info_change_listener",
        "XPropertySetInfoChangeListener",
        "XPropertySetInfoChangeListener_d5261312"
      ],
      [
        ".x_command_info_change_listener",
        "XCommandInfoChangeListener",
        "XCommandInfoChangeListener_635a1071"
      ],
      [
        ".command",
        "Command",
        "Command_709c0901"
      ],
      [
        ".x_content_event_listener",
        "XContentEventListener",
        "XContentEventListener_18ea0ebd"
      ],
      [
        ".content_info",
        "ContentInfo",
        "ContentInfo_98f60aa9"
      ],
      [
        ".x_content",
        "XContent",
        "XContent_79db0975"
      ],
      [
        "..lang.x_event_listener",
        "XEventListener",
        "XEventListener_c7230c4a"
      ],
      [
        "..beans.x_properties_change_listener",
        "XPropertiesChangeListener",
        "XPropertiesChangeListener_7a7d1122"
      ],
      [
        ".x_command_environment",
        "XCommandEnvironment",
        "XCommandEnvironment_fb330dee"
      ],
      [
        ".x_content_identifier",
        "XContentIdentifier",
        "XContentIdentifier_edc90d78"
      ]
    ],
    "extends_map": {
      "com.sun.star.ucb.XCommandProcessor": "XCommandProcessor_dfe80d19"
    },
    "quote": [
      "XContentIdentifier_edc90d78",
      "XInterface_8f010a43",
      "XPropertySetInfoChangeListener_d5261312",
      "XEventListener_c7230c4a",
      "typing.List[str]",
      "XCommandInfoChangeListener_635a1071",
      "XCommandEnvironment_fb330dee",
      "XPropertiesChangeListener_7a7d1122",
      "typing.List[ContentInfo_98f60aa9]",
      "XContent_79db0975",
      "Command_709c0901",
      "ContentInfo_98f60aa9",
      "XContentEventListener_18ea0ebd"
    ],
    "typings": [
      "XContentIdentifier_edc90d78",
      "XInterface_8f010a43",
      "XPropertySetInfoChangeListener_d5261312",
      "XEventListener_c7230c4a",
      "typing.List[str]",
      "XCommandInfoChangeListener_635a1071",
      "XCommandEnvironment_fb330dee",
      "XPropertiesChangeListener_7a7d1122",
      "typing.List[ContentInfo_98f60aa9]",
      "XContent_79db0975",
      "Command_709c0901",
      "ContentInfo_98f60aa9",
      "XContentEventListener_18ea0ebd"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [],
      "typing": [
        "com.sun.star.beans.XPropertySetInfoChangeListener",
        "com.sun.star.ucb.XCommandInfoChangeListener",
        "com.sun.star.ucb.Command",
        "com.sun.star.ucb.XContentEventListener",
        "com.sun.star.ucb.ContentInfo",
        "com.sun.star.ucb.XContent",
        "com.sun.star.lang.XEventListener",
        "com.sun.star.beans.XPropertiesChangeListener",
        "com.sun.star.ucb.XCommandEnvironment",
        "com.sun.star.ucb.XContentIdentifier"
      ]
    },
    "name": "Content",
    "imports": [],
    "namespace": "com.sun.star.ucb",
    "extends": [
      "com.sun.star.ucb.XCommandProcessor"
    ],
    "desc": [
      "A Content is a service that provides access to data of a content provided by an implementation of the service ContentProvider."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1ucb_1_1Content.html",
    "items": {
      "methods": [
        {
          "name": "addCommandInfoChangeListener",
          "returns": "None",
          "desc": [
            "registers a listener for CommandInfoChangeEvents."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XCommandInfoChangeListener_635a1071",
              "in"
            ]
          ]
        },
        {
          "name": "removeCommandInfoChangeListener",
          "returns": "None",
          "desc": [
            "removes a listener for CommandInfoChangeEvents."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XCommandInfoChangeListener_635a1071",
              "in"
            ]
          ]
        },
        {
          "name": "addProperty",
          "returns": "None",
          "desc": [
            "adds a property to the object."
          ],
          "raises": [
            "com.sun.star.beans.PropertyExistException",
            "com.sun.star.beans.IllegalTypeException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "Name",
              "str",
              "in"
            ],
            [
              "Attributes",
              "int",
              "in"
            ],
            [
              "DefaultValue",
              "object",
              "in"
            ]
          ]
        },
        {
          "name": "removeProperty",
          "returns": "None",
          "desc": [
            "removes a property from the object."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.beans.NotRemoveableException"
          ],
          "args": [
            [
              "Name",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "abort",
          "returns": "None",
          "desc": [
            "ends the command associated with the given id.",
            "",
            "Not every command can be aborted. It's up to the implementation to decide whether this method will actually end the processing of the command or simply do nothing."
          ],
          "raises": [],
          "args": [
            [
              "CommandId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "createCommandIdentifier",
          "returns": "int",
          "desc": [
            "creates a unique identifier for a command.",
            "",
            "This identifier can be used to abort the execution of the command associated with that identifier. Note that it is generally not necessary to obtain a new id for each command, because commands are executed synchronously. So the id for a command is valid again after a command previously associated with this id has finished. In fact you only should get one identifier per thread and assign it to every command executed by that thread.",
            "",
            "Also, after a call to XCommandProcessor.abort(), an identifier should not be used any longer (and instead be released by a call to XCommandProcessor2.releaseCommandIdentifier()), because it may well abort all further calls to XCommandProcessor.execute().",
            "",
            "To avoid ever-increasing resource consumption, the identifier should be released via XCommandProcessor2.releaseCommandIdentifier() when it is no longer used."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "execute",
          "returns": "object",
          "desc": [
            "executes a command.",
            "",
            "Common command definitions can be found in the specification of the service Content."
          ],
          "raises": [
            "com.sun.star.uno.Exception",
            "CommandAbortedException"
          ],
          "args": [
            [
              "aCommand",
              "Command_709c0901",
              "in"
            ],
            [
              "CommandId",
              "int",
              "in"
            ],
            [
              "Environment",
              "XCommandEnvironment_fb330dee",
              "in"
            ]
          ]
        },
        {
          "name": "releaseCommandIdentifier",
          "returns": "None",
          "desc": [
            "releases a command identifier obtained through XCommandProcessor.createCommandIdentifier() when it is no longer used.",
            "",
            "After this call the command identifier cannot be used any longer in calls to XCommandProcessor.execute() and XCommandProcessor.abort(). (But it can happen that a call to XCommandProcessor.createCommandIdentifier() reuses this identifier.)"
          ],
          "raises": [],
          "args": [
            [
              "CommandId",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "addEventListener",
          "returns": "None",
          "desc": [
            "adds an event listener to the object.",
            "",
            "The broadcaster fires the disposing method of this listener if the XComponent.dispose() method is called.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed.",
            "",
            "If this XComponent is already disposed when XComponent.addEventListener() is called, the call will not fail with a DisposedException, but the caller will be notified via the XEventListener.disposing() callback. This callback can occur synchronously within the addEventListener() call."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XEventListener_c7230c4a",
              "in"
            ]
          ]
        },
        {
          "name": "dispose",
          "returns": "None",
          "desc": [
            "The owner of an object calls this method to explicitly free all resources kept by this object and thus break cyclic references.",
            "",
            "Only the owner of this object is allowed to call this method. The object should release all resources and references in the easiest possible manner ( for instance no serialization should take place anymore ).",
            "",
            "The object must notify all registered listeners using the method XEventListener.disposing(). All notified objects should release there references to this object without calling XComponent.removeEventListener() (the disposed object will release the listeners eitherway).",
            "",
            "After this method has been called, the object should behave as passive as possible, thus it should ignore all calls in case it can comply with its specification (for instance addEventListener()). Often the object can't fulfill its specification anymore, in this case it must throw the DisposedException (which is derived from com.sun.star.uno.RuntimeException) when it gets called.",
            "",
            "For some objects no real owner can be identified, thus it can be disposed from multiple reference holders. In this case the object should be able to cope with multiple dispose()-calls (which are inevitable in a multithreaded environment)."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "removeEventListener",
          "returns": "None",
          "desc": [
            "removes an event listener from the listener list.",
            "",
            "It is a \\\"noop\\\" if the specified listener is not registered.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed.",
            "",
            "If this XComponent is already disposed when XComponent.removeEventListener() is called, the call will not fail with a DisposedException, but will rather be ignored silently."
          ],
          "raises": [],
          "args": [
            [
              "aListener",
              "XEventListener_c7230c4a",
              "in"
            ]
          ]
        },
        {
          "name": "createNewContent",
          "returns": "XContent_79db0975",
          "desc": [
            "creates a new content of given type."
          ],
          "raises": [],
          "args": [
            [
              "Info",
              "ContentInfo_98f60aa9",
              "in"
            ]
          ]
        },
        {
          "name": "queryCreatableContentsInfo",
          "returns": "typing.List[ContentInfo_98f60aa9]",
          "desc": [
            "returns a list with information about the creatable contents."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "addContentEventListener",
          "returns": "None",
          "desc": [
            "adds a listener for content events."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XContentEventListener_18ea0ebd",
              "in"
            ]
          ]
        },
        {
          "name": "getContentType",
          "returns": "str",
          "desc": [
            "returns a type string, which is unique for that type of content (e.g.",
            "",
            "\\\"application/vnd.sun.star.hierarchy-folder\\\")."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getIdentifier",
          "returns": "XContentIdentifier_edc90d78",
          "desc": [
            "returns the identifier of the content."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "removeContentEventListener",
          "returns": "None",
          "desc": [
            "removes a listener for content events."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XContentEventListener_18ea0ebd",
              "in"
            ]
          ]
        },
        {
          "name": "addPropertySetInfoChangeListener",
          "returns": "None",
          "desc": [
            "registers a listener for PropertySetInfoChangeEvents.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XPropertySetInfoChangeListener_d5261312",
              "in"
            ]
          ]
        },
        {
          "name": "removePropertySetInfoChangeListener",
          "returns": "None",
          "desc": [
            "removes a listener for PropertySetInfoChangeEvents.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "XPropertySetInfoChangeListener_d5261312",
              "in"
            ]
          ]
        },
        {
          "name": "getParent",
          "returns": "XInterface_8f010a43",
          "desc": [
            "grants access to the object containing this content."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setParent",
          "returns": "None",
          "desc": [
            "sets the parent to this object."
          ],
          "raises": [
            "com.sun.star.lang.NoSupportException"
          ],
          "args": [
            [
              "Parent",
              "XInterface_8f010a43",
              "in"
            ]
          ]
        },
        {
          "name": "addPropertiesChangeListener",
          "returns": "None",
          "desc": [
            "adds an XPropertiesChangeListener to the specified properties with the specified names."
          ],
          "raises": [],
          "args": [
            [
              "PropertyNames",
              "typing.List[str]",
              "in"
            ],
            [
              "Listener",
              "XPropertiesChangeListener_7a7d1122",
              "in"
            ]
          ]
        },
        {
          "name": "removePropertiesChangeListener",
          "returns": "None",
          "desc": [
            "removes an XPropertiesChangeListener from the listener list."
          ],
          "raises": [],
          "args": [
            [
              "PropertyNames",
              "typing.List[str]",
              "in"
            ],
            [
              "Listener",
              "XPropertiesChangeListener_7a7d1122",
              "in"
            ]
          ]
        }
      ]
    }
  }
}