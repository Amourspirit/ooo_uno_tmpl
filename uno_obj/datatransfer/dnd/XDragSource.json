{
  "id": "uno-ooo-parser",
  "version": "0.1.17",
  "libre_office_ver": "7.2",
  "name": "XDragSource",
  "type": "interface",
  "namespace": "com.sun.star.datatransfer.dnd",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "...uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..x_transferable",
        "XTransferable",
        "x_transferable_i"
      ],
      [
        ".drag_gesture_event",
        "DragGestureEvent",
        "drag_gesture_event_i"
      ],
      [
        ".x_drag_source_listener",
        "XDragSourceListener",
        "x_drag_source_listener_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "uno_x_interface_i"
    },
    "quote": [
      "drag_gesture_event_i",
      "x_drag_source_listener_i",
      "x_transferable_i"
    ],
    "typings": [],
    "requires_typing": true,
    "name": "XDragSource",
    "imports": [],
    "namespace": "com.sun.star.datatransfer.dnd",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "This interface is implemented by a view or window that supports drag operations and will be received as part of a DragGestureEvent through a com.sun.star.datatransfer.dnd.XDragGestureListener.dragGestureRecognized() callback.",
      "",
      "Differently to Java, the association between view and interface is fixed and can not be changed. Otherwise, the AWT messaging would have to be implemented for any window supporting Drag and Drop operations, which would be a real performance issue."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1datatransfer_1_1dnd_1_1XDragSource.html",
    "items": {
      "methods": [
        {
          "name": "getDefaultCursor",
          "returns": "int",
          "desc": [
            "To get the default cursor for a specified drag action.",
            "",
            "The returned value may be used as parameter for the method com.sun.star.datatransfer.dnd.XDragSourceContext.setCursor()."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "dragAction",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "isDragImageSupported",
          "returns": "bool",
          "desc": [
            "In order to query if drag image support is available."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "startDrag",
          "returns": "None",
          "desc": [
            "Starts the drag operation.",
            "",
            "Note: this call does not block until the drag and drop operation ends. If the Drag and Drop system is unable to initiate a drag operation or if the user attempts to start a drag while an existing drag operation is still executing, the action fails immediately. This is indicated by calling com.sun.star.datatransfer.dnd.XDragSourceListener.dragDropEnd() on the parameter listener with a DragSourceDragEvent showing a failure."
          ],
          "raises": [],
          "args": [
            [
              "trigger",
              "drag_gesture_event_i",
              "in"
            ],
            [
              "sourceActions",
              "int",
              "in"
            ],
            [
              "cursor",
              "int",
              "in"
            ],
            [
              "image",
              "int",
              "in"
            ],
            [
              "trans",
              "x_transferable_i",
              "in"
            ],
            [
              "listener",
              "x_drag_source_listener_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}