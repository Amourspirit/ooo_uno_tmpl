{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "XStorage",
  "type": "interface",
  "namespace": "com.sun.star.embed",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..container.x_name_access",
        "XNameAccess",
        "container_x_name_access_i"
      ],
      [
        "..lang.x_component",
        "XComponent",
        "lang_x_component_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..io.x_stream",
        "XStream",
        "io_x_stream_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.container.XNameAccess": "container_x_name_access_i",
      "com.sun.star.lang.XComponent": "lang_x_component_i"
    },
    "quote": [
      "XStorage",
      "io_x_stream_i"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.container.XNameAccess",
        "com.sun.star.lang.XComponent"
      ],
      "typing": [
        "com.sun.star.io.XStream"
      ]
    },
    "name": "XStorage",
    "imports": [],
    "namespace": "com.sun.star.embed",
    "extends": [
      "com.sun.star.container.XNameAccess",
      "com.sun.star.lang.XComponent"
    ],
    "desc": [
      "This interface represents main storage functionality."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1embed_1_1XStorage.html",
    "items": {
      "methods": [
        {
          "name": "cloneEncryptedStreamElement",
          "returns": "io_x_stream_i",
          "desc": [
            "allows to get readonly copy of a child encrypted stream with password.",
            "",
            "If storage does not allow any encryption this method will always throw com.sun.star.packages.NoEncryptionException.",
            "",
            "The stream is open in readonly mode so the com.sun.star.io.XStream.getOutputStream() method will return an empty reference.",
            "",
            "This method allows to specify reading password for the child stream explicitly."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.packages.NoEncryptionException",
            "com.sun.star.packages.WrongPasswordException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStreamName",
              "str",
              "in"
            ],
            [
              "sPassword",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "cloneStreamElement",
          "returns": "io_x_stream_i",
          "desc": [
            "allows to get readonly copy of a child stream of the storage.",
            "",
            "The stream is open in readonly mode so the com.sun.star.io.XStream.getOutputStream() method will return an empty reference."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.packages.WrongPasswordException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStreamName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "copyElementTo",
          "returns": "None",
          "desc": [
            "allows to copy an entry from one storage to another.",
            "",
            "If target element supports transacted mode it must be committed by this method after successful copying."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.container.ElementExistException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ],
            [
              "xDest",
              "XStorage",
              "in"
            ],
            [
              "sNewName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "copyLastCommitTo",
          "returns": "None",
          "desc": [
            "allows to get copy of this storage at the state of its last commit.",
            "",
            "This method makes sense only for services implementations that allow transaction in the storage."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "xTargetStorage",
              "XStorage",
              "in"
            ]
          ]
        },
        {
          "name": "copyStorageElementLastCommitTo",
          "returns": "None",
          "desc": [
            "allows to get copy of a child storage at the state of its last commit.",
            "",
            "This method makes sense only for services implementations that allow transaction in the storage."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStorName",
              "str",
              "in"
            ],
            [
              "xTargetStorage",
              "XStorage",
              "in"
            ]
          ]
        },
        {
          "name": "copyToStorage",
          "returns": "None",
          "desc": [
            "allows to copy current storage to another one",
            "",
            "The destination storage contents are overwritten. After the successful copying the target storage is automatically committed if it implements transacted access."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "xDest",
              "XStorage",
              "in"
            ]
          ]
        },
        {
          "name": "isStorageElement",
          "returns": "bool",
          "desc": [
            "allows to check if an element is a child storage with specified name.",
            "",
            "In case there is no child element with such name an exception will be thrown."
          ],
          "raises": [
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.embed.InvalidStorageException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "isStreamElement",
          "returns": "bool",
          "desc": [
            "allows to check if an element is a child stream with specified name.",
            "",
            "In case there is no child element with such name an exception will be thrown."
          ],
          "raises": [
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.embed.InvalidStorageException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "moveElementTo",
          "returns": "None",
          "desc": [
            "allows to move an entry from one storage to another.",
            "",
            "If target element supports transacted mode it must be committed by this method after successful moving."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.container.ElementExistException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ],
            [
              "xDest",
              "XStorage",
              "in"
            ],
            [
              "sNewName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "openEncryptedStreamElement",
          "returns": "io_x_stream_i",
          "desc": [
            "allows to get access to a child encrypted stream with password.",
            "",
            "If storage does not allow any encryption this method will always throw com.sun.star.packages.NoEncryptionException.",
            "",
            "In case the stream is open in readonly mode the com.sun.star.io.XStream.getOutputStream() method will return an empty reference."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.packages.NoEncryptionException",
            "com.sun.star.packages.WrongPasswordException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStreamName",
              "str",
              "in"
            ],
            [
              "nOpenMode",
              "int",
              "in"
            ],
            [
              "sPassword",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "openStorageElement",
          "returns": "XStorage",
          "desc": [
            "allows to get access to a child storage.",
            "",
            "The opened substorage must support specified in \\\"nOpenMode\\\" access modes. It can support \\\"read\\\" mode in addition. But any child element can support one of those modes only in case this mode is supported by parent storage."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStorName",
              "str",
              "in"
            ],
            [
              "nOpenMode",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "openStreamElement",
          "returns": "io_x_stream_i",
          "desc": [
            "allows to get access to a child stream of the storage.",
            "",
            "In case the stream is open in readonly mode the com.sun.star.io.XStream.getOutputStream() method will return an empty reference."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.packages.WrongPasswordException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sStreamName",
              "str",
              "in"
            ],
            [
              "nOpenMode",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "removeElement",
          "returns": "None",
          "desc": [
            "removes an element from a storage."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "renameElement",
          "returns": "None",
          "desc": [
            "renames an element in a storage."
          ],
          "raises": [
            "com.sun.star.embed.InvalidStorageException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.container.NoSuchElementException",
            "com.sun.star.container.ElementExistException",
            "com.sun.star.io.IOException",
            "com.sun.star.embed.StorageWrappedTargetException"
          ],
          "args": [
            [
              "sElementName",
              "str",
              "in"
            ],
            [
              "sNewName",
              "str",
              "in"
            ]
          ]
        }
      ]
    }
  }
}