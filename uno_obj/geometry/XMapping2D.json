{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "XMapping2D",
  "type": "interface",
  "namespace": "com.sun.star.geometry",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "from_imports_typing": [
      [
        ".real_point2_d",
        "RealPoint2D",
        "real_point2_d_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "uno_x_interface_i"
    },
    "quote": [
      "real_point2_d_i"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.uno.XInterface"
      ],
      "typing": [
        "com.sun.star.geometry.RealPoint2D"
      ]
    },
    "name": "XMapping2D",
    "imports": [],
    "namespace": "com.sun.star.geometry",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Interface defining an arbitrary bijective mapping from R^2 to R^2.",
      "",
      "This interface provides methods to define an arbitrary bijective mapping from R^2 to R^2, i.e. from the two-dimensional space of real numbers onto itself, as is representable by the double floating point type. The mapping must be bijective, i.e. map a pair of real numbers to exactly one other pair of real numbers and vice versa, to facilitate a working inverse. Bijectiveness also implies completeness, i.e. for every pair of real numbers there must be another pair that is mapped upon them.",
      "",
      "**since**",
      "",
      "    OOo 2.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1geometry_1_1XMapping2D.html",
    "items": {
      "methods": [
        {
          "name": "map",
          "returns": "real_point2_d_i",
          "desc": [
            "Forward 2D mapping function."
          ],
          "raises": [],
          "args": [
            [
              "aPoint",
              "real_point2_d_i",
              "in"
            ]
          ]
        },
        {
          "name": "mapInverse",
          "returns": "real_point2_d_i",
          "desc": [
            "Inverse 2D mapping function.",
            "",
            "The following invariant must hold: map(mapInverse(p))=p. This effectively rules out non-bijective mappings."
          ],
          "raises": [],
          "args": [
            [
              "aPoint",
              "real_point2_d_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}