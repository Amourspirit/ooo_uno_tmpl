{
  "id": "uno-ooo-parser",
  "version": "0.1.12",
  "timestamp": "2022-01-01 23:31:54+00:00",
  "name": "ConfigurationAccess",
  "type": "service",
  "namespace": "com.sun.star.configuration",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        ".access_root_element",
        "AccessRootElement"
      ],
      [
        ".group_element",
        "GroupElement"
      ],
      [
        ".group_access",
        "GroupAccess"
      ],
      [
        ".set_element",
        "SetElement"
      ],
      [
        ".set_access",
        "SetAccess"
      ]
    ],
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "name": "ConfigurationAccess",
    "namespace": "com.sun.star.configuration",
    "extends": [
      "com.sun.star.configuration.AccessRootElement",
      "com.sun.star.configuration.GroupElement",
      "com.sun.star.configuration.GroupAccess",
      "com.sun.star.configuration.SetElement",
      "com.sun.star.configuration.SetAccess"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1configuration_1_1ConfigurationAccess.html",
    "desc": [
      "provides read access to a fragment of the configuration hierarchy.",
      "",
      "Values that are direct or indirect descendants of a root element can be retrieved and, if themselves objects, navigated. Other interfaces provide access to information about this element and its context. Changes to values in the hierarchy can be monitored by event listeners.",
      "",
      "Descendants of this service also implement this service.",
      "",
      "Ultimately the configuration holds values. These values are organized into a hierarchy using structural elements. The structure is defined in advance in a schema. Necessary information from the schema is stored in the configuration repository itself and is accessible through an implementation of this service.",
      "",
      "Two different kinds of structural elements are used in the configuration hierarchy:",
      "",
      "are dynamic containers of homogeneous elements. Which elements a set contains can vary. Their names are defined by the clients that insert them. On the other hand, the type of the elements is the same for all elements. In the case of elements that are themselves hierarchy objects, the type includes the structure of the hierarchy fragment they contain. Such types are defined in the configuration schema as templates.",
      "",
      "Objects in the configuration hierarchy, for example, implementations of this service, can thus be classified in the following ways:",
      "",
      "Several types of simple values can be used in the configuration. In addition to the basic (scalar) types, sequences of the basic types are supported. The basic types are:",
      "",
      "string can hold a human-readable text.",
      "",
      "Values are represented as string.",
      "",
      "Sequences are represented as string[].",
      "",
      "\\\"<em>human-readable</em>\\\" here excludes non-printing characters except for CR, LF and TAB [Unicode code points 9,10,13]. For binary data, use type binary instead.",
      "",
      "boolean can hold the values TRUE or FALSE.",
      "",
      "Values are represented as boolean.",
      "",
      "Sequences are represented as boolean[].",
      "",
      "short can hold a 16-bit signed integer.",
      "",
      "Values are represented as short.",
      "",
      "Sequences are represented as short[].",
      "",
      "int can hold a 32-bit signed integer.",
      "",
      "Values are represented as long.",
      "",
      "Sequences are represented as long[].",
      "",
      "long can hold a 64-bit signed integer.",
      "",
      "Values are represented as hyper.",
      "",
      "Sequences are represented as hyper[].",
      "",
      "double can hold a floating point number.",
      "",
      "Values are represented as double.",
      "",
      "Sequences are represented as double[].",
      "",
      "binary can hold a sequence of octets.",
      "",
      "Values are represented as byte[].",
      "",
      "Sequences are represented as byte[][].",
      "",
      "Within templates an additional type any can occur. When such a template is used to create a new SetElement, the type of the element is initially reported as any (having no value). When the value of such an element is first set, it will assume the type used.",
      "",
      "If the schema marks a value as nullable (which is indicated by attribute com.sun.star.beans.PropertyAttribute.MAYBEVOID ), its contents may be NULL.",
      "",
      "The configuration should support explicit access to default values (implementing com.sun.star.beans.XPropertyState and com.sun.star.beans.XPropertyWithState)."
    ]
  }
}