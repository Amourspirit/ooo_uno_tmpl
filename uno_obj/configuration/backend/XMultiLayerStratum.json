{
  "id": "uno-ooo-parser",
  "version": "0.1.16",
  "libre_office_ver": "7.2",
  "name": "XMultiLayerStratum",
  "type": "interface",
  "namespace": "com.sun.star.configuration.backend",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "...uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_layer",
        "XLayer",
        "x_layer_i"
      ],
      [
        ".x_updatable_layer",
        "XUpdatableLayer",
        "x_updatable_layer_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "uno_x_interface_i"
    },
    "quote": [
      "typing.List[str]",
      "typing.List[x_layer_i]",
      "x_layer_i",
      "x_updatable_layer_i"
    ],
    "typings": [
      "typing.List[str]",
      "typing.List[x_layer_i]"
    ],
    "requires_typing": true,
    "name": "XMultiLayerStratum",
    "imports": [],
    "namespace": "com.sun.star.configuration.backend",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Handles access to a stratum consisting of multiple layers in a single configuration data repository.",
      "",
      "The interface provides access to data for multiple entities and timestamp-checking capabilities for efficient caching.",
      "",
      "**since**",
      "",
      "    OOo 1.1.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1configuration_1_1backend_1_1XMultiLayerStratum.html",
    "items": {
      "methods": [
        {
          "name": "getLayer",
          "returns": "x_layer_i",
          "desc": [
            "retrieves a layer associated to a layer id, if newer than indicated.",
            "",
            "A timestamp can be provided, which is used to indicate a point in time. The layer should be returned only if is modified since that time.",
            "",
            "Layer ids can be obtained from XMultiLayerStratum.listLayerIds() or XMultiLayerStratum.getUpdateLayerId().",
            "",
            "An empty timestamp indicates, that the layer should be retrieved irrespective of its modification time.",
            "",
            "The format and meaning of a timestamp depends on the implementation. Timestamps can be obtained using com.sun.star.util.XTimeStamped.getTimestamp()."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aLayerId",
              "str",
              "in"
            ],
            [
              "aTimestamp",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getLayers",
          "returns": "typing.List[x_layer_i]",
          "desc": [
            "retrieves the layers associated to a series of layer ids, if newer than indicated.",
            "",
            "A timestamp can be provided, which is used to indicate a point in time. Only layers that are modified since that time should be returned. The same timestamp is used for all layers.",
            "",
            "Layer ids can be obtained from XMultiLayerStratum.listLayerIds().",
            "",
            "An empty timestamp indicates, that the layers should be retrieved irrespective of their modification time.",
            "",
            "The format and meaning of a timestamp depends on the implementation. Timestamps can be obtained using com.sun.star.util.XTimeStamped.getTimestamp().",
            "",
            "The list has the same length as aLayerIds. Each layer object is associated to the layer id in the corresponding position.",
            "",
            "For layers that are newer than indicated by the timestamp, the list contains a NULL element."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aLayerIds",
              "typing.List[str]",
              "in"
            ],
            [
              "aTimestamp",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getMultipleLayers",
          "returns": "typing.List[x_layer_i]",
          "desc": [
            "retrieves the layers associated to a series of layer ids, if newer than indicated for each layer.",
            "",
            "For each layer an individual timestamp can be provided, which is used to indicate the last known version of the layer. Only layers that are modified since that time should be returned.",
            "",
            "Layer ids can be obtained from XMultiLayerStratum.listLayerIds().",
            "",
            "This list must have the same length as aLayerIds. Timestamps are matched to layer ids by their position.",
            "",
            "An empty timestamp indicates, that the associated layer should be retrieved irrespective of its modification time.",
            "",
            "The format and meaning of a timestamp depends on the implementation. Timestamps can be obtained using com.sun.star.util.XTimeStamped.getTimestamp().",
            "",
            "The list has the same length as aLayerIds. Each layer object is associated to the layer id in the corresponding position.",
            "",
            "For layers that are newer than indicated by the corresponding timestamp, the list contains a NULL element."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aLayerIds",
              "typing.List[str]",
              "in"
            ],
            [
              "aTimestamps",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "getUpdatableLayer",
          "returns": "x_updatable_layer_i",
          "desc": [
            "retrieves a writable representation of the layer associated to a layer id.",
            "",
            "A layer id for writing can be obtained from XMultiLayerStratum.getUpdateLayerId()."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.NoSupportException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aLayerId",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getUpdateLayerId",
          "returns": "str",
          "desc": [
            "identifies the layer which should be modified to update data of a component on behalf of an entity.",
            "",
            "The layer id returned is one of the layer ids obtained from XMultiLayerStratum.listLayerIds() for the same component and entity."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.NoSupportException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aComponent",
              "str",
              "in"
            ],
            [
              "aEntity",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "listLayerIds",
          "returns": "typing.List[str]",
          "desc": [
            "identifies the layers within this stratum which should be read and merged to determine data of a component for an entity",
            "",
            "The list is ordered by priority. Typically the most general layers (global defaults, entire organization) are first, more specific layers (associated to specific groups or roles) are next and the entity's own data is last."
          ],
          "raises": [
            "BackendAccessException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aComponent",
              "str",
              "in"
            ],
            [
              "aEntity",
              "str",
              "in"
            ]
          ]
        }
      ]
    }
  }
}