{
  "id": "uno-ooo-parser",
  "version": "0.1.5",
  "timestamp": "2021-12-24 00:48:20+00:00",
  "name": "XDatabaseMetaData",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [],
    "name": "XDatabaseMetaData",
    "imports": [],
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "provides comprehensive information about the database as a whole.",
      "",
      "Many of the methods here return lists of information in the form of com.sun.star.sdbc.XResultSet objects. You can use the normal com.sun.star.sdbc.XRow (or com.sun.star.sdb.XColumn) methods such as com.sun.star.sdbc.XRow.getString() and com.sun.star.sdbc.XRow.getInt() to retrieve the data from these XResultSets. If a given form of metadata is not available, these methods should throw a com.sun.star.sdbc.SQLException. After calling one of the getXXX() methods, one can check whether that value is NULL with the method com.sun.star.sdbc.XRow.wasNull(). In the text only \\\"(may be `NULL`)\\\" is mentioned for this case.",
      "",
      "Some of these methods take arguments that are String patterns. These arguments all have names such as fooPattern. Within a pattern String, \\\"%\\\" means match any substring of 0 or more characters, and \\\"_\\\" means match any one character. Only metadata entries matching the search pattern are returned. If a search pattern argument is set to VOID, that argument's criteria will be dropped from the search.",
      "",
      "A com.sun.star.sdbc.SQLException will be thrown if a driver does not support a metadata method. In the case of methods that return an XResultSet, either an XResultSet (which may be empty) is returned or a SQLException is thrown."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XDatabaseMetaData.html",
    "items": {
      "methods": [
        {
          "name": "allProceduresAreCallable",
          "returns": "bool",
          "desc": [
            "Can all the procedures returned by getProcedures be called by the current user?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "allTablesAreSelectable",
          "returns": "bool",
          "desc": [
            "Can all the tables returned by getTable be SELECTed by the current user?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "dataDefinitionCausesTransactionCommit",
          "returns": "bool",
          "desc": [
            "does a data definition statement within a transaction force the transaction to commit?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "dataDefinitionIgnoredInTransactions",
          "returns": "bool",
          "desc": [
            "is a data definition statement within a transaction ignored?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "deletesAreDetected",
          "returns": "bool",
          "desc": [
            "indicates whether or not a visible row delete can be detected by calling com.sun.star.sdbc.XResultSet.rowDeleted().",
            "",
            "If deletesAreDetected() returns FALSE, then deleted rows are removed from the result set."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "doesMaxRowSizeIncludeBlobs",
          "returns": "bool",
          "desc": [
            "Did getMaxRowSize() include LONGVARCHAR and LONGVARBINARY blobs?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getBestRowIdentifier",
          "returns": "object",
          "desc": [
            "gets a description of a table's optimal set of columns that uniquely identifies a row.",
            "",
            "They are ordered by SCOPE.",
            "",
            "Each column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getCatalogSeparator",
          "returns": "str",
          "desc": [
            "return the separator between catalog and table name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getCatalogTerm",
          "returns": "str",
          "desc": [
            "return the database vendor's preferred term for \\\"catalog\\\""
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getCatalogs",
          "returns": "object",
          "desc": [
            "gets the catalog names available in this database.",
            "",
            "The results are ordered by catalog name.",
            "",
            "The catalog column is:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getColumnPrivileges",
          "returns": "object",
          "desc": [
            "gets a description of the access rights for a table's columns.",
            "",
            "Only privileges matching the column name criteria are returned. They are ordered by COLUMN_NAME and PRIVILEGE.",
            "",
            "Each privilege description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getColumns",
          "returns": "object",
          "desc": [
            "gets a description of table columns available in the specified catalog.",
            "",
            "Only column descriptions matching the catalog, schema, table and column name criteria are returned. They are ordered by TABLE_SCHEM, TABLE_NAME, and ORDINAL_POSITION.",
            "",
            "Each column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getConnection",
          "returns": "object",
          "desc": [
            "retrieves the connection that produced this metadata object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getCrossReference",
          "returns": "object",
          "desc": [
            "gets a description of the foreign key columns in the foreign key table that reference the primary key columns of the primary key table (describe how one table imports another's key.) This should normally return a single foreign key/primary key pair (most tables only import a foreign key from a table once.).",
            "",
            "They are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ.",
            "",
            "Each foreign key column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getDatabaseProductName",
          "returns": "str",
          "desc": [
            "returns the name of the database product."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getDatabaseProductVersion",
          "returns": "str",
          "desc": [
            "returns the version of the database product."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getDefaultTransactionIsolation",
          "returns": "int",
          "desc": [
            "return the database default transaction isolation level.",
            "",
            "The values are defined in com.sun.star.sdbc.TransactionIsolation."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getDriverMajorVersion",
          "returns": "int",
          "desc": [
            "returns the SDBC driver major version number."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getDriverMinorVersion",
          "returns": "int",
          "desc": [
            "returns the SDBC driver minor version number."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getDriverName",
          "returns": "str",
          "desc": [
            "returns the name of the SDBC driver."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getDriverVersion",
          "returns": "str",
          "desc": [
            "returns the version number of the SDBC driver."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getExportedKeys",
          "returns": "object",
          "desc": [
            "gets a description of the foreign key columns that reference a table's primary key columns (the foreign keys exported by a table).",
            "",
            "They are ordered by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, and KEY_SEQ.",
            "",
            "Each foreign key column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getExtraNameCharacters",
          "returns": "str",
          "desc": [
            "gets all the \\\"extra\\\" characters that can be used in unquoted identifier names (those beyond a-z, A-Z, 0-9 and _)."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getIdentifierQuoteString",
          "returns": "str",
          "desc": [
            "What's the string used to quote SQL identifiers? This returns a space \\\" \\\" if identifier quoting is not supported."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getImportedKeys",
          "returns": "object",
          "desc": [
            "gets a description of the primary key columns that are referenced by a table's foreign key columns (the primary keys imported by a table).",
            "",
            "They are ordered by PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, and KEY_SEQ.",
            "",
            "Each primary key column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getIndexInfo",
          "returns": "object",
          "desc": [
            "gets a description of a table's indices and statistics.",
            "",
            "They are ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION.",
            "",
            "Each index column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxBinaryLiteralLength",
          "returns": "int",
          "desc": [
            "return the maximal number of hex characters in an inline binary literal"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxCatalogNameLength",
          "returns": "int",
          "desc": [
            "return the maximum length of a catalog name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxCharLiteralLength",
          "returns": "int",
          "desc": [
            "return the max length for a character literal"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnNameLength",
          "returns": "int",
          "desc": [
            "return the limit on column name length"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnsInGroupBy",
          "returns": "int",
          "desc": [
            "return the maximum number of columns in a \\\"GROUP BY\\\" clause"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnsInIndex",
          "returns": "int",
          "desc": [
            "return the maximum number of columns allowed in an index"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnsInOrderBy",
          "returns": "int",
          "desc": [
            "return the maximum number of columns in an \\\"ORDER BY\\\" clause"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnsInSelect",
          "returns": "int",
          "desc": [
            "return the maximum number of columns in a \\\"SELECT\\\" list"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxColumnsInTable",
          "returns": "int",
          "desc": [
            "return the maximum number of columns in a table"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxConnections",
          "returns": "int",
          "desc": [
            "return the number of active connections at a time to this database."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxCursorNameLength",
          "returns": "int",
          "desc": [
            "return the maximum cursor name length"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxIndexLength",
          "returns": "int",
          "desc": [
            "return the maximum length of an index (in bytes)"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxProcedureNameLength",
          "returns": "int",
          "desc": [
            "return the maximum length of a procedure name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxRowSize",
          "returns": "int",
          "desc": [
            "return the maximum length of a single row."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxSchemaNameLength",
          "returns": "int",
          "desc": [
            "return the maximum length allowed for a schema name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxStatementLength",
          "returns": "int",
          "desc": [
            "return the maximum length of a SQL statement"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxStatements",
          "returns": "int",
          "desc": [
            "return the maximal number of open active statements at one time to this database"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxTableNameLength",
          "returns": "int",
          "desc": [
            "return the maximum length of a table name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxTablesInSelect",
          "returns": "int",
          "desc": [
            "return the maximum number of tables in a SELECT statement"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getMaxUserNameLength",
          "returns": "int",
          "desc": [
            "return the maximum length of a user name"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getNumericFunctions",
          "returns": "str",
          "desc": [
            "gets a comma-separated list of math functions.",
            "",
            "These are the X/Open CLI math function names used in the SDBC function escape clause."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getPrimaryKeys",
          "returns": "object",
          "desc": [
            "gets a description of a table's primary key columns.",
            "",
            "They are ordered by COLUMN_NAME.",
            "",
            "Each primary key column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getProcedureColumns",
          "returns": "object",
          "desc": [
            "gets a description of a catalog's stored procedure parameters and result columns.",
            "",
            "Only descriptions matching the schema, procedure and parameter name criteria are returned. They are ordered by PROCEDURE_SCHEM and PROCEDURE_NAME. Within this, the return value, if any, is first. Next are the parameter descriptions in call order. The column descriptions follow in column number order.",
            "",
            "Each row in the XResultSet is a parameter description or column description with the following fields:",
            "",
            "Note: Some databases may not return the column descriptions for a procedure. Additional columns beyond REMARKS can be defined by the database."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getProcedureTerm",
          "returns": "str",
          "desc": [
            "return the database vendor's preferred term for \\\"procedure\\\""
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getProcedures",
          "returns": "object",
          "desc": [
            "Gets a description of the stored procedures available in a catalog.",
            "",
            "Only procedure descriptions matching the schema and procedure name criteria are returned. They are ordered by PROCEDURE_SCHEM, and PROCEDURE_NAME.",
            "",
            "Each procedure description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getSQLKeywords",
          "returns": "str",
          "desc": [
            "gets a comma-separated list of all a database's SQL keywords that are NOT also SQL92 keywords."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getSchemaTerm",
          "returns": "str",
          "desc": [
            "return the database vendor's preferred term for \\\"schema\\\""
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getSchemas",
          "returns": "object",
          "desc": [
            "Gets the schema names available in this database.",
            "",
            "The results are ordered by schema name.",
            "",
            "The schema column is:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getSearchStringEscape",
          "returns": "str",
          "desc": [
            "gets the string that can be used to escape wildcard characters.",
            "",
            "This is the string that can be used to escape \\\"_\\\" or \\\"%\\\" in the string pattern style catalog search parameters.",
            "",
            "The \\\"_\\\" character represents any single character.",
            "",
            "The \\\"%\\\" character represents any sequence of zero or more characters."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getStringFunctions",
          "returns": "str",
          "desc": [
            "gets a comma-separated list of string functions.",
            "",
            "These are the X/Open CLI string function names used in the SDBC function escape clause."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getSystemFunctions",
          "returns": "str",
          "desc": [
            "gets a comma-separated list of system functions.",
            "",
            "These are the X/Open CLI system function names used in the SDBC function escape clause."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTablePrivileges",
          "returns": "object",
          "desc": [
            "gets a description of the access rights for each table available in a catalog.",
            "",
            "Note that a table privilege applies to one or more columns in the table. It would be wrong to assume that this privilege applies to all columns (this may be TRUE for some systems but is not TRUE for all.)",
            "",
            "Only privileges matching the schema and table name criteria are returned. They are ordered by TABLE_SCHEM, TABLE_NAME, and PRIVILEGE.",
            "",
            "Each privilege description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTableTypes",
          "returns": "object",
          "desc": [
            "gets the table types available in this database.",
            "",
            "The results are ordered by table type.",
            "",
            "The table type is:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTables",
          "returns": "object",
          "desc": [
            "gets a description of tables available in a catalog.",
            "",
            "Only table descriptions matching the catalog, schema, table name, and type criteria are returned. They are ordered by TABLE_TYPE, TABLE_SCHEM, and TABLE_NAME.",
            "",
            "Each table description has the following columns:",
            "",
            "Note: Some databases may not return information for all tables."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTimeDateFunctions",
          "returns": "str",
          "desc": [
            "gets a comma-separated list of time and date functions."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getTypeInfo",
          "returns": "object",
          "desc": [
            "gets a description of all the standard SQL types supported by this database.",
            "",
            "They are ordered by DATA_TYPE and then by how closely the data type maps to the corresponding SDBC SQL type.",
            "",
            "Each type description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getUDTs",
          "returns": "object",
          "desc": [
            "Gets a description of the user-defined types defined in a particular schema.",
            "",
            "Schema-specific UDTs may have type OBJECT, STRUCT, or DISTINCT.",
            "",
            "Only types matching the catalog, schema, type name, and type criteria are returned. They are ordered by DATA_TYPE, TYPE_SCHEM, and TYPE_NAME. The type name parameter may be a fully-qualified name. In this case, the catalog and schemaPattern parameters are ignored.",
            "",
            "Each type description has the following columns:",
            "",
            "Note: If the driver does not support UDTs, an empty result set is returned."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getURL",
          "returns": "str",
          "desc": [
            "returns the URL for the database connection"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getUserName",
          "returns": "str",
          "desc": [
            "returns the user name from this database connection."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getVersionColumns",
          "returns": "object",
          "desc": [
            "gets a description of a table's columns that are automatically updated when any value in a row is updated.",
            "",
            "They are unordered.",
            "",
            "Each column description has the following columns:"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "insertsAreDetected",
          "returns": "bool",
          "desc": [
            "indicates whether or not a visible row insert can be detected by calling com.sun.star.sdbc.XResultSet.rowInserted().",
            "",
            "()"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "isCatalogAtStart",
          "returns": "bool",
          "desc": [
            "Does a catalog appear at the start of a qualified table name? (Otherwise it appears at the end)"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "isReadOnly",
          "returns": "bool",
          "desc": [
            "checks if the database in read-only mode."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nullPlusNonNullIsNull",
          "returns": "bool",
          "desc": [
            "are concatenations between NULL and non-NULL values NULL?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nullsAreSortedAtEnd",
          "returns": "bool",
          "desc": [
            "Are NULL values sorted at the end, regardless of sort order?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nullsAreSortedAtStart",
          "returns": "bool",
          "desc": [
            "Are NULL values sorted at the start regardless of sort order?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nullsAreSortedHigh",
          "returns": "bool",
          "desc": [
            "Are NULL values sorted high?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "nullsAreSortedLow",
          "returns": "bool",
          "desc": [
            "Are NULL values sorted low?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "othersDeletesAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether deletes made by others are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "othersInsertsAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether inserts made by others are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "othersUpdatesAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether updates made by others are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "ownDeletesAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether a result set's own deletes are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "ownInsertsAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether a result set's own inserts are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "ownUpdatesAreVisible",
          "returns": "bool",
          "desc": [
            "indicates whether a result set's own updates are visible."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesLowerCaseIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case unquoted SQL identifiers as case insensitive and store them in lower case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesLowerCaseQuotedIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case quoted SQL identifiers as case insensitive and store them in lower case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesMixedCaseIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case unquoted SQL identifiers as case insensitive and store them in mixed case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesMixedCaseQuotedIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case quoted SQL identifiers as case insensitive and store them in mixed case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesUpperCaseIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case unquoted SQL identifiers as case insensitive and store them in upper case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "storesUpperCaseQuotedIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case quoted SQL identifiers as case insensitive and store them in upper case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsANSI92EntryLevelSQL",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsANSI92FullSQL",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsANSI92IntermediateSQL",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsAlterTableWithAddColumn",
          "returns": "bool",
          "desc": [
            "support the Database \\\"ALTER TABLE\\\" with add column?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsAlterTableWithDropColumn",
          "returns": "bool",
          "desc": [
            "support the Database \\\"ALTER TABLE\\\" with drop column?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsBatchUpdates",
          "returns": "bool",
          "desc": [
            "indicates whether the driver supports batch updates."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCatalogsInDataManipulation",
          "returns": "bool",
          "desc": [
            "Can a catalog name be used in a data manipulation statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCatalogsInIndexDefinitions",
          "returns": "bool",
          "desc": [
            "Can a catalog name be used in an index definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCatalogsInPrivilegeDefinitions",
          "returns": "bool",
          "desc": [
            "Can a catalog name be used in a privilege definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCatalogsInProcedureCalls",
          "returns": "bool",
          "desc": [
            "Can a catalog name be used in a procedure call statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCatalogsInTableDefinitions",
          "returns": "bool",
          "desc": [
            "Can a catalog name be used in a table definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsColumnAliasing",
          "returns": "bool",
          "desc": [
            "support the Database column aliasing?",
            "",
            "The SQL AS clause can be used to provide names for computed columns or to provide alias names for columns as required."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsConvert",
          "returns": "bool",
          "desc": [
            "TRUE , if the Database supports the CONVERT between the given SQL types otherwise FALSE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCoreSQLGrammar",
          "returns": "bool",
          "desc": [
            "TRUE, if the database supports ODBC Core SQL grammar, otherwise FALSE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsCorrelatedSubqueries",
          "returns": "bool",
          "desc": [
            "Are correlated subqueries supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsDataDefinitionAndDataManipulationTransactions",
          "returns": "bool",
          "desc": [
            "support the Database both data definition and data manipulation statements within a transaction?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsDataManipulationTransactionsOnly",
          "returns": "bool",
          "desc": [
            "are only data manipulation statements within a transaction supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsDifferentTableCorrelationNames",
          "returns": "bool",
          "desc": [
            "If table correlation names are supported, are they restricted to be different from the names of the tables?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsExpressionsInOrderBy",
          "returns": "bool",
          "desc": [
            "Are expressions in \\\"ORDER BY\\\" lists supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsExtendedSQLGrammar",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsFullOuterJoins",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsGroupBy",
          "returns": "bool",
          "desc": [
            "Is some form of \\\"GROUP BY\\\" clause supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsGroupByBeyondSelect",
          "returns": "bool",
          "desc": [
            "Can a \\\"GROUP BY\\\" clause add columns not in the SELECT provided it specifies all the columns in the SELECT?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsGroupByUnrelated",
          "returns": "bool",
          "desc": [
            "Can a \\\"GROUP BY\\\" clause use columns not in the SELECT?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsIntegrityEnhancementFacility",
          "returns": "bool",
          "desc": [
            "returns TRUE, if the Database supports SQL Integrity Enhancement Facility, otherwise FALSE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsLikeEscapeClause",
          "returns": "bool",
          "desc": [
            "Is the escape character in \\\"LIKE\\\" clauses supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsLimitedOuterJoins",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsMinimumSQLGrammar",
          "returns": "bool",
          "desc": [
            "TRUE, if the database supports ODBC Minimum SQL grammar, otherwise FALSE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsMixedCaseIdentifiers",
          "returns": "bool",
          "desc": [
            "use the database \\\"mixed case unquoted SQL identifiers\\\" case sensitive."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsMixedCaseQuotedIdentifiers",
          "returns": "bool",
          "desc": [
            "Does the database treat mixed case quoted SQL identifiers as case sensitive and as a result store them in mixed case?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsMultipleResultSets",
          "returns": "bool",
          "desc": [
            "Are multiple XResultSets from a single execute supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsMultipleTransactions",
          "returns": "bool",
          "desc": [
            "Can we have multiple transactions open at once (on different connections)?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsNonNullableColumns",
          "returns": "bool",
          "desc": [
            "Can columns be defined as non-nullable?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOpenCursorsAcrossCommit",
          "returns": "bool",
          "desc": [
            "Can cursors remain open across commits?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOpenCursorsAcrossRollback",
          "returns": "bool",
          "desc": [
            "Can cursors remain open across rollbacks?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOpenStatementsAcrossCommit",
          "returns": "bool",
          "desc": [
            "Can statements remain open across commits?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOpenStatementsAcrossRollback",
          "returns": "bool",
          "desc": [
            "Can statements remain open across rollbacks?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOrderByUnrelated",
          "returns": "bool",
          "desc": [
            "Can an \\\"ORDER BY\\\" clause use columns not in the SELECT statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsOuterJoins",
          "returns": "bool",
          "desc": [],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsPositionedDelete",
          "returns": "bool",
          "desc": [
            "Is positioned DELETE supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsPositionedUpdate",
          "returns": "bool",
          "desc": [
            "Is positioned UPDATE supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsResultSetConcurrency",
          "returns": "bool",
          "desc": [
            "Does the database support the concurrency type in combination with the given result set type?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsResultSetType",
          "returns": "bool",
          "desc": [
            "Does the database support the given result set type?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSchemasInDataManipulation",
          "returns": "bool",
          "desc": [
            "Can a schema name be used in a data manipulation statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSchemasInIndexDefinitions",
          "returns": "bool",
          "desc": [
            "Can a schema name be used in an index definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSchemasInPrivilegeDefinitions",
          "returns": "bool",
          "desc": [
            "Can a schema name be used in a privilege definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSchemasInProcedureCalls",
          "returns": "bool",
          "desc": [
            "Can a schema name be used in a procedure call statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSchemasInTableDefinitions",
          "returns": "bool",
          "desc": [
            "Can a schema name be used in a table definition statement?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSelectForUpdate",
          "returns": "bool",
          "desc": [
            "Is SELECT for UPDATE supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsStoredProcedures",
          "returns": "bool",
          "desc": [
            "Are stored procedure calls using the stored procedure escape syntax supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSubqueriesInComparisons",
          "returns": "bool",
          "desc": [
            "Are subqueries in comparison expressions supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSubqueriesInExists",
          "returns": "bool",
          "desc": [
            "Are subqueries in \\\"exists\\\" expressions supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSubqueriesInIns",
          "returns": "bool",
          "desc": [
            "Are subqueries in \\\"in\\\" statements supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsSubqueriesInQuantifieds",
          "returns": "bool",
          "desc": [
            "Are subqueries in quantified expressions supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsTableCorrelationNames",
          "returns": "bool",
          "desc": [
            "Are table correlation names supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsTransactionIsolationLevel",
          "returns": "bool",
          "desc": [
            "Does this database support the given transaction isolation level?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsTransactions",
          "returns": "bool",
          "desc": [
            "support the Database transactions? If not, invoking the method com.sun.star.sdbc.XConnection.commit() is a noop and the isolation level is TransactionIsolation_NONE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsTypeConversion",
          "returns": "bool",
          "desc": [
            "TRUE , if the Database supports the CONVERT function between SQL types, otherwise FALSE."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsUnion",
          "returns": "bool",
          "desc": [
            "Is SQL UNION supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "supportsUnionAll",
          "returns": "bool",
          "desc": [
            "Is SQL UNION ALL supported?"
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "updatesAreDetected",
          "returns": "bool",
          "desc": [
            "indicates whether or not a visible row update can be detected by calling the method XResultSet.rowUpdated."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "usesLocalFilePerTable",
          "returns": "bool",
          "desc": [
            "use the database one local file to save for each table."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "usesLocalFiles",
          "returns": "bool",
          "desc": [
            "use the database local files to save the tables."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        }
      ]
    }
  }
}