{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "PreparedStatement",
  "type": "service",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..beans.x_property_set",
        "XPropertySet",
        "XPropertySet_bc180bfa"
      ],
      [
        "..lang.x_component",
        "XComponent",
        "XComponent_98dc0ab5"
      ],
      [
        ".x_closeable",
        "XCloseable",
        "XCloseable_98290a86"
      ],
      [
        ".x_multiple_results",
        "XMultipleResults",
        "XMultipleResults_e1b50d3a"
      ],
      [
        ".x_parameters",
        "XParameters",
        "XParameters_a36c0b10"
      ],
      [
        ".x_prepared_batch_execution",
        "XPreparedBatchExecution",
        "XPreparedBatchExecution_44d80fc5"
      ],
      [
        ".x_prepared_statement",
        "XPreparedStatement",
        "XPreparedStatement_fbc80de4"
      ],
      [
        ".x_result_set_meta_data_supplier",
        "XResultSetMetaDataSupplier",
        "XResultSetMetaDataSupplier_777010fc"
      ],
      [
        ".x_warnings_supplier",
        "XWarningsSupplier",
        "XWarningsSupplier_ef210d99"
      ],
      [
        "..util.x_cancellable",
        "XCancellable",
        "XCancellable_afc30b64"
      ]
    ],
    "from_imports_typing": [],
    "extends_map": {
      "com.sun.star.beans.XPropertySet": "XPropertySet_bc180bfa",
      "com.sun.star.lang.XComponent": "XComponent_98dc0ab5",
      "com.sun.star.sdbc.XCloseable": "XCloseable_98290a86",
      "com.sun.star.sdbc.XMultipleResults": "XMultipleResults_e1b50d3a",
      "com.sun.star.sdbc.XParameters": "XParameters_a36c0b10",
      "com.sun.star.sdbc.XPreparedBatchExecution": "XPreparedBatchExecution_44d80fc5",
      "com.sun.star.sdbc.XPreparedStatement": "XPreparedStatement_fbc80de4",
      "com.sun.star.sdbc.XResultSetMetaDataSupplier": "XResultSetMetaDataSupplier_777010fc",
      "com.sun.star.sdbc.XWarningsSupplier": "XWarningsSupplier_ef210d99",
      "com.sun.star.util.XCancellable": "XCancellable_afc30b64"
    },
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "full_imports": {
      "general": [
        "com.sun.star.beans.XPropertySet",
        "com.sun.star.lang.XComponent",
        "com.sun.star.sdbc.XCloseable",
        "com.sun.star.sdbc.XMultipleResults",
        "com.sun.star.sdbc.XParameters",
        "com.sun.star.sdbc.XPreparedBatchExecution",
        "com.sun.star.sdbc.XPreparedStatement",
        "com.sun.star.sdbc.XResultSetMetaDataSupplier",
        "com.sun.star.sdbc.XWarningsSupplier",
        "com.sun.star.util.XCancellable"
      ],
      "typing": []
    },
    "name": "PreparedStatement",
    "imports": [],
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.lang.XComponent",
      "com.sun.star.sdbc.XCloseable",
      "com.sun.star.beans.XPropertySet",
      "com.sun.star.util.XCancellable",
      "com.sun.star.sdbc.XPreparedStatement",
      "com.sun.star.sdbc.XResultSetMetaDataSupplier",
      "com.sun.star.sdbc.XParameters",
      "com.sun.star.sdbc.XPreparedBatchExecution",
      "com.sun.star.sdbc.XWarningsSupplier",
      "com.sun.star.sdbc.XMultipleResults"
    ],
    "desc": [
      "represents a precompiled SQL statement.",
      "",
      "A SQL statement is pre-compiled and stored in a PreparedStatement object. This object can then be used to efficiently execute this statement multiple times.",
      "",
      "Note:  The setXXX methods for setting IN parameter values must specify types that are compatible with the defined SQL type of the input parameter. For instance, if the IN parameter has SQL type Integer, then the method com.sun.star.sdbc.XParameters.setInt() should be used.",
      "",
      "If arbitrary parameter type conversions are required, the method com.sun.star.sdbc.XParameters.setObject() should be used with a target SQL type.",
      "",
      "Example of setting a parameter; con is an active connection.",
      "",
      "Only one com.sun.star.sdbc.ResultSet per com.sun.star.sdbc.Statement can be open at any point in time. Therefore, if the reading of one ResultSet is interleaved with the reading of another, each must have been generated by different Statements. All statement execute methods implicitly close a statement's current ResultSet if an open one exists."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1sdbc_1_1PreparedStatement.html",
    "items": {
      "properties": [
        {
          "name": "CursorName",
          "returns": "str",
          "desc": [
            "defines the SQL cursor name that will be used by subsequent Statement execute methods.",
            "",
            "This name can then be used in SQL positioned update/delete statements to identify the current row in the ResultSet generated by this statement. If the database does not support positioned update/delete, this property is a noop. To ensure that a cursor has the proper isolation level to support updates, the cursor's SELECT statement should be of the form \\\"select for update ...\\\". If the \\\"for update\\\" phrase is omitted, positioned updates may fail.",
            "",
            "Note:  By definition, positioned update/delete execution must be done by a different Statement than the one which generated the ResultSet being used for positioning. Also, cursor names must be unique within a connection."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "FetchDirection",
          "returns": "int",
          "desc": [
            "retrieves the direction for fetching rows from database tables that is the default for result sets generated from this Statement object.",
            "",
            "If this Statement object has not set a fetch direction, the return value is implementation-specific."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "FetchSize",
          "returns": "int",
          "desc": [
            "retrieves the number of result set rows that is the default fetch size for result sets generated from this Statement object.",
            "",
            "If this Statement object has not set a fetch size, the return value is implementation-specific."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "MaxFieldSize",
          "returns": "int",
          "desc": [
            "returns the maximum number of bytes allowed for any column value.",
            "",
            "This limit is the maximum number of bytes that can be returned for any column value. The limit applies only to com.sun.star.sdbc.DataType.BINARY , com.sun.star.sdbc.DataType.VARBINARY , com.sun.star.sdbc.DataType.LONGVARBINARY , com.sun.star.sdbc.DataType.CHAR , com.sun.star.sdbc.DataType.VARCHAR , and com.sun.star.sdbc.DataType.LONGVARCHAR columns. If the limit is exceeded, the excess data is silently discarded.",
            "",
            "There is no limitation, if set to zero."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "MaxRows",
          "returns": "int",
          "desc": [
            "retrieves the maximum number of rows that a ResultSet can contain.",
            "",
            "If the limit is exceeded, the excess rows are silently dropped.",
            "There is no limitation, if set to zero."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "QueryTimeOut",
          "returns": "int",
          "desc": [
            "retrieves the number of seconds the driver will wait for a Statement to execute.",
            "",
            "If the limit is exceeded, a SQLException is thrown. There is no limitation, if set to zero."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ResultSetConcurrency",
          "returns": "int",
          "desc": [
            "retrieves the result set concurrency."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ResultSetType",
          "returns": "int",
          "desc": [
            "Determine the result set type."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}