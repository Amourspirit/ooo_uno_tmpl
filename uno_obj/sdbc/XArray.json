{
  "id": "uno-ooo-parser",
  "version": "0.1.16",
  "libre_office_ver": "7.2",
  "name": "XArray",
  "type": "interface",
  "namespace": "com.sun.star.sdbc",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface",
        "uno_x_interface_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..container.x_name_access",
        "XNameAccess",
        "container_x_name_access_i"
      ],
      [
        ".x_result_set",
        "XResultSet",
        "x_result_set_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.uno.XInterface": "uno_x_interface_i"
    },
    "quote": [
      "container_x_name_access_i",
      "typing.List[object]",
      "x_result_set_i"
    ],
    "typings": [
      "typing.List[object]"
    ],
    "requires_typing": true,
    "name": "XArray",
    "imports": [],
    "namespace": "com.sun.star.sdbc",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "is used for mapping the SQL type com.sun.star.sdbc.DataType.ARRAY.",
      "",
      "By default, an Array is a transaction duration reference to an SQL array. By default, an Array is implemented using a SQL LOCATOR(array) internally."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdbc_1_1XArray.html",
    "items": {
      "methods": [
        {
          "name": "getArray",
          "returns": "typing.List[object]",
          "desc": [
            "retrieves the contents of the SQL array designated by this Array object, using the specified typeMap for type map customizations.",
            "",
            "If the base type of the array does not match a user-defined type in typeMap , the standard mapping is used instead."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "typeMap",
              "container_x_name_access_i",
              "in"
            ]
          ]
        },
        {
          "name": "getArrayAtIndex",
          "returns": "typing.List[object]",
          "desc": [
            "returns an array containing a slice of the SQL array, beginning with the specified index and containing up to count successive elements of the SQL array."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "index",
              "int",
              "in"
            ],
            [
              "count",
              "int",
              "in"
            ],
            [
              "typeMap",
              "container_x_name_access_i",
              "in"
            ]
          ]
        },
        {
          "name": "getBaseType",
          "returns": "int",
          "desc": [
            "returns the SDBC type of the elements in the array designated by this Array object."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getBaseTypeName",
          "returns": "str",
          "desc": [
            "returns the SQL type name of the elements in the array designated by this Array object.",
            "",
            "If the elements are a built-in type, it returns the database-specific type name of the elements. If the elements are a user-defined type (UDT), this method returns the fully-qualified SQL type name."
          ],
          "raises": [
            "SQLException"
          ],
          "args": []
        },
        {
          "name": "getResultSet",
          "returns": "x_result_set_i",
          "desc": [
            "returns a result set that contains the elements of the array designated by this Array object and uses the given typeMap to map the array elements.",
            "",
            "If the base type of the array does not match a user-defined type in typeMap or the typeMap is NULL , the connection type mapping is used instead.",
            "",
            "The result set contains one row for each array element, with two columns in each row. The second column stores the element value; the first column stores the index into the array for that element (with the first array element being at index 1). The rows are in ascending order corresponding to the order of the indices."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "typeMap",
              "container_x_name_access_i",
              "in"
            ]
          ]
        },
        {
          "name": "getResultSetAtIndex",
          "returns": "x_result_set_i",
          "desc": [
            "returns a result set holding the elements of the subarray that starts at index index and contains up to count successive elements.",
            "",
            "This method uses the given typeMap to map the array elements. If the base type of the array does not match a user-defined type in typeMap or the typeMap is NULL , the connection type mapping is used instead.",
            "",
            "The result set contains one row for each array element, with two columns in each row. The second column stores the element value; the first column stores the index into the array for that element (with the first array element being at index 1). The rows are in ascending order corresponding to the order of the indices."
          ],
          "raises": [
            "SQLException"
          ],
          "args": [
            [
              "index",
              "int",
              "in"
            ],
            [
              "count",
              "int",
              "in"
            ],
            [
              "typeMap",
              "container_x_name_access_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}