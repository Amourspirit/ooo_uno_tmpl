{
  "id": "uno-ooo-parser",
  "version": "0.1.10",
  "timestamp": "2022-01-01 16:42:58+00:00",
  "name": "XSlideShow",
  "type": "interface",
  "namespace": "com.sun.star.presentation",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        "..drawing.x_draw_page",
        "XDrawPage"
      ],
      [
        ".x_slide_show_view",
        "XSlideShowView"
      ],
      [
        "..lang.x_multi_service_factory",
        "XMultiServiceFactory"
      ],
      [
        ".x_slide_show_listener",
        "XSlideShowListener"
      ],
      [
        "..animations.x_animation_node",
        "XAnimationNode"
      ],
      [
        "..drawing.x_shape",
        "XShape"
      ],
      [
        ".x_shape_event_listener",
        "XShapeEventListener"
      ],
      [
        "..beans.property_value",
        "PropertyValue"
      ],
      [
        "..drawing.x_draw_pages_supplier",
        "XDrawPagesSupplier"
      ]
    ],
    "quote": [
      "XSlideShowView",
      "PropertyValue",
      "XMultiServiceFactory",
      "typing.List[PropertyValue]",
      "XShape",
      "XSlideShowListener",
      "XShapeEventListener",
      "XAnimationNode",
      "XDrawPage",
      "XDrawPagesSupplier"
    ],
    "typings": [
      "typing.List[PropertyValue]"
    ],
    "requires_typing": true,
    "name": "XSlideShow",
    "imports": [],
    "namespace": "com.sun.star.presentation",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "Slide show interface to perform slide show presentations.",
      "",
      "This interface provides the necessary methods to run and control a slide show from a given set of XDrawPage slides. The slide show can be displayed simultaneously on multiple targets.",
      "",
      "Note: To control a running slide show inside a presentation, please use XPresentation2 and XSlideShowController.",
      "",
      "**since**",
      "",
      "    OOo 3.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1presentation_1_1XSlideShow.html",
    "items": {
      "methods": [
        {
          "name": "addShapeEventListener",
          "returns": "None",
          "desc": [
            "Add a shape event listener.",
            "",
            "This method adds a listener to the slide show, which will get notified when a mouse click is performed on the given shape. This can be used by clients of the slide show to trigger external actions, such as jumps to different slides."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XShapeEventListener",
              "in"
            ],
            [
              "xShape",
              "XShape",
              "in"
            ]
          ]
        },
        {
          "name": "addSlideShowListener",
          "returns": "None",
          "desc": [
            "Add a slide show listener.",
            "",
            "This method adds a listener to the slide show, which will get notified when a registered shape is clicked upon, or a new slide is about to be displayed. Note that the listeners will not be notified, when the slide change is directly requested by one of the nextSlide(), previousSlide() or displaySlide() methods."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XSlideShowListener",
              "in"
            ]
          ]
        },
        {
          "name": "addView",
          "returns": "bool",
          "desc": [
            "Add a view to the slide show.",
            "",
            "This method adds a view to the slide show. After successful completion of this method, the slide show will be visible on the added view, scaled according to the view's output area."
          ],
          "raises": [],
          "args": [
            [
              "xView",
              "XSlideShowView",
              "in"
            ]
          ]
        },
        {
          "name": "displaySlide",
          "returns": "None",
          "desc": [
            "Jump to the given slide.",
            "",
            "This method ends all effects on the current slide, displays a possible slide transition, followed by the given slide. If the current slide is equal to the requested slide here, this method does nothing (this especially means, that any currently active effects will remain running)."
          ],
          "raises": [],
          "args": [
            [
              "xSlide",
              "XDrawPage",
              "in"
            ],
            [
              "xDrawPages",
              "XDrawPagesSupplier",
              "in"
            ],
            [
              "AnimationNode",
              "XAnimationNode",
              "in"
            ],
            [
              "aProperties",
              "typing.List[PropertyValue]",
              "in"
            ]
          ]
        },
        {
          "name": "getCurrentSlide",
          "returns": "XDrawPage",
          "desc": [
            "Query the currently displayed slide."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "nextEffect",
          "returns": "bool",
          "desc": [
            "Trigger the next effect of the slide show.",
            "",
            "This method triggers the next effect on the currently displayed slide. If there is currently no slide show running, this method does nothing. If there are no more effects on the current slide, a possible slide transition effect is issued and the next slide is displayed."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "pause",
          "returns": "bool",
          "desc": [
            "Change the pause state of the slide show.",
            "",
            "This method either pauses the slide show (all currently running effects are stopped), or starts a previously stopped show again (all paused effects start again)."
          ],
          "raises": [],
          "args": [
            [
              "bPauseShow",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "previousEffect",
          "returns": "bool",
          "desc": [
            "Undo the last effect in the main sequence of the slide show.",
            "",
            "The current slide is displayed as if the last user-triggered effect has never been triggered. If there is no previous effect on the current slide then slideEnded(true) is called at the registered XSlideShowListener objects, which can then trigger a change to the previous slide. Note that this command is executed asynchronously. Multiple calls to update() may be necessary to complete its execution. If there is currently no slide show running, this method does nothing."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "registerUserPaintPolygons",
          "returns": "None",
          "desc": [
            "Register drawn polygons in presentation mode."
          ],
          "raises": [],
          "args": [
            [
              "xDocFactory",
              "XMultiServiceFactory",
              "in"
            ]
          ]
        },
        {
          "name": "removeShapeEventListener",
          "returns": "None",
          "desc": [
            "Revoke a previously registered shape event listener."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XShapeEventListener",
              "in"
            ],
            [
              "xShape",
              "XShape",
              "in"
            ]
          ]
        },
        {
          "name": "removeSlideShowListener",
          "returns": "None",
          "desc": [
            "Revoke a previously registered slide show listener."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XSlideShowListener",
              "in"
            ]
          ]
        },
        {
          "name": "removeView",
          "returns": "bool",
          "desc": [
            "Remove view from the slide show.",
            "",
            "This method removes the given view from the slide show. After successful completion of this method, the slide show will cease to display on this view."
          ],
          "raises": [],
          "args": [
            [
              "xView",
              "XSlideShowView",
              "in"
            ]
          ]
        },
        {
          "name": "setProperty",
          "returns": "bool",
          "desc": [
            "Change a property of the slide show."
          ],
          "raises": [],
          "args": [
            [
              "aShowProperty",
              "PropertyValue",
              "in"
            ]
          ]
        },
        {
          "name": "setShapeCursor",
          "returns": "None",
          "desc": [
            "Set a special mouse cursor for a shape.",
            "",
            "This method requests the slide show to display a special cursor, whenever the mouse is hovering over the given shape."
          ],
          "raises": [],
          "args": [
            [
              "xShape",
              "XShape",
              "in"
            ],
            [
              "nPointerShape",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "startShapeActivity",
          "returns": "bool",
          "desc": [
            "Start a shape-intrinsic animation or activity.",
            "",
            "This method starts an animation or activity intrinsic to the given shape. Shape-intrinsic activities are things like video playback for multimedia shapes, sounds, GIF animations and drawing layer animations (flipping between shapes in a group, or scroll text)."
          ],
          "raises": [],
          "args": [
            [
              "xShape",
              "XShape",
              "in"
            ]
          ]
        },
        {
          "name": "stopShapeActivity",
          "returns": "bool",
          "desc": [
            "Stop a shape-intrinsic animation or activity.",
            "",
            "This method stops an animation or activity intrinsic to the given shape. Shape-intrinsic activities are things like video playback for multimedia shapes, sounds, GIF animations and drawing layer animations (flipping between shapes in a group, or scroll text)."
          ],
          "raises": [],
          "args": [
            [
              "xShape",
              "XShape",
              "in"
            ]
          ]
        },
        {
          "name": "update",
          "returns": "bool",
          "desc": [
            "Update the animations.",
            "",
            "This method updates all currently active slide animations. The XSlideShow implementations do not render animations automatically, but must be called from their clients. This allows for various update mechanisms to be employed, ranging from a dedicated rendering thread, over timer-based updates, to rendering in an idle function. Either way, the client of this interface decide about the details."
          ],
          "raises": [],
          "args": [
            [
              "nNextTimeout",
              "float",
              "out"
            ]
          ]
        }
      ]
    }
  }
}