{
  "id": "uno-ooo-parser",
  "version": "0.1.4",
  "timestamp": "2021-12-22 22:43:35+00:00",
  "name": "XSingleSelectQueryAnalyzer",
  "type": "interface",
  "namespace": "com.sun.star.sdb",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        "..beans.property_value",
        "PropertyValue"
      ],
      [
        "..container.x_index_access",
        "XIndexAccess"
      ]
    ],
    "name": "XSingleSelectQueryAnalyzer",
    "imports": [],
    "namespace": "com.sun.star.sdb",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "simplifies the analyzing of single select statements.",
      "",
      "The interface can be used for analyzing single SELECT statements without knowing the structure of the used query.",
      "",
      "**since**",
      "",
      "    OOo 2.0.4"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdb_1_1XSingleSelectQueryAnalyzer.html",
    "items": {
      "methods": [
        {
          "name": "getFilter",
          "returns": "str",
          "desc": [
            "returns the used filter.",
            "",
            "The filter criteria returned is part of the where condition of the select command, but it does not contain the where token."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getGroup",
          "returns": "str",
          "desc": [
            "returns the currently used GROUP BY.",
            "",
            "The group criteria returned is part of the GROUP BY clause of the select command, but it does not contain the GROUP BY keyword ."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getGroupColumns",
          "returns": "XIndexAccess",
          "desc": [
            "returns the currently used group.",
            "",
            "The columns returned from the GROUP BY clause."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getHavingClause",
          "returns": "str",
          "desc": [
            "returns the used HAVING filter.",
            "",
            "The HAVING filter criteria returned is part of the HAVING condition of the select command, but it does not contain the HAVING token."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getOrder",
          "returns": "str",
          "desc": [
            "returns the currently used sort order.",
            "",
            "The order criteria returned is part of the ORDER BY clause of the select command, but it does not contain the ORDER BY keyword ."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getOrderColumns",
          "returns": "XIndexAccess",
          "desc": [
            "returns the currently used sort order.",
            "",
            "The order criteria returned is part of the ORDER BY clause of the select command, but it does not contain the ORDER BY keyword ."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getQuery",
          "returns": "str",
          "desc": [
            "returns the query."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getQueryWithSubstitution",
          "returns": "str",
          "desc": [
            "returns the query previously set at the analyzer, with all application-level features being substituted by their database-level counterparts.",
            "",
            "The XSingleSelectQueryAnalyzer is an application-level component, which in some respect understands SQL features usually not present at the database level. As a prominent example, you might pass a SELECT statement to the analyzer which is based on another query.",
            "",
            "While all other methods will handle those additional features transparently - e.g. the query in the FROM part of a SELECT statement will be handled as if it really is a table -, getQueryWithSubstitution gives you the SQL statement where all those features have been stripped, and replaced with appropriate standard SQL.",
            "",
            "For example, consider a database document which contains a client-side query named All Orders. This query is not known to the underlying database, so an SQL statement like SELECT * from \\\"All Orders\\\" would be rejected by the database. However, instantiating a SingleSelectQueryAnalyzer at the Connection object, and passing it the above query, you can then use getQueryWithSubstitution to retrieve a statement where \\\"All Orders\\\" has been replaced with the SELECT statement which actually constitutes the \\\"All Orders\\\" query.",
            "",
            "**since**",
            "",
            "    OOo 2.0.4"
          ],
          "raises": "com.sun.star.sdbc.SQLException",
          "args": []
        },
        {
          "name": "getStructuredFilter",
          "returns": "'typing.List[typing.List[PropertyValue]]'",
          "desc": [
            "returns the currently used filter.",
            "",
            "The filter criteria is split into levels. Each level represents the OR criteria. Within each level, the filters are provided as an AND criteria with the name of the column and the filter condition. The filter condition is of type string. The operator used, is defined by com.sun.star.sdb.SQLFilterOperator."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "getStructuredHavingClause",
          "returns": "'typing.List[typing.List[PropertyValue]]'",
          "desc": [
            "returns the currently used HAVING filter.",
            "",
            "The HAVING filter criteria is split into levels. Each level represents the OR criteria. Within each level, the filters are provided as an AND criteria with the name of the column and the filter condition. The filter condition is of type string. The operator used, is defined by com.sun.star.sdb.SQLFilterOperator."
          ],
          "raises": "",
          "args": []
        },
        {
          "name": "setCommand",
          "returns": "None",
          "desc": [
            "sets a new query for the composer, which may be expanded by filters, group by, having and sort criteria.",
            "",
            "In case of a CommandType of com.sun.star.sdb.CommandType.COMMAND, means in case the Command specifies an SQL statement, the inherited com.sun.star.sdbc.RowSet.EscapeProcessing becomes relevant:\n It then can be to used to specify whether the SQL statement should be analyzed on the client side before sending it to the database server.\n The default value for com.sun.star.sdbc.RowSet.EscapeProcessing is TRUE. By switching it to FALSE, you can pass backend-specific SQL statements, which are not standard SQL, to your database."
          ],
          "raises": "com.sun.star.sdbc.SQLException",
          "args": []
        },
        {
          "name": "setQuery",
          "returns": "None",
          "desc": [
            "sets a new query for the composer, which may be expanded by filters, group by, having and sort criteria."
          ],
          "raises": "com.sun.star.sdbc.SQLException",
          "args": []
        }
      ]
    }
  }
}