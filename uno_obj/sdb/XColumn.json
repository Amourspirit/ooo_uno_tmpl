{
  "id": "uno-ooo-parser",
  "version": "0.1.12",
  "timestamp": "2022-01-01 23:12:23+00:00",
  "name": "XColumn",
  "type": "interface",
  "namespace": "com.sun.star.sdb",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        "..util.time",
        "Time"
      ],
      [
        "..util.date_time",
        "DateTime"
      ],
      [
        "..sdbc.x_blob",
        "XBlob"
      ],
      [
        "..util.date",
        "Date"
      ],
      [
        "..sdbc.x_clob",
        "XClob"
      ],
      [
        "..sdbc.x_array",
        "XArray"
      ],
      [
        "..container.x_name_access",
        "XNameAccess"
      ],
      [
        "..sdbc.x_ref",
        "XRef"
      ],
      [
        "..io.x_input_stream",
        "XInputStream"
      ]
    ],
    "quote": [
      "typing.List[int]",
      "XNameAccess",
      "DateTime",
      "XRef",
      "Date",
      "XBlob",
      "XArray",
      "XInputStream",
      "XClob",
      "Time"
    ],
    "typings": [
      "typing.List[int]"
    ],
    "requires_typing": true,
    "name": "XColumn",
    "imports": [],
    "namespace": "com.sun.star.sdb",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "is used to access data which is collected in a row."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdb_1_1XColumn.html",
    "items": {
      "methods": [
        {
          "name": "getArray",
          "returns": "XArray",
          "desc": [
            "gets a SQL ARRAY value from the current row."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getBinaryStream",
          "returns": "XInputStream",
          "desc": [
            "gets the value of a column in the current row as a stream of uninterpreted bytes.",
            "",
            "The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARBINARY or LONGVARCHAR values.",
            "",
            "Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. Also, a stream may return 0 when the method com.sun.star.io.XInputStream.available() is called whether there is data available or not."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getBlob",
          "returns": "XBlob",
          "desc": [
            "gets a BLOB (Binary Large OBject) value in the current row."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getBoolean",
          "returns": "bool",
          "desc": [
            "gets the value of a column in the current row as boolean."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getByte",
          "returns": "int",
          "desc": [
            "gets the value of a column in the current row as a byte."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getBytes",
          "returns": "typing.List[int]",
          "desc": [
            "gets the value of a column in the current row as a byte array.",
            "",
            "The bytes represent the raw values returned by the driver."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getCharacterStream",
          "returns": "XInputStream",
          "desc": [
            "gets the value of a column in the current row as a stream of uninterpreted bytes.",
            "",
            "The value can then be read in chunks from the stream. This method is particularly suitable for retrieving large LONGVARCHAR values.",
            "",
            "Note: All the data in the returned stream must be read prior to getting the value of any other column. The next call to a get method implicitly closes the stream. Also, a stream may return 0 when the method com.sun.star.io.XInputStream.available() is called whether there is data available or not."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getClob",
          "returns": "XClob",
          "desc": [
            "gets a CLOB value in the current row of this ResultSet object."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getDate",
          "returns": "Date",
          "desc": [
            "gets the value of a column in the current row as a date object."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getDouble",
          "returns": "float",
          "desc": [
            "gets the value of a column in the current row as a double."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getFloat",
          "returns": "float",
          "desc": [
            "gets the value of a column in the current row as a float."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getInt",
          "returns": "int",
          "desc": [
            "gets the value of a column in the current row as a long."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getLong",
          "returns": "int",
          "desc": [
            "gets the value of a column in the current row as a hyper."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getObject",
          "returns": "object",
          "desc": [],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": [
            [
              "typeMap",
              "XNameAccess",
              "in"
            ]
          ]
        },
        {
          "name": "getRef",
          "returns": "XRef",
          "desc": [
            "gets a REF(<structured-type&gt) column value from the current row."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getShort",
          "returns": "int",
          "desc": [
            "gets the value of a column in the current row as a short."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getString",
          "returns": "str",
          "desc": [
            "gets the value of a column in the current row as a String."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getTime",
          "returns": "Time",
          "desc": [
            "gets the value of a column in the current row as a time object."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "getTimestamp",
          "returns": "DateTime",
          "desc": [
            "gets the value of a column in the current row as a datetime object."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        },
        {
          "name": "wasNull",
          "returns": "bool",
          "desc": [
            "reports whether the last column read had a value of SQL NULL.",
            "",
            "Note that you must first call getXXX on a column to try to read its value and then call wasNull() to see if the value read was SQL NULL."
          ],
          "raises": [
            "com.sun.star.sdbc.SQLException"
          ],
          "args": []
        }
      ]
    }
  }
}