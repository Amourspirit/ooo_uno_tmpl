{
  "id": "uno-ooo-parser",
  "version": "0.1.5",
  "timestamp": "2021-12-24 00:49:38+00:00",
  "name": "XDatabaseRegistrations",
  "type": "interface",
  "namespace": "com.sun.star.sdb",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [],
    "from_imports_typing": [],
    "name": "XDatabaseRegistrations",
    "imports": [],
    "namespace": "com.sun.star.sdb",
    "extends": [],
    "desc": [
      "provides access to the application-wide registered databases.",
      "",
      "This interface provides a mere wrapper around the respective configuration data, this way hiding the concrete configuration structure from its clients. You should, if possible at all, use this interface, instead of modifying or querying the configuration data directly.",
      "",
      "**since**",
      "",
      "    OOo 3.3"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sdb_1_1XDatabaseRegistrations.html",
    "items": {
      "methods": [
        {
          "name": "addDatabaseRegistrationsListener",
          "returns": "None",
          "desc": [
            "registers a listener which is notified of changes in the registered databases"
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "changeDatabaseLocation",
          "returns": "None",
          "desc": [
            "changes the location of a given database registration"
          ],
          "raises": [
            ","
          ],
          "args": []
        },
        {
          "name": "getDatabaseLocation",
          "returns": "str",
          "desc": [
            "returns the location of the database registered under the given name"
          ],
          "raises": [
            ","
          ],
          "args": []
        },
        {
          "name": "getRegistrationNames",
          "returns": "typing.List[str]",
          "desc": [
            "returns the names of all registered databases"
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "hasRegisteredDatabase",
          "returns": "bool",
          "desc": [
            "determines whether a database is registered under the given name."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": []
        },
        {
          "name": "isDatabaseRegistrationReadOnly",
          "returns": "bool",
          "desc": [
            "determines whether the registration data for a database given by name is read-only.",
            "",
            "In this case, attempts to revoke this registration will fail."
          ],
          "raises": [
            ","
          ],
          "args": []
        },
        {
          "name": "registerDatabaseLocation",
          "returns": "None",
          "desc": [
            "registers a database, given by location, under a given name"
          ],
          "raises": [
            ","
          ],
          "args": []
        },
        {
          "name": "removeDatabaseRegistrationsListener",
          "returns": "None",
          "desc": [
            "revokes a previously registered listener"
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "revokeDatabaseLocation",
          "returns": "None",
          "desc": [
            "revokes the registration of a database, given by name"
          ],
          "raises": [
            ","
          ],
          "args": []
        }
      ]
    }
  }
}