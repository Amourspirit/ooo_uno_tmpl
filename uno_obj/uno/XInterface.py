#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
import typing
from _x_base import x_base as XBase

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1638759645.8864553
__CHEETAH_genTimestamp__ = 'Sun Dec  5 22:00:45 2021'
__CHEETAH_src__ = '/home/paul/Documents/Projects/Python/Cheeta3/ooo_uno_tmpl/uno_obj/uno/XInterface.tmpl'
__CHEETAH_srcLastModified__ = 'Sun Dec  5 22:00:28 2021'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class XInterface(XBase):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(XInterface, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    name = "XInterface"

    desc = [    "base interface of all UNO interfaces",    "",    "It provides lifetime control by reference counting and the possibility of querying for other interfaces of the same logical object.",    "",    "\\\"Logical Object\\\" in this case means that the interfaces actually can be supported by internal (e.g. aggregated) physical objects.",    "",    "Deriving from this interface is mandatory for all UNO interfaces.",    "",    "Each language binding (Java, C++, StarBasic, Python, ... ) may provide a different mapping of this interface, please look into the language dependent documentation.",    "",    "The UNO object does not export the state of the reference count (acquire() and release() do not have return values). In general, also the UNO object itself should not make any assumption on the concrete value of the reference count (except on the transition from one to zero )."]

    link = "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1uno_1_1XInterface.html"

    requires_typing = True

    inherits = []

    imports = []

    from_imports = []

    from_imports_typing = []

    namespace = "com.sun.star.uno"

    attribs = {        "methods": [            {                "name": "acquire",                "returns": "None",                "desc": [                    "increases the reference counter by one.",                    "",                    "When you have called acquire() on the UNO object, it is often said, that you have a reference or a hard reference to the object.",                    "",                    "It is only allowed to invoke a method on a UNO object, when you keep a hard reference to it.",                    "",                    "Every call to acquire must be followed by a corresponding call to release some time later, which may eventually lead to the destruction of the object."                ],                "raises": [],                "args": []            },            {                "name": "queryInterface",                "returns": "object",                "desc": [                    "queries for a new interface to an existing UNO object.",                    "",                    "The queryInterface() method is the entry point to obtain other interfaces which are exported by the object. The caller asks the implementation of the object, if it supports the interface specified by the type argument. The call may either return with an interface reference of the requested type or with a void any.",                    "",                    "There are certain specifications, a queryInterface() implementation must not violate.",                    "",                    "1) If queryInterface on a specific object has once returned a valid interface reference for a given type, it must return a valid reference for any successive queryInterface calls on this object for the same type.",                    "",                    "2) If queryInterface on a specific object has once returned a null reference for a given type, it must always return a null reference for the same type.",                    "",                    "3) If queryInterface on a reference A returns reference B, queryInterface on B for Type A must return interface reference A or calls made on the returned reference must be equivalent to calls made on reference A.",                    "",                    "4) If queryInterface on a reference A returns reference B, queryInterface on A and B for XInterface must return the same interface reference (object identity).",                    "",                    "The reason for the strong specification is, that a Uno Runtime Environment (URE) may choose to cache queryInterface() calls.",                    "",                    "As mentioned above, certain language bindings may map this function differently also with different specifications, please visit the language dependent specification for it. The current C++ binding sticks to the specification state",                    "",                    "The rules mentioned above are basically identical to the rules of QueryInterface in MS COM."                ],                "raises": [],                "args": [                    [                        "aType",                        "typing.Type",                        "in"                    ]                ]            },            {                "name": "release",                "returns": "None",                "desc": [                    "decreases the reference counter by one.",                    "",                    "When the reference counter reaches 0, the object gets deleted.",                    "",                    "Calling release() on the object is often called releasing or clearing the reference to an object."                ],                "raises": [],                "args": []            }        ]    }

    _mainCheetahMethod_for_XInterface = 'writeBody'

## END CLASS DEFINITION

if not hasattr(XInterface, '_initCheetahAttributes'):
    templateAPIClass = getattr(XInterface,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(XInterface)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=XInterface()).run()


