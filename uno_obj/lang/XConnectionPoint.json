{
  "id": "uno-ooo-parser",
  "version": "0.1.8",
  "timestamp": "2021-12-27 19:32:06+00:00",
  "name": "XConnectionPoint",
  "type": "interface",
  "namespace": "com.sun.star.lang",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_connection_point_container",
        "XConnectionPointContainer"
      ]
    ],
    "quote": [
      "XConnectionPointContainer",
      "typing.List[XInterface]",
      "XInterface"
    ],
    "typings": [
      "typing.List[XInterface]"
    ],
    "requires_typing": true,
    "name": "XConnectionPoint",
    "imports": [],
    "namespace": "com.sun.star.lang",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "supports connection points for connectable objects.",
      "",
      "Connectable objects support the following features:",
      "",
      "To create a connectable object, you need to implement objects that provide two related interfaces:",
      "",
      "The XConnectionPointContainer interface is implemented on the connectable object to indicate the existence of the outgoing interfaces. It provides a sequence of sub-objects. It also provides access to all the connection point sub-objects, each of which implements the XConnectionPoint interface. The XConnectionPoint interface provides a sequence of sub-objects.",
      "",
      "Each connection point is a separate sub-object to avoid circular reference counting problems. A connection point controls how many connections (one or more) it will allow in its implementation of XConnectionPoint.advise().",
      "",
      "A client can use the XConnectionPointContainer interface:"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1lang_1_1XConnectionPoint.html",
    "items": {
      "methods": [
        {
          "name": "advise",
          "returns": "None",
          "desc": [
            "creates a connection between a connection point and a client's sink, where the sink implements the outgoing interface supported by this connection point.",
            "",
            "A few add...Listener methods need additional parameters to add listeners or throw exceptions. One of these methods is com.sun.star.beans.XPropertySet.addPropertyChangeListener(). We ignore the problem in this interface. A solution must be provided in an additional XConnectionPoint interface."
          ],
          "raises": [
            "com.sun.star.lang.ListenerExistException",
            "com.sun.star.lang.InvalidListenerException"
          ],
          "args": [
            [
              "xListener",
              "XInterface",
              "in"
            ]
          ]
        },
        {
          "name": "getConnectionPointContainer",
          "returns": "XConnectionPointContainer",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "getConnectionType",
          "returns": "object",
          "desc": [
            "Using the XConnectionPointContainer.getConnectionPoints() method, a client can obtain an XConnectionPoint interface. Using that interface and this method, the client can determine the type of each connection point enumerated. The type returned from this method must enable the caller to access this same connection point through XConnectionPointContainer.findConnectionPoint()."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getConnections",
          "returns": "typing.List[XInterface]",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "unadvise",
          "returns": "None",
          "desc": [
            "terminates a notification previously set up with advise.",
            "",
            "A few remove...Listener methods need additional parameters to add listeners or throw exceptions. One of these methods is com.sun.star.beans.XPropertySet.removePropertyChangeListener(). We ignore the problem in this interface. A solution must be provided in an additional XConnectionPoint interface."
          ],
          "raises": [],
          "args": [
            [
              "xListener",
              "XInterface",
              "in"
            ]
          ]
        }
      ]
    }
  }
}