{
  "id": "uno-ooo-parser",
  "version": "0.1.8",
  "timestamp": "2021-12-27 19:32:17+00:00",
  "name": "XMarkableStream",
  "type": "interface",
  "namespace": "com.sun.star.io",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [],
    "quote": [],
    "typings": [],
    "requires_typing": false,
    "name": "XMarkableStream",
    "imports": [],
    "namespace": "com.sun.star.io",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "makes it possible to set and remove seekable marks to a stream."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1io_1_1XMarkableStream.html",
    "items": {
      "methods": [
        {
          "name": "createMark",
          "returns": "int",
          "desc": [
            "creates a mark of the current position and returns an identifier to it."
          ],
          "raises": [
            "com.sun.star.io.IOException"
          ],
          "args": []
        },
        {
          "name": "deleteMark",
          "returns": "None",
          "desc": [
            "deletes the mark that you previously created with XMarkableStream.createMark().",
            "",
            "It is an error to delete a mark if other marks after this exist. In this case, for reasons of robustness, the implementation must delete this mark and all others after this mark."
          ],
          "raises": [
            "com.sun.star.io.IOException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "Mark",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "jumpToFurthest",
          "returns": "None",
          "desc": [
            "jumps to the furthest position of the stream.",
            "",
            "In the inputstream case, a subsequent read call returns data, that was never read or skipped over before. In the outputstream case, a subsequent write call will add new data at the end of the stream without overwriting existing data."
          ],
          "raises": [
            "com.sun.star.io.IOException"
          ],
          "args": []
        },
        {
          "name": "jumpToMark",
          "returns": "None",
          "desc": [
            "jumps to a previously created mark."
          ],
          "raises": [
            "com.sun.star.io.IOException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "nMark",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "offsetToMark",
          "returns": "int",
          "desc": [],
          "raises": [
            "com.sun.star.io.IOException",
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "nMark",
              "int",
              "in"
            ]
          ]
        }
      ]
    }
  }
}