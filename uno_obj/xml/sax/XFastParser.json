{
  "id": "uno-ooo-parser",
  "version": "0.1.5",
  "timestamp": "2021-12-24 00:48:01+00:00",
  "name": "XFastParser",
  "type": "interface",
  "namespace": "com.sun.star.xml.sax",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "...uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [],
    "name": "XFastParser",
    "imports": [],
    "namespace": "com.sun.star.xml.sax",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "specifies a SAX parser that uses integer values for known XML names (elements, attributes and attribute values).",
      "",
      "The parser also handles namespaces and allows to have individual contexts for each XML element.",
      "",
      "Before parsing is possible you have to set your XFastDocumentHandler using setFastDocumentHandler().",
      "",
      "Parsing starts with calling parseStream(). If the parser finds a valid XML file with the given InputSource, it calls XFastDocumentHandler.startDocument() first.",
      "",
      "This parser generates either \\\"fast\\\" events that use integer token values for namespaces, elements and attributes or \\\"unknown\\\" events for elements that are unknown.",
      "",
      "A namespace is unknown if the namespace URL was not registered with registerNamespace().",
      "",
      "An element is unknown if no XFastTokenHandler is set or if the XFastTokenHandler does not return a valid identifier for the elements local name. An element is also unknown if the elements local name is known but it uses a namespace that is unknown.",
      "",
      "Setting a XFastTokenHandler with setTokenHandler() is optional, but without a XFastTokenHandler you will only get unknown sax events. This can be useful if you are only interested in the namespace handling and/or the context feature.",
      "",
      "For each element the parser sends a create child element event to the elements parent context by calling XFastContextHandler.createFastChildContext() for known elements or XFastContextHandler.createUnknownChildContext() for unknown elements. \nThe parent context for the root element is the XFastDocumentHandler itself.",
      "",
      "If the parent context returns an empty reference, no further events for the element and all of its children are created.",
      "",
      "If a valid context is returned this context gets a start event by a call to XFastContextHandler.startFastElement() for known elements or XFastContextHandler.startUnknownElement() for unknown elements.",
      "",
      "After processing all its child elements the context gets an end event by a call to XFastContextHandler.endFastElement() for known elements or XFastContextHandler.endUnknownElement() for unknown elements.",
      "",
      "It is valid to return one instance of XFastContextHandler more than once. It is even possible to only use the XFastDocumentHandler by always returning a reference to itself for each create child context event.",
      "",
      "After the last element is processed the parser generates an end document event at the XFastDocumentHandler by calling XFastDocumentHandler.endDocument().",
      "",
      "**since**",
      "",
      "    LibreOffice 7.1"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1xml_1_1sax_1_1XFastParser.html",
    "items": {
      "methods": [
        {
          "name": "getNamespaceURL",
          "returns": "str",
          "desc": [
            "Gets the namespace url string."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": []
        },
        {
          "name": "parseStream",
          "returns": "None",
          "desc": [
            "parses an XML document from a stream.",
            "",
            "Set the desired handlers before calling this method."
          ],
          "raises": [
            "SAXException,"
          ],
          "args": []
        },
        {
          "name": "registerNamespace",
          "returns": "None",
          "desc": [
            "registers a known namespace url with the given integer token."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": []
        },
        {
          "name": "setCustomEntityNames",
          "returns": "None",
          "desc": [
            "Simulate a DTD file.",
            "",
            "Will allow to use customized entity references like \u221e .",
            "",
            "**since**",
            "",
            "    LibreOffice 7.1"
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setEntityResolver",
          "returns": "None",
          "desc": [
            "allows an application to register a DTD-Handler."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setErrorHandler",
          "returns": "None",
          "desc": [
            "allows an application to register an error event handler.",
            "",
            "Note that the error handler can throw an exception when an error or warning occurs. Note that an exception is thrown by the parser when an unrecoverable (fatal) error occurs."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setFastDocumentHandler",
          "returns": "None",
          "desc": [
            "Application must register a document event handler to get sax events for the parsed stream."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setLocale",
          "returns": "None",
          "desc": [
            "sets a locale specified for localization of warnings and error messages.",
            "",
            "Set the language of the error messages. Useful when the parsing errors will be presented to the user."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setNamespaceHandler",
          "returns": "None",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "setTokenHandler",
          "returns": "None",
          "desc": [
            "must be registered to translate known XML names to integer tokens."
          ],
          "raises": [],
          "args": []
        }
      ]
    }
  }
}