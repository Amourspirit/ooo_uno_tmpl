{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "name": "XReportDefinition",
  "type": "interface",
  "namespace": "com.sun.star.report",
  "parser_args": {
    "sort": true,
    "long_names": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..frame.x_model",
        "XModel",
        "frame_x_model_i"
      ],
      [
        "..util.x_modifiable2",
        "XModifiable2",
        "util_x_modifiable2_i"
      ],
      [
        ".x_report_component",
        "XReportComponent",
        "x_report_component_i"
      ],
      [
        "..document.x_view_data_supplier",
        "XViewDataSupplier",
        "document_x_view_data_supplier_i"
      ],
      [
        "..frame.x_loadable",
        "XLoadable",
        "frame_x_loadable_i"
      ],
      [
        "..style.x_style_families_supplier",
        "XStyleFamiliesSupplier",
        "style_x_style_families_supplier_i"
      ],
      [
        "..document.x_document_sub_storage_supplier",
        "XDocumentSubStorageSupplier",
        "document_x_document_sub_storage_supplier_i"
      ],
      [
        ".x_functions_supplier",
        "XFunctionsSupplier",
        "x_functions_supplier_i"
      ],
      [
        "..document.x_storage_based_document",
        "XStorageBasedDocument",
        "document_x_storage_based_document_i"
      ],
      [
        "..embed.x_visual_object",
        "XVisualObject",
        "embed_x_visual_object_i"
      ],
      [
        "..util.x_closeable",
        "XCloseable",
        "util_x_closeable_i"
      ],
      [
        "..ui.xui_configuration_manager_supplier",
        "XUIConfigurationManagerSupplier",
        "ui_xui_configuration_manager_supplier_i"
      ]
    ],
    "from_imports_typing": [
      [
        "..document.x_event_broadcaster",
        "XEventBroadcaster",
        "document_x_event_broadcaster_i"
      ],
      [
        ".x_section",
        "XSection",
        "x_section_i"
      ],
      [
        "..sdbc.x_connection",
        "XConnection",
        "sdbc_x_connection_i"
      ],
      [
        ".x_groups",
        "XGroups",
        "x_groups_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.frame.XModel": "frame_x_model_i",
      "com.sun.star.util.XModifiable2": "util_x_modifiable2_i",
      "com.sun.star.report.XReportComponent": "x_report_component_i",
      "com.sun.star.document.XViewDataSupplier": "document_x_view_data_supplier_i",
      "com.sun.star.frame.XLoadable": "frame_x_loadable_i",
      "com.sun.star.style.XStyleFamiliesSupplier": "style_x_style_families_supplier_i",
      "com.sun.star.document.XDocumentSubStorageSupplier": "document_x_document_sub_storage_supplier_i",
      "com.sun.star.report.XFunctionsSupplier": "x_functions_supplier_i",
      "com.sun.star.document.XStorageBasedDocument": "document_x_storage_based_document_i",
      "com.sun.star.embed.XVisualObject": "embed_x_visual_object_i",
      "com.sun.star.util.XCloseable": "util_x_closeable_i",
      "com.sun.star.ui.XUIConfigurationManagerSupplier": "ui_xui_configuration_manager_supplier_i"
    },
    "quote": [
      "typing.List[str]",
      "document_x_event_broadcaster_i",
      "x_groups_i",
      "x_section_i",
      "sdbc_x_connection_i"
    ],
    "typings": [
      "typing.List[str]"
    ],
    "requires_typing": true,
    "name": "XReportDefinition",
    "imports": [],
    "namespace": "com.sun.star.report",
    "extends": [
      "com.sun.star.document.XStorageBasedDocument",
      "com.sun.star.frame.XModel",
      "com.sun.star.util.XModifiable2",
      "com.sun.star.report.XReportComponent",
      "com.sun.star.document.XViewDataSupplier",
      "com.sun.star.frame.XLoadable",
      "com.sun.star.style.XStyleFamiliesSupplier",
      "com.sun.star.document.XDocumentSubStorageSupplier",
      "com.sun.star.report.XFunctionsSupplier",
      "com.sun.star.ui.XUIConfigurationManagerSupplier",
      "com.sun.star.embed.XVisualObject",
      "com.sun.star.util.XCloseable"
    ],
    "desc": [
      "identifies a XReportComponent as being a (sub-) report.",
      "",
      "This interface does not really provide an own functionality, it is only for easier runtime identification of report components.",
      "",
      "A report fulfills several tasks, like storing the structure of its report components and it provides the event environment for its contained elements."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1report_1_1XReportDefinition.html",
    "items": {
      "methods": [
        {
          "name": "getAvailableMimeTypes",
          "returns": "typing.List[str]",
          "desc": [
            "returns a sequence of the currently supported output formats."
          ],
          "raises": [
            "com.sun.star.lang.DisposedException",
            "com.sun.star.uno.Exception"
          ],
          "args": []
        },
        {
          "name": "getEventBroadcaster",
          "returns": "document_x_event_broadcaster_i",
          "desc": [
            "makes it possible to register listeners which are called whenever a document event occurs.",
            "",
            "This is a workaround due to the fact that this interface can not be directly inherited from com.sun.star.document.XEventBroadcaster because the methods addEventListener and removeEventListener are already defined in com.sun.star.lang.XComponent. A queryInterface call is still supported to the com.sun.star.document.XEventBroadcaster interface."
          ],
          "raises": [
            "com.sun.star.lang.DisposedException",
            "com.sun.star.uno.Exception"
          ],
          "args": []
        }
      ],
      "properties": [
        {
          "name": "ActiveConnection",
          "returns": "sdbc_x_connection_i",
          "desc": [
            "specifies the active connection which is used to create the resulting report."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Caption",
          "returns": "str",
          "desc": [
            "Represents the title of the report in print preview."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Command",
          "returns": "str",
          "desc": [
            "is the command which should be executed, the type of command depends on the CommandType.",
            "",
            "In case of a CommandType of CommandType.COMMAND, means in case the Command specifies an SQL statement, the inherited com.sun.star.sdbc.RowSet.EscapeProcessing becomes relevant:",
            "It then can be to used to specify whether the SQL statement should be analyzed on the client side before sending it to the database server.",
            "The default value for com.sun.star.sdbc.RowSet.EscapeProcessing is TRUE. By switching it to FALSE, you can pass backend-specific SQL statements, which are not standard SQL, to your database."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "CommandType",
          "returns": "int",
          "desc": [
            "specifies the type of the command to be executed to retrieve a result set.",
            "",
            "Command needs to be interpreted depending on the value of this property.",
            "",
            "This property is only meaningful together with the Command property, thus either both or none of them are present."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "DataSourceName",
          "returns": "str",
          "desc": [
            "is the name of the datasource to use, this could be a named datasource or the URL of a data access component."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Detail",
          "returns": "x_section_i",
          "desc": [
            "returns the detail section."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "EscapeProcessing",
          "returns": "bool",
          "desc": [
            "specifies if the Command should be analyzed on the client side before sending it to the database server.",
            "",
            "The default value of this property is TRUE. By switching it to FALSE, you can pass backend-specific SQL statements, which are not standard SQL, to your database.",
            "",
            "This property is usually present together with the Command and CommandType properties, and is evaluated if and only if CommandType equals CommandType.COMMAND."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Filter",
          "returns": "str",
          "desc": [
            "specifies an additional filter to optionally use.",
            "",
            "The Filter string has to form a SQL WHERE-clause, without the WHERE-string itself.",
            "",
            "If a DataSourceName, Command and CommandType are specified, a RowSet can be created with this information. If the results provided by the row set are to be additionally filtered, the Filter property can be used.",
            "",
            "Note that the Filter property does not make sense if a ResultSet has been specified in the DataAccessDescriptor."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "GroupKeepTogether",
          "returns": "int",
          "desc": [
            "Specifies whether groups in a multi column report are kept together."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Groups",
          "returns": "x_groups_i",
          "desc": [
            "Represents the groups of the report."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "MimeType",
          "returns": "str",
          "desc": [
            "Represents the output format (media (mime) type) of the resulting document when executing this report."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageFooter",
          "returns": "x_section_i",
          "desc": [
            "returns the page footer if the PageFooterOn is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageFooterOn",
          "returns": "bool",
          "desc": [
            "Defines that the page footer is on.",
            "",
            "Default is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageFooterOption",
          "returns": "int",
          "desc": [
            "Represents the location of the page footer."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageHeader",
          "returns": "x_section_i",
          "desc": [
            "returns the page header if the PageHeaderOn is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageHeaderOn",
          "returns": "bool",
          "desc": [
            "Defines that the page header is on.",
            "",
            "Default is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "PageHeaderOption",
          "returns": "int",
          "desc": [
            "Represents the location of the page header."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ReportFooter",
          "returns": "x_section_i",
          "desc": [
            "returns the report footer if the ReportFooterOn is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ReportFooterOn",
          "returns": "bool",
          "desc": [
            "Defines that the report footer is on.",
            "",
            "Default is FALSE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ReportHeader",
          "returns": "x_section_i",
          "desc": [
            "returns the report header if the ReportHeaderOn is TRUE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ReportHeaderOn",
          "returns": "bool",
          "desc": [
            "Defines that the report header is on.",
            "",
            "Default is FALSE."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}