{
  "id": "uno-ooo-parser",
  "version": "0.1.3",
  "timestamp": "2021-12-17 11:20:14+00:00",
  "name": "XFormOperations",
  "type": "interface",
  "namespace": "com.sun.star.form.runtime",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "...lang.x_component",
        "XComponent"
      ]
    ],
    "from_imports_typing": [
      ".......x_feature_invalidation",
      "XFeatureInvalidation"
    ],
    "name": "XFormOperations",
    "imports": [],
    "namespace": "com.sun.star.form.runtime",
    "extends": [
      "com.sun.star.lang.XComponent"
    ],
    "desc": [
      "encapsulates operations on a database form.",
      "",
      "This instance allows for operations on a user interface form, by saving its clients from various tedious and error-prone operations.",
      "",
      "As an example, imagine you have a database form, displayed in some user interface, which you want to move to the next record.\n It is as easy as calling com.sun.star.sdbc.XResultSet.next() on this form, right? Wrong. First, you need to care for saving the current record, so the user doesn't lose her input. So you need to call com.sun.star.sdbc.XResultSetUpdate.updateRow() or com.sun.star.sdbc.XResultSetUpdate.insertRow(), depending on the form's com.sun.star.sdb.RowSet.IsNew property.\n But then you're done, right? Wrong, again.\n When the user just entered some data into one of the form fields, but did not yet leave this field, then the data is not yet committed to the form, not to talk about being committed to the underlying database. So, before everything else, you would need to obtain the active control of the form, and commit it.\nNow you're done ...",
      "",
      "As another example, consider that you want to delete the current record from the form. You have to take into account any com.sun.star.form.XConfirmDeleteListeners registered at the com.sun.star.form.FormController or the com.sun.star.form.component.DataForm.",
      "",
      "If you agree that this is ugly to do and maintain, then XFormOperations is for you. It provides an execute() method, which will do all of the above for you; plus some similar convenient wrappers for similar functionality.",
      "",
      "**See Also**",
      "",
      "    FormFeature"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1form_1_1runtime_1_1XFormOperations.html",
    "items": {
      "properties": [
        {
          "name": "FeatureInvalidation",
          "returns": "'XFeatureInvalidation'",
          "desc": [
            "denotes the instance which should be notified about features whose state might have changed.",
            "",
            "If this attribute is not NULL, the instance which it denotes will be notified whenever the state of any supported feature might have changed.",
            "",
            "For instance, imagine a form whose current row has just been moved to another record, using the execute() method. This means that potentially, the state of all movement-related features might have changed.",
            "",
            "Note that the instance does not actually notify changes in the feature states, but only potential changes: It's up to the callee to react on this appropriately. This is since OpenOffice.org's application framework features own mechanisms to cache and invalidate feature states, so we do not burden this implementation here with such mechanisms."
          ],
          "raises_get": [],
          "raises_set": []
        }
      ]
    }
  }
}