{
  "id": "uno-ooo-parser",
  "version": "0.1.18",
  "libre_office_ver": "7.2",
  "name": "XFormController",
  "type": "interface",
  "namespace": "com.sun.star.form.runtime",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "...awt.x_tab_controller",
        "XTabController",
        "awt_x_tab_controller_i"
      ],
      [
        "...container.x_child",
        "XChild",
        "container_x_child_i"
      ],
      [
        "...container.x_enumeration_access",
        "XEnumerationAccess",
        "container_x_enumeration_access_i"
      ],
      [
        "...container.x_index_access",
        "XIndexAccess",
        "container_x_index_access_i"
      ],
      [
        "..x_confirm_delete_broadcaster",
        "XConfirmDeleteBroadcaster",
        "x_confirm_delete_broadcaster_i"
      ],
      [
        "..x_database_parameter_broadcaster2",
        "XDatabaseParameterBroadcaster2",
        "x_database_parameter_broadcaster2_i"
      ],
      [
        ".x_filter_controller",
        "XFilterController",
        "x_filter_controller_i"
      ],
      [
        "...lang.x_component",
        "XComponent",
        "lang_x_component_i"
      ],
      [
        "...sdb.x_row_set_approve_broadcaster",
        "XRowSetApproveBroadcaster",
        "sdb_x_row_set_approve_broadcaster_i"
      ],
      [
        "...sdb.xsql_error_broadcaster",
        "XSQLErrorBroadcaster",
        "sdb_xsql_error_broadcaster_i"
      ],
      [
        "...util.x_mode_selector",
        "XModeSelector",
        "util_x_mode_selector_i"
      ],
      [
        "...util.x_modify_broadcaster",
        "XModifyBroadcaster",
        "util_x_modify_broadcaster_i"
      ]
    ],
    "from_imports_typing": [
      [
        "...awt.x_control",
        "XControl",
        "awt_x_control_i"
      ],
      [
        "..x_form_controller_listener",
        "XFormControllerListener",
        "x_form_controller_listener_i"
      ],
      [
        ".x_form_controller_context",
        "XFormControllerContext",
        "x_form_controller_context_i"
      ],
      [
        ".x_form_operations",
        "XFormOperations",
        "x_form_operations_i"
      ],
      [
        "...task.x_interaction_handler",
        "XInteractionHandler",
        "task_x_interaction_handler_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.awt.XTabController": "awt_x_tab_controller_i",
      "com.sun.star.container.XChild": "container_x_child_i",
      "com.sun.star.container.XEnumerationAccess": "container_x_enumeration_access_i",
      "com.sun.star.container.XIndexAccess": "container_x_index_access_i",
      "com.sun.star.form.XConfirmDeleteBroadcaster": "x_confirm_delete_broadcaster_i",
      "com.sun.star.form.XDatabaseParameterBroadcaster2": "x_database_parameter_broadcaster2_i",
      "com.sun.star.form.runtime.XFilterController": "x_filter_controller_i",
      "com.sun.star.lang.XComponent": "lang_x_component_i",
      "com.sun.star.sdb.XRowSetApproveBroadcaster": "sdb_x_row_set_approve_broadcaster_i",
      "com.sun.star.sdb.XSQLErrorBroadcaster": "sdb_xsql_error_broadcaster_i",
      "com.sun.star.util.XModeSelector": "util_x_mode_selector_i",
      "com.sun.star.util.XModifyBroadcaster": "util_x_modify_broadcaster_i"
    },
    "quote": [
      "XFormController",
      "awt_x_control_i",
      "task_x_interaction_handler_i",
      "x_form_controller_context_i",
      "x_form_controller_listener_i",
      "x_form_operations_i"
    ],
    "typings": [],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.awt.XTabController",
        "com.sun.star.container.XChild",
        "com.sun.star.container.XEnumerationAccess",
        "com.sun.star.container.XIndexAccess",
        "com.sun.star.form.XConfirmDeleteBroadcaster",
        "com.sun.star.form.XDatabaseParameterBroadcaster2",
        "com.sun.star.form.runtime.XFilterController",
        "com.sun.star.lang.XComponent",
        "com.sun.star.sdb.XRowSetApproveBroadcaster",
        "com.sun.star.sdb.XSQLErrorBroadcaster",
        "com.sun.star.util.XModeSelector",
        "com.sun.star.util.XModifyBroadcaster"
      ],
      "typing": [
        "com.sun.star.awt.XControl",
        "com.sun.star.form.XFormControllerListener",
        "com.sun.star.form.runtime.XFormControllerContext",
        "com.sun.star.form.runtime.XFormOperations",
        "com.sun.star.task.XInteractionHandler"
      ]
    },
    "name": "XFormController",
    "imports": [],
    "namespace": "com.sun.star.form.runtime",
    "extends": [
      "com.sun.star.awt.XTabController",
      "com.sun.star.container.XChild",
      "com.sun.star.container.XIndexAccess",
      "com.sun.star.container.XEnumerationAccess",
      "com.sun.star.lang.XComponent",
      "com.sun.star.util.XModifyBroadcaster",
      "com.sun.star.form.XConfirmDeleteBroadcaster",
      "com.sun.star.sdb.XSQLErrorBroadcaster",
      "com.sun.star.sdb.XRowSetApproveBroadcaster",
      "com.sun.star.form.XDatabaseParameterBroadcaster2",
      "com.sun.star.util.XModeSelector",
      "com.sun.star.form.runtime.XFilterController"
    ],
    "desc": [
      "specifies a component controlling the interaction between the user and form functionality.",
      "",
      "As soon as a form (containing controls) is to be presented to the user, there is a need for an instance controlling the user interaction.",
      "Such a FormController is responsible for dialog processing, like controlling the tab order and the grouping of controls.",
      "",
      "As a form may contain one or many subforms, a FormController may contain one or more other FormControllers, so the form model structure or hierarchy is reflected in the structure of FormControllers. That is, retrieving the parent of the model of a controller will give you the same object as retrieving the model of the parent of the controller. Similarly, retrieving the model of the nth child of a controller gives you the same object as retrieving the nth child of the model of the controller.",
      "",
      "A controller is called active if one of the controls it is responsible for has the focus, else inactive. To be notified whenever this activation state of a given controller changes, you can add listeners.",
      "",
      "This interface supersedes the com.sun.star.form.FormController.",
      "",
      "A FormController is responsible for a com.sun.star.awt.UnoControlContainer, and all controls therein.",
      "",
      "Furthermore, a form controller is responsible for preventing invalid user input. That is, if the form contains controls bound to a database, or to an external validator, then the form controller will check their current value when the current record is to be saved to the database.",
      "",
      "First, it will check whether any controls with an external validator exist. If so, those validators will be asked to validate the current control content. If this fails, the message provided by the validator is displayed to the user, the control is focused, and the update of the record is vetoed.",
      "",
      "Second, the controls are examined for NULL values. If a control is bound to a database field which is declared to be NOT NULL, no auto-increment field, but still NULL, then an error message is shown to the user saying that input is required, the respective control is focused, and the update of the record is vetoed.",
      "",
      "Note that you can present the second check - for database fields containing NULL values - on a per-form and a per-database basis.",
      "For the former, you need to add a boolean property FormsCheckRequiredFields to the form (aka the FormController's model), using its com.sun.star.beans.XPropertyContainer.addProperty() method, with a value of FALSE.",
      "For the latter, you need to set the respective property of the data source's Settings (also named FormsCheckRequiredFields) to FALSE.",
      "",
      "Alternatively, you can prevent the check on a per-control basis, using the DataAwareControlModel.InputRequired property of a single control model.",
      "",
      "If a control which the controller is responsible for supports the com.sun.star.frame.XDispatchProviderInterception interface, the controller registers a dispatch interceptor. Then, the control can try to delegate part of its functionality to the controller by querying the dispatch interceptor for it.",
      "",
      "Below, there's a list of URLs which have a defined meaning - if an implementation supports one of them, there must be a guaranteed semantics. However, concrete implementations may support an arbitrary sub or super set of these URLs.",
      "",
      "In general, all URLs start with the same prefix, namely .uno:FormController/. To this, a suffix is appended which describes the requested functionality.",
      "Example: The URL suffix for deleting the current record is deleteRecord, so the complete URL for requesting a dispatcher for this functionality is .uno:FormController/deleteRecord.",
      "",
      "Some URLs may require parameters. For this, the sequence of com.sun.star.beans.PropertyValues passed to the com.sun.star.frame.XDispatch.dispatch() call is used - every property value is used as one named parameter.",
      "",
      "For all URLs, interested parties can register as status listeners (com.sun.star.frame.XStatusListener) at the dispatchers, and be notified whenever the functionality associated with the URL becomes enabled or disabled.",
      "For instance, the URL with the suffix moveToFirst is associated with moving the form to the first record, and it will be disabled in case the form is already positioned on the first record.",
      "",
      "**since**",
      "",
      "    OOo 3.3"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1form_1_1runtime_1_1XFormController.html",
    "items": {
      "methods": [
        {
          "name": "addActivateListener",
          "returns": "None",
          "desc": [
            "adds the specified listener to receive notifications whenever the activation state of the controller changes."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "x_form_controller_listener_i",
              "in"
            ]
          ]
        },
        {
          "name": "addChildController",
          "returns": "None",
          "desc": [
            "adds a controller to the list of child controllers"
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "ChildController",
              "XFormController",
              "in"
            ]
          ]
        },
        {
          "name": "removeActivateListener",
          "returns": "None",
          "desc": [
            "removes the specified listener from the list of components to receive notifications whenever the activation state of the controller changes."
          ],
          "raises": [],
          "args": [
            [
              "Listener",
              "x_form_controller_listener_i",
              "in"
            ]
          ]
        }
      ],
      "properties": [
        {
          "name": "Context",
          "returns": "x_form_controller_context_i",
          "desc": [
            "allows to delegate certain tasks to the context of the form controller"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "CurrentControl",
          "returns": "awt_x_control_i",
          "desc": [
            "provides access to the currently active control"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "FormOperations",
          "returns": "x_form_operations_i",
          "desc": [
            "denotes the instance which is used to implement operations on the form which the controller works for.",
            "",
            "This instance can be used, for instance, to determine the current state of certain form features."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "InteractionHandler",
          "returns": "task_x_interaction_handler_i",
          "desc": [
            "used (if not NULL) for user interactions triggered by the form controller."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}