{
  "id": "uno-ooo-parser",
  "version": "0.1.12",
  "timestamp": "2022-01-01 23:12:31+00:00",
  "name": "XChartDocument",
  "type": "interface",
  "namespace": "com.sun.star.chart2",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..frame.x_model",
        "XModel"
      ]
    ],
    "from_imports_typing": [
      [
        ".x_chart_type_manager",
        "XChartTypeManager"
      ],
      [
        ".x_diagram",
        "XDiagram"
      ],
      [
        ".data.x_data_provider",
        "XDataProvider"
      ],
      [
        "..beans.x_property_set",
        "XPropertySet"
      ]
    ],
    "quote": [
      "XDiagram",
      "XPropertySet",
      "XChartTypeManager",
      "XDataProvider"
    ],
    "typings": [],
    "requires_typing": true,
    "name": "XChartDocument",
    "imports": [],
    "namespace": "com.sun.star.chart2",
    "extends": [
      "com.sun.star.frame.XModel"
    ],
    "desc": [],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1XChartDocument.html",
    "items": {
      "methods": [
        {
          "name": "createDefaultChart",
          "returns": "None",
          "desc": [
            "Creates a default chart type for a brand-new chart object."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "createInternalDataProvider",
          "returns": "None",
          "desc": [
            "creates an internal com.sun.star.chart2.XDataProvider that is handled by the chart document itself.",
            "",
            "When the model is stored, the data provider will also be stored in a sub-storage."
          ],
          "raises": [
            "com.sun.star.util.CloseVetoException"
          ],
          "args": [
            [
              "bCloneExistingData",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "getChartTypeManager",
          "returns": "XChartTypeManager",
          "desc": [
            "retrieves the component that is able to create different chart type templates (components of type ChartTypeTemplate)"
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getDataProvider",
          "returns": "XDataProvider",
          "desc": [
            "Returns the currently set data provider.",
            "",
            "This may be an internal one, if createInternalDataProvider() has been called before, or an external one if XDataReceiver.attachDataProvider() has been called."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getFirstDiagram",
          "returns": "XDiagram",
          "desc": [
            "Notes: this is preliminary, we need an API that supports more than one diagram. The method name getDiagram exists in the css.chart API, so there is would be no way to chose either this or the other method from Basic (it would chose one or the other by random)."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPageBackground",
          "returns": "XPropertySet",
          "desc": [
            "Gives access to the page background appearance.",
            "",
            "The area's extent is equal to the document size. If you want to access properties of the background area of a single diagram (the part where data points are actually plotted in), you have to get its wall. You can get the wall by calling XDiagram.getWall()."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "hasInternalDataProvider",
          "returns": "bool",
          "desc": [
            "This is the case directly after createInternalDataProvider() has been called, but this is not necessary. The chart can also create an internal data provider by other means, e.g. a call to com.sun.star.frame.XModel.initNew()."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setChartTypeManager",
          "returns": "None",
          "desc": [
            "sets a new component that is able to create different chart type templates (components of type ChartTypeTemplate)"
          ],
          "raises": [],
          "args": [
            [
              "xNewManager",
              "XChartTypeManager",
              "in"
            ]
          ]
        },
        {
          "name": "setFirstDiagram",
          "returns": "None",
          "desc": [
            "Notes: this is preliminary, we need an API that supports more than one diagram. The method name setDiagram exists in the css.chart API, so there is would be no way to chose either this or the other method from Basic (it would chose one or the other by random)."
          ],
          "raises": [],
          "args": [
            [
              "xDiagram",
              "XDiagram",
              "in"
            ]
          ]
        }
      ]
    }
  }
}