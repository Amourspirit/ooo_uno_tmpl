{
  "id": "uno-ooo-parser",
  "version": "0.1.17",
  "libre_office_ver": "7.2",
  "name": "XDatabaseDataProvider",
  "type": "interface",
  "namespace": "com.sun.star.chart2.data",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "...beans.x_property_set",
        "XPropertySet",
        "beans_x_property_set_i"
      ],
      [
        ".x_data_provider",
        "XDataProvider",
        "x_data_provider_i"
      ],
      [
        ".x_range_xml_conversion",
        "XRangeXMLConversion",
        "x_range_xml_conversion_i"
      ],
      [
        "...lang.x_component",
        "XComponent",
        "lang_x_component_i"
      ],
      [
        "...lang.x_initialization",
        "XInitialization",
        "lang_x_initialization_i"
      ],
      [
        "...sdbc.x_parameters",
        "XParameters",
        "sdbc_x_parameters_i"
      ],
      [
        "...sdbc.x_row_set",
        "XRowSet",
        "sdbc_x_row_set_i"
      ]
    ],
    "from_imports_typing": [
      [
        "...sdbc.x_connection",
        "XConnection",
        "sdbc_x_connection_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.beans.XPropertySet": "beans_x_property_set_i",
      "com.sun.star.chart2.data.XDataProvider": "x_data_provider_i",
      "com.sun.star.chart2.data.XRangeXMLConversion": "x_range_xml_conversion_i",
      "com.sun.star.lang.XComponent": "lang_x_component_i",
      "com.sun.star.lang.XInitialization": "lang_x_initialization_i",
      "com.sun.star.sdbc.XParameters": "sdbc_x_parameters_i",
      "com.sun.star.sdbc.XRowSet": "sdbc_x_row_set_i"
    },
    "quote": [
      "sdbc_x_connection_i",
      "typing.List[str]"
    ],
    "typings": [
      "typing.List[str]"
    ],
    "requires_typing": true,
    "name": "XDatabaseDataProvider",
    "imports": [],
    "namespace": "com.sun.star.chart2.data",
    "extends": [
      "com.sun.star.chart2.data.XDataProvider",
      "com.sun.star.chart2.data.XRangeXMLConversion",
      "com.sun.star.lang.XInitialization",
      "com.sun.star.lang.XComponent",
      "com.sun.star.beans.XPropertySet",
      "com.sun.star.sdbc.XParameters",
      "com.sun.star.sdbc.XRowSet"
    ],
    "desc": [
      "identifies a XDataProvider for result sets."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1chart2_1_1data_1_1XDatabaseDataProvider.html",
    "items": {
      "types": [
        {
          "name": "DetailFields",
          "returns": "typing.List[str]",
          "desc": [
            "is used for subreports and contains the names of the columns of the subreport which are related to the master fields of the parent report.",
            "",
            "Entries in this sequence can either denote column names in the sub report, or parameter names.",
            "For instance, you could base the report on the SQL statement SELECT * FROM invoices WHERE cust_ref = :cid, and add cid to the DetailFields property. In this case, the parameter will be filled from the corresponding master field.",
            "Alternatively, you could simply base your report on the table invoices, and add the column name cust_ref to the DetailFields. In this case, and implicit filter clause WHERE cust_ref = :<new_param_name> will be created, and the artificial parameter will be filled from the corresponding master field.",
            "If a string in this property denotes both a column name and a parameter name, it is undefined which way it is interpreted, but implementations of the service are required to either decide for the parameter or the column, and proceed as usual.",
            "",
            "The columns specified herein typically represent a part of the primary key fields or their aliases of the detail report.",
            "",
            "If the report is no sub report (e.g. its parent is not a report itself), this property is not evaluated."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "MasterFields",
          "returns": "typing.List[str]",
          "desc": [
            "is used for subreports and contains the names of columns of the parent report.",
            "",
            "These columns are typically the foreign key fields of the parent report. The values of these columns are used to identify the data for the subreport. Each time the parent report changes its current row, the subreport requeries it's data based on the values of the master fields.",
            "",
            "If the report is no sub report (e.g. its parent is not a report itself), this property is not evaluated."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ],
      "properties": [
        {
          "name": "ActiveConnection",
          "returns": "sdbc_x_connection_i",
          "desc": [
            "specifies the active connection which is used to create the resulting report."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "ApplyFilter",
          "returns": "bool",
          "desc": [
            "indicates whether the filter should be applied or not, default is FALSE."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Command",
          "returns": "str",
          "desc": [
            "is the command which should be executed, the type of command depends on the CommandType.",
            "",
            "In case of a CommandType of CommandType.COMMAND, means in case the Command specifies an SQL statement, the inherited com.sun.star.sdbc.RowSet.EscapeProcessing becomes relevant:",
            "It then can be to used to specify whether the SQL statement should be analyzed on the client side before sending it to the database server.",
            "The default value for com.sun.star.sdbc.RowSet.EscapeProcessing is TRUE. By switching it to FALSE, you can pass backend-specific SQL statements, which are not standard SQL, to your database."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "CommandType",
          "returns": "int",
          "desc": [
            "specifies the type of the command to be executed to retrieve a result set.",
            "",
            "Command needs to be interpreted depending on the value of this property.",
            "",
            "This property is only meaningful together with the Command property, thus either both or none of them are present."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "DataSourceName",
          "returns": "str",
          "desc": [
            "is the name of the data source to use, this could be a named data source or the URL of a data access component."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "EscapeProcessing",
          "returns": "bool",
          "desc": [
            "specifies if the Command should be analyzed on the client side before sending it to the database server.",
            "",
            "The default value of this property is TRUE. By switching it to FALSE, you can pass backend-specific SQL statements, which are not standard SQL, to your database.",
            "",
            "This property is usually present together with the Command and CommandType properties, and is evaluated if and only if CommandType equals CommandType.COMMAND."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Filter",
          "returns": "str",
          "desc": [
            "specifies an additional filter to optionally use.",
            "",
            "The Filter string has to form a SQL WHERE-clause, without the WHERE-string itself.",
            "",
            "If a DataSourceName, Command and CommandType are specified, a RowSet can be created with this information. If the results provided by the row set are to be additionally filtered, the Filter property can be used.",
            "",
            "Note that the Filter property does not make sense if a resultSet has been specified in the DataAccessDescriptor."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "GroupBy",
          "returns": "str",
          "desc": [
            "additional group by for the row set"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "HavingClause",
          "returns": "str",
          "desc": [
            "additional having clause for the row set"
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "Order",
          "returns": "str",
          "desc": [
            "is an additional sort order definition for a row set."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "RowLimit",
          "returns": "int",
          "desc": [
            "specifies the maximal count of rows which should be fetched.",
            "",
            "A value of zero implies that no limit exists."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}