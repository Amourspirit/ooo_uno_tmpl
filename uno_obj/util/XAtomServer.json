{
  "id": "uno-ooo-parser",
  "version": "0.1.6",
  "timestamp": "2021-12-26 00:04:58+00:00",
  "name": "XAtomServer",
  "type": "interface",
  "namespace": "com.sun.star.util",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        "..uno.x_interface",
        "XInterface"
      ]
    ],
    "from_imports_typing": [
      [
        ".atom_description",
        "AtomDescription"
      ]
    ],
    "quote": [
      "typing.List[typing.List[AtomDescription]]",
      "typing.List[AtomDescription]",
      "typing.List[str]"
    ],
    "typings": [
      "typing.List[typing.List[AtomDescription]]",
      "typing.List[AtomDescription]",
      "typing.List[str]"
    ],
    "name": "XAtomServer",
    "imports": [],
    "namespace": "com.sun.star.util",
    "extends": [
      "com.sun.star.uno.XInterface"
    ],
    "desc": [
      "an interface to map between strings and ids",
      "",
      "a note on atoms:\n Atoms are abbreviations for strings. When a string gets registered, it is assigned a numeric id so that said string can always be referred to by this id. This way strings have to be transported only once over remote connections. Valid ids are (in this implementation) non zero, signed 32 bit values. An atom of 0 means that the string in question is not registered",
      "",
      "Additionally there is the abstraction of atom class:\n Atoms are grouped into classes, so that an id can be assigned to multiple strings, depending on the class context. The main advantage of this is that atoms in one class may be kept to small numbers, so that bandwidth can be reduced by sending the atoms only as 16 bit values. Note that it is up to the user in this case to handle overflows."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1util_1_1XAtomServer.html",
    "items": {
      "methods": [
        {
          "name": "getAtom",
          "returns": "int",
          "desc": [
            "registers or searches for a string"
          ],
          "raises": [],
          "args": [
            [
              "atomClass",
              "int",
              "in"
            ],
            [
              "description",
              "str",
              "in"
            ],
            [
              "create",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "getAtomDescriptions",
          "returns": "typing.List[str]",
          "desc": [
            "returns the strings for an arbitrary amount of atoms of multiple classes"
          ],
          "raises": [],
          "args": [
            [
              "atoms",
              "typing.List[AtomClassRequest]",
              "in"
            ]
          ]
        },
        {
          "name": "getClass",
          "returns": "typing.List[AtomDescription]",
          "desc": [
            "returns a whole atom class"
          ],
          "raises": [],
          "args": [
            [
              "atomClass",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getClasses",
          "returns": "typing.List[typing.List[AtomDescription]]",
          "desc": [
            "returns multiple atom classes"
          ],
          "raises": [],
          "args": [
            [
              "atomClasses",
              "typing.List[int]",
              "in"
            ]
          ]
        },
        {
          "name": "getRecentAtoms",
          "returns": "typing.List[AtomDescription]",
          "desc": [
            "returns the atoms that have been registered to a class after an already known atom",
            "",
            "Hint to implementor: using ascending atoms is the easiest way to decide, which atoms are recent."
          ],
          "raises": [],
          "args": [
            [
              "atomClass",
              "int",
              "in"
            ],
            [
              "atom",
              "int",
              "in"
            ]
          ]
        }
      ]
    }
  }
}