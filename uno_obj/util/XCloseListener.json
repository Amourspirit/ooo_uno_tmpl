{
  "id": "uno-ooo-parser",
  "version": "0.1.12",
  "timestamp": "2022-01-01 23:12:38+00:00",
  "name": "XCloseListener",
  "type": "interface",
  "namespace": "com.sun.star.util",
  "parser_args": {
    "sort": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        "..lang.x_event_listener",
        "XEventListener"
      ]
    ],
    "from_imports_typing": [
      [
        "..lang.event_object",
        "EventObject"
      ]
    ],
    "quote": [
      "EventObject"
    ],
    "typings": [],
    "requires_typing": true,
    "name": "XCloseListener",
    "imports": [],
    "namespace": "com.sun.star.util",
    "extends": [
      "com.sun.star.lang.XEventListener"
    ],
    "desc": [
      "makes it possible to receive events when an object is called for closing",
      "",
      "Such close events are broadcasted by a XCloseBroadcaster if somewhere tries to close it by calling XCloseable.close(). Listener can:",
      "",
      "If an event com.sun.star.lang.XEventListener.disposing() occurred, nobody called XCloseable.close() on listened object before. Then it's not allowed to break this request - it must be accepted!"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1util_1_1XCloseListener.html",
    "items": {
      "methods": [
        {
          "name": "notifyClosing",
          "returns": "None",
          "desc": [
            "is called when the listened object is closed really",
            "",
            "Now the listened object is closed really. Listener has to accept that; should deregister himself and release all references to it. It's not allowed nor possible to disagree with that by throwing any exception.",
            "",
            "If the event com.sun.star.lang.XEventListener.disposing() occurred before it must be accepted too. There exist no chance for a disagreement any more."
          ],
          "raises": [],
          "args": [
            [
              "Source",
              "EventObject",
              "in"
            ]
          ]
        },
        {
          "name": "queryClosing",
          "returns": "None",
          "desc": [
            "is called when somewhere tries to close listened object",
            "",
            "Is called before XCloseListener.notifyClosing(). Listener has the chance to break that by throwing a CloseVetoException. This exception must be passed to the original caller of XCloseable.close() without any interaction.",
            "",
            "The parameter GetsOwnership regulate who has to try to close the listened object again, if this listener disagree with the request by throwing the exception. If it's set to FALSE the original caller of XCloseable.close() will be the owner in every case. It's not allowed to call close() from this listener then. If it's set to TRUE this listener will be the new owner if he throw the exception, otherwise not! If his still running processes will be finished he must call close() on listened object again then.",
            "",
            "If this listener doesn't disagree with th close request it depends from his internal implementation if he deregister himself at the listened object. But normally this must be done in XCloseListener.notifyClosing()."
          ],
          "raises": [
            "CloseVetoException"
          ],
          "args": [
            [
              "Source",
              "EventObject",
              "in"
            ],
            [
              "GetsOwnership",
              "bool",
              "in"
            ]
          ]
        }
      ]
    }
  }
}