{
  "id": "uno-ooo-parser",
  "version": "0.1.5",
  "timestamp": "2021-12-24 00:45:31+00:00",
  "name": "XRepository",
  "type": "interface",
  "namespace": "com.sun.star.rdf",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [],
    "from_imports_typing": [
      [
        "..container.x_enumeration",
        "XEnumeration"
      ],
      [
        ".xuri",
        "XURI"
      ]
    ],
    "name": "XRepository",
    "imports": [],
    "namespace": "com.sun.star.rdf",
    "extends": [],
    "desc": [
      "provides access to a set of named RDF graphs.",
      "",
      "A repository for storing information according to the data model of the Resource Description Framework. This interface may be used e.g. for repositories that correspond to a loaded ODF document, or for repositories that are backed by some kind of database.",
      "",
      "The RDF triples are stored as a set of named RDF graphs. Importing and exporting files in the RDF/XML format is supported. Support for other file formats is optional. Support for querying the repository with the SPARQL query language is provided.",
      "",
      "**since**",
      "",
      "    OOo 3.2"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1rdf_1_1XRepository.html",
    "items": {
      "methods": [
        {
          "name": "createBlankNode",
          "returns": "object",
          "desc": [
            "creates a fresh unique blank node."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "createGraph",
          "returns": "object",
          "desc": [
            "creates a graph with the given name.",
            "",
            "The name must be unique within the repository."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException,"
          ],
          "args": []
        },
        {
          "name": "destroyGraph",
          "returns": "None",
          "desc": [
            "destroys the graph with the given name, and removes it from the repository.",
            "",
            "This invalidates any instances of XNamedGraph for the argument."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException,"
          ],
          "args": []
        },
        {
          "name": "exportGraph",
          "returns": "None",
          "desc": [
            "exports a named graph from the repository.",
            "",
            "Implementations must support RDF/XML format. Support for other RDF formats is optional. If the format is not supported by the implementation, an com.sun.star.datatransfer.UnsupportedFlavorException is raised."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException,"
          ],
          "args": []
        },
        {
          "name": "getGraph",
          "returns": "object",
          "desc": [
            "gets a graph by its name."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException,"
          ],
          "args": []
        },
        {
          "name": "getGraphNames",
          "returns": "'typing.List[XURI]'",
          "desc": [
            "gets the names of all the graphs in the repository."
          ],
          "raises": [
            "RepositoryException"
          ],
          "args": []
        },
        {
          "name": "getStatements",
          "returns": "XEnumeration",
          "desc": [
            "gets matching RDF statements from the repository.",
            "",
            "Any parameter may be NULL, which acts as a wildcard. For example, to get all statements about myURI: getStatements(myURI, null, null)"
          ],
          "raises": [
            "RepositoryException"
          ],
          "args": []
        },
        {
          "name": "importGraph",
          "returns": "object",
          "desc": [
            "imports a named graph into the repository.",
            "",
            "Implementations must support RDF/XML format. Support for other RDF formats is optional. If the format is not supported by the implementation, an com.sun.star.datatransfer.UnsupportedFlavorException is raised. If the format requires use of a BaseURI, but none is given, an com.sun.star.lang.IllegalArgumentException is raised."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException,"
          ],
          "args": []
        },
        {
          "name": "queryAsk",
          "returns": "bool",
          "desc": [
            "executes a SPARQL \\\"ASK\\\" query.",
            "",
            "This method runs a SPARQL query that computes a boolean, i.e., a query beginning with \\\"ASK\\\"."
          ],
          "raises": [
            "QueryException,"
          ],
          "args": []
        },
        {
          "name": "queryConstruct",
          "returns": "XEnumeration",
          "desc": [
            "executes a SPARQL \\\"CONSTRUCT\\\" query.",
            "",
            "This method runs a SPARQL query that constructs a result graph, i.e., a query beginning with \\\"CONSTRUCT\\\"."
          ],
          "raises": [
            "QueryException,"
          ],
          "args": []
        },
        {
          "name": "querySelect",
          "returns": "object",
          "desc": [
            "executes a SPARQL \\\"SELECT\\\" query.",
            "",
            "This method runs a SPARQL query that returns a list of variable bindings, i.e., a query beginning with \\\"SELECT\\\". The result is basically a (rectangular) table with labeled columns, where individual cells may be NULL."
          ],
          "raises": [
            "QueryException,"
          ],
          "args": []
        }
      ]
    }
  }
}