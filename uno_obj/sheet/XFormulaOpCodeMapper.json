{
  "id": "uno-ooo-parser",
  "version": "0.1.8",
  "timestamp": "2021-12-27 19:32:14+00:00",
  "name": "XFormulaOpCodeMapper",
  "type": "interface",
  "namespace": "com.sun.star.sheet",
  "parser_args": {
    "sort": true
  },
  "writer_args": {},
  "data": {
    "from_imports": [
      [
        ".formula_op_code_mapper",
        "FormulaOpCodeMapper"
      ]
    ],
    "from_imports_typing": [
      [
        ".formula_op_code_map_entry",
        "FormulaOpCodeMapEntry"
      ],
      [
        ".formula_token",
        "FormulaToken"
      ]
    ],
    "quote": [
      "typing.List[FormulaOpCodeMapEntry]",
      "typing.List[FormulaToken]",
      "typing.List[str]"
    ],
    "typings": [
      "typing.List[FormulaOpCodeMapEntry]",
      "typing.List[FormulaToken]",
      "typing.List[str]"
    ],
    "requires_typing": true,
    "name": "XFormulaOpCodeMapper",
    "imports": [],
    "namespace": "com.sun.star.sheet",
    "extends": [
      "com.sun.star.sheet.FormulaOpCodeMapper"
    ],
    "desc": [
      "gives access to spreadsheet compiler token interns."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sheet_1_1XFormulaOpCodeMapper.html",
    "items": {
      "methods": [
        {
          "name": "getAvailableMappings",
          "returns": "typing.List[FormulaOpCodeMapEntry]",
          "desc": [
            "returns a sequence of map entries for all available elements of a given formula language.",
            "",
            "Each element of the formula language in parameter Language is mapped to a FormulaToken containing the internal OpCode used by the spreadsheet application in FormulaToken.OpCode and by contract maybe additional information in FormulaToken.Data. See getMappings() for more details."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "Language",
              "int",
              "in"
            ],
            [
              "Groups",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getMappings",
          "returns": "typing.List[FormulaToken]",
          "desc": [
            "returns a sequence of tokens matching the input sequence of strings in order.",
            "",
            "Each string element in parameter Names according to the formula language in parameter Language is mapped to a FormulaToken containing the internal OpCode used by the spreadsheet application in FormulaToken.OpCode and by contract maybe additional information in FormulaToken.Data.",
            "",
            "The order of the FormulaToken sequence returned matches the input order of the string sequence.",
            "",
            "An unknown Name string gets the OpCode value of OpCodeUnknown assigned.",
            "",
            "Additional information in FormulaToken.Data is returned for:"
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "Names",
              "typing.List[str]",
              "in"
            ],
            [
              "Language",
              "int",
              "in"
            ]
          ]
        }
      ],
      "properties": [
        {
          "name": "OpCodeExternal",
          "returns": "int",
          "desc": [
            "OpCode value used for external Add-In functions.",
            "",
            "Needed to be able to identify which of the function names map to an Add-In implementation where this OpCode is used in the returned mapping and the programmatic name is available as additional information."
          ],
          "raises_get": "",
          "raises_set": ""
        },
        {
          "name": "OpCodeUnknown",
          "returns": "int",
          "desc": [
            "OpCode value used for unknown functions.",
            "",
            "Used to identify which of the function names queried with getMappings() are unknown to the implementation."
          ],
          "raises_get": "",
          "raises_set": ""
        }
      ]
    }
  }
}