{
  "id": "uno-ooo-parser",
  "version": "0.1.15",
  "libre_office_ver": "7.2",
  "name": "XDataPilotTable2",
  "type": "interface",
  "namespace": "com.sun.star.sheet",
  "parser_args": {
    "sort": true,
    "long_names": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "from_imports": [
      [
        ".x_data_pilot_table",
        "XDataPilotTable",
        "x_data_pilot_table_i"
      ]
    ],
    "from_imports_typing": [
      [
        ".data_pilot_table_position_data",
        "DataPilotTablePositionData",
        "data_pilot_table_position_data_i"
      ],
      [
        "..table.cell_address",
        "CellAddress",
        "table_cell_address_i"
      ],
      [
        "..table.cell_range_address",
        "CellRangeAddress",
        "table_cell_range_address_i"
      ]
    ],
    "extends_map": {
      "com.sun.star.sheet.XDataPilotTable": "x_data_pilot_table_i"
    },
    "quote": [
      "data_pilot_table_position_data_i",
      "table_cell_address_i",
      "table_cell_range_address_i",
      "typing.List[typing.List[object]]"
    ],
    "typings": [
      "typing.List[typing.List[object]]"
    ],
    "requires_typing": true,
    "name": "XDataPilotTable2",
    "imports": [],
    "namespace": "com.sun.star.sheet",
    "extends": [
      "com.sun.star.sheet.XDataPilotTable"
    ],
    "desc": [
      "additional methods to extend com.sun.star.sheet.XDataPilotTable.",
      "",
      "com.sun.star.sheet.XDataPilotTable2 extends the old com.sun.star.sheet.XDataPilotTable interface with additional methods.",
      "",
      "**since**",
      "",
      "    OOo 3.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/interfacecom_1_1sun_1_1star_1_1sheet_1_1XDataPilotTable2.html",
    "items": {
      "methods": [
        {
          "name": "getDrillDownData",
          "returns": "typing.List[typing.List[object]]",
          "desc": [
            "When the address of a cell within the result area is given, XDataPilotTable2.getDrillDownData() returns its drill-down output table that includes only those rows that contribute to the value of that cell."
          ],
          "raises": [],
          "args": [
            [
              "aAddr",
              "table_cell_address_i",
              "in"
            ]
          ]
        },
        {
          "name": "getOutputRangeByType",
          "returns": "table_cell_range_address_i",
          "desc": [
            "This method returns a different output range of a DataPilot table per specified output range type."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "nType",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getPositionData",
          "returns": "data_pilot_table_position_data_i",
          "desc": [
            "Given a cell address, it returns the information about that cell.",
            "",
            "The type of information returned depends upon whether the cell is within the result area or column/row header area."
          ],
          "raises": [],
          "args": [
            [
              "aAddr",
              "table_cell_address_i",
              "in"
            ]
          ]
        },
        {
          "name": "insertDrillDownSheet",
          "returns": "None",
          "desc": [
            "This method inserts a new sheet to display the drill-down data for a specified result cell. A drill-down data for a result cell consists of a subset of rows from the original data source that contribute to the value displayed in that cell.",
            "",
            "The new sheet is always inserted to the immediate left of the current sheet where the DataPilot table is. Note that when the drill-down data is empty, no new sheet is inserted."
          ],
          "raises": [],
          "args": [
            [
              "aAddr",
              "table_cell_address_i",
              "in"
            ]
          ]
        }
      ]
    }
  }
}