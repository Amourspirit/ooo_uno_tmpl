{
  "id": "uno-ooo-parser",
  "version": "0.1.19",
  "libre_office_ver": "7.2",
  "name": "TextCursor",
  "type": "service",
  "namespace": "com.sun.star.text",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": false,
    "from_imports": [
      [
        "..style.paragraph_properties_complex",
        "ParagraphPropertiesComplex",
        "ParagraphPropertiesComplex_91de11d4"
      ],
      [
        "..style.character_properties",
        "CharacterProperties",
        "CharacterProperties_1d4f0ef3"
      ],
      [
        "..beans.x_property_set",
        "XPropertySet",
        "XPropertySet_bc180bfa"
      ],
      [
        "..container.x_content_enumeration_access",
        "XContentEnumerationAccess",
        "XContentEnumerationAccess_c71012d7"
      ],
      [
        "..style.character_properties_asian",
        "CharacterPropertiesAsian",
        "CharacterPropertiesAsian_6d8a10df"
      ],
      [
        "..beans.x_property_state",
        "XPropertyState",
        "XPropertyState_d55c0ccf"
      ],
      [
        "..style.paragraph_properties_asian",
        "ParagraphPropertiesAsian",
        "ParagraphPropertiesAsian_6e8c10e8"
      ],
      [
        "..style.character_properties_complex",
        "CharacterPropertiesComplex",
        "CharacterPropertiesComplex_90ca11cb"
      ],
      [
        "..style.paragraph_properties",
        "ParagraphProperties",
        "ParagraphProperties_1e240efc"
      ],
      [
        ".x_text_cursor",
        "XTextCursor",
        "XTextCursor_a60c0b48"
      ]
    ],
    "from_imports_typing": [
      [
        "..beans.x_vetoable_change_listener",
        "XVetoableChangeListener",
        "XVetoableChangeListener_55a41027"
      ],
      [
        "..beans.x_property_change_listener",
        "XPropertyChangeListener",
        "XPropertyChangeListener_58e4105a"
      ],
      [
        "..beans.property_state",
        "PropertyState",
        "PropertyState_c97b0c77"
      ],
      [
        "..beans.property_value",
        "PropertyValue",
        "PropertyValue_c9610c73"
      ],
      [
        "..beans.x_property_set_info",
        "XPropertySetInfo",
        "XPropertySetInfo_efa90d86"
      ]
    ],
    "extends_map": {
      "com.sun.star.style.ParagraphPropertiesComplex": "ParagraphPropertiesComplex_91de11d4",
      "com.sun.star.style.CharacterProperties": "CharacterProperties_1d4f0ef3",
      "com.sun.star.beans.XPropertySet": "XPropertySet_bc180bfa",
      "com.sun.star.container.XContentEnumerationAccess": "XContentEnumerationAccess_c71012d7",
      "com.sun.star.style.CharacterPropertiesAsian": "CharacterPropertiesAsian_6d8a10df",
      "com.sun.star.beans.XPropertyState": "XPropertyState_d55c0ccf",
      "com.sun.star.style.ParagraphPropertiesAsian": "ParagraphPropertiesAsian_6e8c10e8",
      "com.sun.star.style.CharacterPropertiesComplex": "CharacterPropertiesComplex_90ca11cb",
      "com.sun.star.style.ParagraphProperties": "ParagraphProperties_1e240efc",
      "com.sun.star.text.XTextCursor": "XTextCursor_a60c0b48"
    },
    "quote": [
      "typing.List[PropertyState_c97b0c77]",
      "typing.List[object]",
      "PropertyState_c97b0c77",
      "XPropertySetInfo_efa90d86",
      "XTextRange_9a910ab7",
      "typing.List[str]",
      "typing.List[PropertyValue_c9610c73]",
      "XVetoableChangeListener_55a41027",
      "XPropertyChangeListener_58e4105a"
    ],
    "typings": [
      "typing.List[PropertyState_c97b0c77]",
      "typing.List[object]",
      "PropertyState_c97b0c77",
      "XPropertySetInfo_efa90d86",
      "XTextRange_9a910ab7",
      "typing.List[str]",
      "typing.List[PropertyValue_c9610c73]",
      "XVetoableChangeListener_55a41027",
      "XPropertyChangeListener_58e4105a"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [],
      "typing": [
        "com.sun.star.beans.XVetoableChangeListener",
        "com.sun.star.beans.XPropertyChangeListener",
        "com.sun.star.beans.PropertyState",
        "com.sun.star.beans.PropertyValue",
        "com.sun.star.beans.XPropertySetInfo"
      ]
    },
    "name": "TextCursor",
    "imports": [],
    "namespace": "com.sun.star.text",
    "extends": [
      "com.sun.star.style.ParagraphPropertiesComplex",
      "com.sun.star.style.CharacterProperties",
      "com.sun.star.beans.XPropertySet",
      "com.sun.star.container.XContentEnumerationAccess",
      "com.sun.star.style.CharacterPropertiesAsian",
      "com.sun.star.beans.XPropertyState",
      "com.sun.star.style.ParagraphPropertiesAsian",
      "com.sun.star.style.CharacterPropertiesComplex",
      "com.sun.star.style.ParagraphProperties",
      "com.sun.star.text.XTextCursor"
    ],
    "desc": [
      "A TextCursor is a TextRange which can be moved within a Text object."
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1text_1_1TextCursor.html",
    "items": {
      "methods": [{
          "name": "insertDocumentFromURL",
          "returns": "None",
          "desc": [
            "inserts the document that is specified by the URL."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.io.IOException"
          ],
          "args": [
            [
              "aURL",
              "str",
              "in"
            ],
            [
              "aOptions",
              "typing.List[PropertyValue_c9610c73]",
              "in"
            ]
          ]
        },
        {
          "name": "gotoEndOfSentence",
          "returns": "bool",
          "desc": [
            "moves the cursor to the end of the current sentence."
          ],
          "raises": [],
          "args": [
            [
              "Expand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoNextSentence",
          "returns": "bool",
          "desc": [
            "moves the cursor to the start of the next sentence."
          ],
          "raises": [],
          "args": [
            [
              "Expand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoPreviousSentence",
          "returns": "bool",
          "desc": [
            "moves the cursor to the start of the previous sentence."
          ],
          "raises": [],
          "args": [
            [
              "Expand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoStartOfSentence",
          "returns": "bool",
          "desc": [
            "moves the cursor to the start of the current sentence."
          ],
          "raises": [],
          "args": [
            [
              "Expand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "isEndOfSentence",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the end of a sentence."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isStartOfSentence",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the start of a sentence."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "addPropertyChangeListener",
          "returns": "None",
          "desc": [
            "adds an XPropertyChangeListener to the specified property.",
            "",
            "An empty name (\\\"\\\") registers the listener to all bound properties. If the property is not bound, the behavior is not specified.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "aPropertyName",
              "str",
              "in"
            ],
            [
              "xListener",
              "XPropertyChangeListener_58e4105a",
              "in"
            ]
          ]
        },
        {
          "name": "addVetoableChangeListener",
          "returns": "None",
          "desc": [
            "adds an XVetoableChangeListener to the specified property with the name PropertyName.",
            "",
            "An empty name (\\\"\\\") registers the listener to all constrained properties. If the property is not constrained, the behavior is not specified."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ],
            [
              "aListener",
              "XVetoableChangeListener_55a41027",
              "in"
            ]
          ]
        },
        {
          "name": "getPropertySetInfo",
          "returns": "XPropertySetInfo_efa90d86",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "getPropertyValue",
          "returns": "object",
          "desc": [],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "removePropertyChangeListener",
          "returns": "None",
          "desc": [
            "removes an XPropertyChangeListener from the listener list.",
            "",
            "It is a \\\"noop\\\" if the listener is not registered.",
            "",
            "It is suggested to allow multiple registration of the same listener, thus for each time a listener is added, it has to be removed."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "aPropertyName",
              "str",
              "in"
            ],
            [
              "aListener",
              "XPropertyChangeListener_58e4105a",
              "in"
            ]
          ]
        },
        {
          "name": "removeVetoableChangeListener",
          "returns": "None",
          "desc": [
            "removes an XVetoableChangeListener from the listener list.",
            "",
            "It is a \\\"noop\\\" if the listener is not registered."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ],
            [
              "aListener",
              "XVetoableChangeListener_55a41027",
              "in"
            ]
          ]
        },
        {
          "name": "setPropertyValue",
          "returns": "None",
          "desc": [
            "sets the value of the property with the specified name.",
            "",
            "If it is a bound property the value will be changed before the change event is fired. If it is a constrained property a vetoable event is fired before the property value can be changed."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.beans.PropertyVetoException",
            "com.sun.star.lang.IllegalArgumentException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "aPropertyName",
              "str",
              "in"
            ],
            [
              "aValue",
              "object",
              "in"
            ]
          ]
        },
        {
          "name": "getPropertyDefault",
          "returns": "object",
          "desc": [
            "If no default exists, is not known or is void, then the return type is void."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "aPropertyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getPropertyState",
          "returns": "PropertyState_c97b0c77",
          "desc": [],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException"
          ],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getPropertyStates",
          "returns": "typing.List[PropertyState_c97b0c77]",
          "desc": [
            "The order of the states is correlating to the order of the given property names."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException"
          ],
          "args": [
            [
              "aPropertyName",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "setPropertyToDefault",
          "returns": "None",
          "desc": [
            "Sets the property to default value.",
            "",
            "The value depends on the implementation of this interface. If it is a bound property, you must change the value before the change events are fired. If it is a constrained property, you must fire the vetoable event before you change the property value."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException"
          ],
          "args": [
            [
              "PropertyName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "createSortDescriptor",
          "returns": "typing.List[PropertyValue_c9610c73]",
          "desc": [
            "The set of properties is specific to the type of object that implements this interface. Therefore they can usually be used only for objects of that same type."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "sort",
          "returns": "None",
          "desc": [
            "sorts the contents of the object according to the specified properties.",
            "",
            "The specified properties are usually the same or a subset of those obtained by calling createSortDescriptor() on the same type of object."
          ],
          "raises": [],
          "args": [
            [
              "xDescriptor",
              "typing.List[PropertyValue_c9610c73]",
              "in"
            ]
          ]
        },
        {
          "name": "gotoEndOfParagraph",
          "returns": "bool",
          "desc": [
            "moves the cursor to the end of the current paragraph."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoNextParagraph",
          "returns": "bool",
          "desc": [
            "moves the cursor to the next paragraph."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoPreviousParagraph",
          "returns": "bool",
          "desc": [
            "moves the cursor to the previous paragraph."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoStartOfParagraph",
          "returns": "bool",
          "desc": [
            "moves the cursor to the start of the current paragraph."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "isEndOfParagraph",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the end of a paragraph."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isStartOfParagraph",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the start of a paragraph."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "collapseToEnd",
          "returns": "None",
          "desc": [
            "sets the start of the position to the end."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "collapseToStart",
          "returns": "None",
          "desc": [
            "sets the end of the position to the start."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "goLeft",
          "returns": "bool",
          "desc": [
            "moves the cursor the specified number of characters to the left.",
            "",
            "Note: Even if the command was not completed successfully it may be completed partially. E.g. if it was required to move 5 characters but it is only possible to move 3 FALSE will be returned and the cursor moves only those 3 characters."
          ],
          "raises": [],
          "args": [
            [
              "nCount",
              "int",
              "in"
            ],
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "goRight",
          "returns": "bool",
          "desc": [
            "moves the cursor the specified number of characters to the right.",
            "",
            "Note: Even if the command was not completed successfully it may be completed partially. E.g. if it was required to move 5 characters but it is only possible to move 3 FALSE will be returned and the cursor moves only those 3 characters."
          ],
          "raises": [],
          "args": [
            [
              "nCount",
              "int",
              "in"
            ],
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoEnd",
          "returns": "None",
          "desc": [
            "moves the cursor to the end of the text."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoRange",
          "returns": "None",
          "desc": [
            "moves or expands the cursor to a specified TextRange."
          ],
          "raises": [],
          "args": [
            [
              "xRange",
              "XTextRange_9a910ab7",
              "in"
            ],
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoStart",
          "returns": "None",
          "desc": [
            "moves the cursor to the start of the text."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "isCollapsed",
          "returns": "bool",
          "desc": [
            "determines if the start and end positions are the same."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "gotoEndOfWord",
          "returns": "bool",
          "desc": [
            "moves the cursor to the end of the current word."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoNextWord",
          "returns": "bool",
          "desc": [
            "moves the cursor to the next word.",
            "",
            "Note: the function returning TRUE does not necessarily mean that the cursor is located at the next word, or any word at all! This may happen for example if it travels over empty paragraphs."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoPreviousWord",
          "returns": "bool",
          "desc": [
            "moves the cursor to the previous word.",
            "",
            "Note: the function returning TRUE does not necessarily mean that the cursor is located at the previous word, or any word at all! This may happen for example if it travels over empty paragraphs."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "gotoStartOfWord",
          "returns": "bool",
          "desc": [
            "moves the cursor to the start of the current word."
          ],
          "raises": [],
          "args": [
            [
              "bExpand",
              "bool",
              "in"
            ]
          ]
        },
        {
          "name": "isEndOfWord",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the end of a word."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "isStartOfWord",
          "returns": "bool",
          "desc": [
            "determines if the cursor is positioned at the start of a word."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getPropertyDefaults",
          "returns": "typing.List[object]",
          "desc": [
            "If no default exists, is not known, or is void, then the return type at the corresponding position in the sequence returned is void."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException",
            "com.sun.star.lang.WrappedTargetException"
          ],
          "args": [
            [
              "aPropertyNames",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "setAllPropertiesToDefault",
          "returns": "None",
          "desc": [
            "sets all properties to their default values.",
            "",
            "Each value depends on the implementation of this interface. If it is a bound property, you must change the value before the change events are fired. If it is a constrained property, you must fire the vetoable event before you change the property value."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setPropertiesToDefault",
          "returns": "None",
          "desc": [
            "sets the specified properties to their default values.",
            "",
            "Each value depends on the implementation of this interface. If it is a bound property, you must change the value before the change events are fired. If it is a constrained property, you must fire the vetoable event before you change the property value."
          ],
          "raises": [
            "com.sun.star.beans.UnknownPropertyException"
          ],
          "args": [
            [
              "aPropertyNames",
              "typing.List[str]",
              "in"
            ]
          ]
        }
      ]
    }
  }
}
