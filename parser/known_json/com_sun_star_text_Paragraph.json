{
  "id": "uno-ooo-parser",
  "version": "0.1.19",
  "libre_office_ver": "7.2",
  "name": "Paragraph",
  "type": "service",
  "namespace": "com.sun.star.text",
  "parser_args": {
    "sort": true,
    "long_names": true,
    "remove_parent_inherited": true
  },
  "writer_args": {
    "include_desc": true
  },
  "data": {
    "allow_db": false,
    "from_imports": [
      [
        "..style.character_properties",
        "CharacterProperties",
        "CharacterProperties_1d4f0ef3"
      ],
      [
        "..style.character_properties_asian",
        "CharacterPropertiesAsian",
        "CharacterPropertiesAsian_6d8a10df"
      ],
      [
        "..style.character_properties_complex",
        "CharacterPropertiesComplex",
        "CharacterPropertiesComplex_90ca11cb"
      ],
      [
        "..style.paragraph_properties",
        "ParagraphProperties",
        "ParagraphProperties_1e240efc"
      ],
      [
        "..style.paragraph_properties_asian",
        "ParagraphPropertiesAsian",
        "ParagraphPropertiesAsian_6e8c10e8"
      ],
      [
        "..style.paragraph_properties_complex",
        "ParagraphPropertiesComplex",
        "ParagraphPropertiesComplex_91de11d4"
      ],
      [
        ".text_table",
        "TextTable",
        "TextTable_90440a5a"
      ],
      [
        "..beans.x_property_set",
        "XPropertySet",
        "XPropertySet_bc180bfa"
      ],
      [
        "..beans.x_property_state",
        "XPropertyState",
        "XPropertyState_d55c0ccf"
      ],
      [
        "..beans.x_tolerant_multi_property_set",
        "XTolerantMultiPropertySet",
        "XTolerantMultiPropertySet_7bd4114e"
      ],
      [
        "..container.x_enumeration_access",
        "XEnumerationAccess",
        "XEnumerationAccess_4bac0ffc"
      ]
    ],
    "from_imports_typing": [
      [
        "..table.x_table_columns",
        "XTableColumns",
        "XTableColumns_c66d0c31"
      ],
      [
        "..table.x_table_rows",
        "XTableRows",
        "XTableRows_a37e0afb"
      ],
      [
        "..container.x_name_container",
        "XNameContainer",
        "XNameContainer_cb90e47"
      ],
      [
        ".text_content_anchor_type",
        "TextContentAnchorType",
        "TextContentAnchorType_2cbe0f4a"
      ],
      [
        ".wrap_text_mode",
        "WrapTextMode",
        "WrapTextMode_b1dd0b91"
      ],
      [
        ".x_text_table_cursor",
        "XTextTableCursor",
        "XTextTableCursor_e2f90d30"
      ],
      [
        "..beans.property_value",
        "PropertyValue",
        "PropertyValue_c9610c73"
      ],
      [
        "..table.x_cell",
        "XCell",
        "XCell_70d408e8"
      ]
    ],
    "extends_map": {
      "com.sun.star.style.CharacterProperties": "CharacterProperties_1d4f0ef3",
      "com.sun.star.style.CharacterPropertiesAsian": "CharacterPropertiesAsian_6d8a10df",
      "com.sun.star.style.CharacterPropertiesComplex": "CharacterPropertiesComplex_90ca11cb",
      "com.sun.star.style.ParagraphProperties": "ParagraphProperties_1e240efc",
      "com.sun.star.style.ParagraphPropertiesAsian": "ParagraphPropertiesAsian_6e8c10e8",
      "com.sun.star.style.ParagraphPropertiesComplex": "ParagraphPropertiesComplex_91de11d4",
      "com.sun.star.text.TextTable": "TextTable_90440a5a",
      "com.sun.star.beans.XPropertySet": "XPropertySet_bc180bfa",
      "com.sun.star.beans.XPropertyState": "XPropertyState_d55c0ccf",
      "com.sun.star.beans.XTolerantMultiPropertySet": "XTolerantMultiPropertySet_7bd4114e",
      "com.sun.star.container.XEnumerationAccess": "XEnumerationAccess_4bac0ffc"
    },
    "quote": [
      "XTableRows_a37e0afb",
      "typing.List[TextContentAnchorType_2cbe0f4a]",
      "typing.List[typing.List[object]]",
      "XTextTableCursor_e2f90d30",
      "typing.List[typing.List[float]]",
      "typing.List[PropertyValue_c9610c73]",
      "XTableColumns_c66d0c31",
      "typing.List[str]",
      "XNameContainer_cb90e47",
      "XCellRange",
      "XCell_70d408e8",
      "TextContentAnchorType_2cbe0f4a",
      "WrapTextMode_b1dd0b91"
    ],
    "typings": [
      "XTableRows_a37e0afb",
      "typing.List[TextContentAnchorType_2cbe0f4a]",
      "typing.List[typing.List[object]]",
      "XTextTableCursor_e2f90d30",
      "typing.List[typing.List[float]]",
      "typing.List[PropertyValue_c9610c73]",
      "XTableColumns_c66d0c31",
      "typing.List[str]",
      "XNameContainer_cb90e47",
      "XCellRange",
      "XCell_70d408e8",
      "TextContentAnchorType_2cbe0f4a",
      "WrapTextMode_b1dd0b91"
    ],
    "requires_typing": true,
    "full_imports": {
      "general": [
        "com.sun.star.text.XTextContent",
        "com.sun.star.uno.XInterface",
        "com.sun.star.chart.XChartData"
      ],
      "typing": [
        "com.sun.star.table.XTableColumns",
        "com.sun.star.table.XTableRows",
        "com.sun.star.container.XNameContainer",
        "com.sun.star.text.TextContentAnchorType",
        "com.sun.star.text.WrapTextMode",
        "com.sun.star.text.XTextTableCursor",
        "com.sun.star.beans.PropertyValue",
        "com.sun.star.table.XCell"
      ]
    },
    "name": "Paragraph",
    "imports": [],
    "namespace": "com.sun.star.text",
    "extends": [
      "com.sun.star.style.CharacterProperties",
      "com.sun.star.style.CharacterPropertiesAsian",
      "com.sun.star.style.CharacterPropertiesComplex",
      "com.sun.star.style.ParagraphProperties",
      "com.sun.star.style.ParagraphPropertiesAsian",
      "com.sun.star.style.ParagraphPropertiesComplex",
      "com.sun.star.text.TextTable",
      "com.sun.star.beans.XPropertySet",
      "com.sun.star.beans.XPropertyState",
      "com.sun.star.beans.XTolerantMultiPropertySet",
      "com.sun.star.container.XEnumerationAccess"
    ],
    "desc": [
      "is a piece of text which can take its own paragraph-specific attributes (technically, properties).",
      "",
      "**since**",
      "",
      "    OOo 2.0"
    ],
    "url": "https://api.libreoffice.org/docs/idl/ref/servicecom_1_1sun_1_1star_1_1text_1_1Paragraph.html",
    "items": {
      "types": [{
        "name": "AnchorTypes",
        "returns": "typing.List[TextContentAnchorType_2cbe0f4a]",
        "desc": [
          "contains the anchor type of the text content."
        ],
        "raises_get": "",
        "raises_set": ""
      }],
      "properties": [{
        "name": "AnchorTypes",
        "returns": "typing.List[TextContentAnchorType_2cbe0f4a]",
        "desc": [
          "contains the anchor type of the text content."
        ],
        "raises_get": "",
        "raises_set": ""
      }],
      "methods": [{
          "name": "getColumnDescriptions",
          "returns": "typing.List[str]",
          "desc": [
            "retrieves the description texts for all columns."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getData",
          "returns": "typing.List[typing.List[float]]",
          "desc": [
            "retrieves the numerical data as a nested sequence of values."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "getRowDescriptions",
          "returns": "typing.List[str]",
          "desc": [
            "retrieves the description texts for all rows."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setColumnDescriptions",
          "returns": "None",
          "desc": [
            "sets the description texts for all columns."
          ],
          "raises": [],
          "args": [
            [
              "aColumnDescriptions",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "setData",
          "returns": "None",
          "desc": [
            "sets the chart data as an array of numbers."
          ],
          "raises": [],
          "args": [
            [
              "aData",
              "typing.List[typing.List[float]]",
              "in"
            ]
          ]
        },
        {
          "name": "setRowDescriptions",
          "returns": "None",
          "desc": [
            "sets the description texts for all rows."
          ],
          "raises": [],
          "args": [
            [
              "aRowDescriptions",
              "typing.List[str]",
              "in"
            ]
          ]
        },
        {
          "name": "getElementType",
          "returns": "object",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "hasElements",
          "returns": "bool",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "getName",
          "returns": "str",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "setName",
          "returns": "None",
          "desc": [
            "sets the programmatic name of the object."
          ],
          "raises": [],
          "args": [
            [
              "aName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getDataArray",
          "returns": "typing.List[typing.List[object]]",
          "desc": [
            "gets an array from the contents of the cell range.",
            "",
            "Each element of the result contains a double or a string."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "setDataArray",
          "returns": "None",
          "desc": [
            "fills the cell range with values from an array.",
            "",
            "The size of the array must be the same as the size of the cell range. Each element of the array must contain a double or a string."
          ],
          "raises": [],
          "args": [
            [
              "aArray",
              "typing.List[typing.List[object]]",
              "in"
            ]
          ]
        },
        {
          "name": "autoFormat",
          "returns": "None",
          "desc": [
            "applies an AutoFormat to the cell range of the current context."
          ],
          "raises": [
            "com.sun.star.lang.IllegalArgumentException"
          ],
          "args": [
            [
              "aName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getCellByPosition",
          "returns": "XCell_70d408e8",
          "desc": [
            "Returns a single cell within the range."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            [
              "nColumn",
              "int",
              "in"
            ],
            [
              "nRow",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "getCellRangeByName",
          "returns": "XCellRange",
          "desc": [
            "Returns a sub-range of cells within the range.",
            "",
            "The sub-range is specified by its name. The format of the range name is dependent of the context of the table. In spreadsheets valid names may be \\\"A1:C5\\\" or \\\"$B$2\\\" or even defined names for cell ranges such as \\\"MySpecialCell\\\"."
          ],
          "raises": [],
          "args": [
            [
              "aRange",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getCellRangeByPosition",
          "returns": "XCellRange",
          "desc": [
            "Returns a sub-range of cells within the range."
          ],
          "raises": [
            "com.sun.star.lang.IndexOutOfBoundsException"
          ],
          "args": [
            [
              "nLeft",
              "int",
              "in"
            ],
            [
              "nTop",
              "int",
              "in"
            ],
            [
              "nRight",
              "int",
              "in"
            ],
            [
              "nBottom",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "createCursorByCellName",
          "returns": "XTextTableCursor_e2f90d30",
          "desc": [
            "creates a text table cursor and returns the XTextTableCursor interface.",
            "",
            "Initially the cursor is positioned in the cell with the specified name."
          ],
          "raises": [],
          "args": [
            [
              "aCellName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getCellByName",
          "returns": "XCell_70d408e8",
          "desc": [
            "Example: The cell in the 4th column and third row has the name \\\"D3\\\".",
            "",
            "In cells that are split, the naming convention is more complex. In this case the name is a concatenation of the former cell name (i.e. \\\"D3\\\") and the number of the new column and row index inside of the original table cell separated by dots. This is done recursively.",
            "",
            "Example: If the cell \\\"D3\\\" is horizontally split, it now contains the cells \\\"D3.1.1\\\" and \\\"D3.1.2\\\""
          ],
          "raises": [],
          "args": [
            [
              "aCellName",
              "str",
              "in"
            ]
          ]
        },
        {
          "name": "getCellNames",
          "returns": "typing.List[str]",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "getColumns",
          "returns": "XTableColumns_c66d0c31",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "getRows",
          "returns": "XTableRows_a37e0afb",
          "desc": [],
          "raises": [],
          "args": []
        },
        {
          "name": "initialize",
          "returns": "None",
          "desc": [
            "determines the numbers of rows and columns of the text table.",
            "",
            "This method must be called after the object is created and before the object is insert or attached elsewhere."
          ],
          "raises": [],
          "args": [
            [
              "nRows",
              "int",
              "in"
            ],
            [
              "nColumns",
              "int",
              "in"
            ]
          ]
        },
        {
          "name": "createSortDescriptor",
          "returns": "typing.List[PropertyValue_c9610c73]",
          "desc": [
            "The set of properties is specific to the type of object that implements this interface. Therefore they can usually be used only for objects of that same type."
          ],
          "raises": [],
          "args": []
        },
        {
          "name": "sort",
          "returns": "None",
          "desc": [
            "sorts the contents of the object according to the specified properties.",
            "",
            "The specified properties are usually the same or a subset of those obtained by calling createSortDescriptor() on the same type of object."
          ],
          "raises": [],
          "args": [
            [
              "xDescriptor",
              "typing.List[PropertyValue_c9610c73]",
              "in"
            ]
          ]
        }
      ]
    }
  }
}
