#from _base_ex import BaseEx
#import re
#extends BaseEx
## see: https://cheetahtemplate.org/users_guide/inheritanceEtc.html#implements
#implements respond
$self.init_data()#slurp
#attr $name = ""
#attr $namespace = ""
#attr $fullname = ""
#attr $sort = False
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $include_desc = True
#attr $desc = []
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $extends_map = {}
#attr $imports = []
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $attribs = {}
$self.load_data()#slurp
## main Template
#set $re_underscore_hex = r"(_[0-9A-Fa-f]*)"
#set $safe_name = $self.get_safe_word($name)
## properties list of dict that combines properties and types with types first
#set $properties = $self.get_properties_all()
#set $is_method = 'methods' in $attribs
#set $is_properties = len($properties) > 0
#set $sorted = $self.get_sorted_names()
##set $is_types = 'types' in $attribs
##set $abc_imports = $self.get_abstract_imports([$is_method],[$is_properties, $is_types])
#set $abc_imports = []
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Exception Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
#if len($properties) > 0
from ooo.oenv import UNO_NONE
#end if
#if $requires_typing or len($sorted) > 0
import typing
#end if
#for $imp in $imports
import $imp
#end for
#if len($abc_imports) > 0
from abc import $self.lst_to_str($abc_imports)
#end if
#for $imp in $from_imports
$self.get_from_import($name, $imp)
#end for
#if len($from_imports_typing) > 0
##if typing.TYPE_CHECKING:
#for $imp in $from_imports_typing
$self.get_from_import($name, $imp)
#end for
#end if

#if $allow_db:
class ${safe_name}($self.get_class_inherits_from_db())$self.get_class_end()
#else
class ${safe_name}($self.get_class_inherits($safe_name, $inherits))$self.get_class_end()
#end if
#if $include_desc
    """
    Exception Class

    #for $line in $self.line_gen($desc)
    $line
    #end for
    #if $link:

    See Also:
        `API $name <$link>`_
    #end if
    """

#end if
    __ooo_ns__: str = '$namespace'
    __ooo_full_ns__: str = '$fullname'
    __ooo_type_name__: str = 'exception'
    __pyunointerface__: str = '$fullname'
    __pyunostruct__: str = '$fullname'

    typeName: str = '$fullname'
    """Literal Constant ``$fullname``"""

    $self.get_constructor()
        """
        Constructor

        Keyword Arguments:
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $properties[$index]
#set $itm_name = $self.get_safe_word($itm['name'])
#set $itm_type = $itm['returns'].removeprefix('typing.')
#set $itm_type = re.sub(re_underscore_hex, '', $itm_type, 1)
            $itm_name ($itm_type, optional): $itm_name value.
#end for

            Other ``*args`` and ``**kwargs`` are passed to parent class.
        """
#if $self.has_uno_extends()
        super().__init__(**kwargs)

#end if
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $properties[$index]
#set $itm_name = $self.get_safe_word($itm.name)
#set $attrib_default = $self.get_attrib_default($itm, True)
    #if attrib_default == 'UNO_NONE'
        if $itm_name is UNO_NONE:
            self._$self.camel_to_snake($itm_name) = $self.get_attrib_default($itm)
        else:
            self._$self.camel_to_snake($itm_name) = $itm_name
    #else
        self._$self.camel_to_snake($itm_name) = $itm_name
    #end if
#end for

#if $is_method
#set $methods = $attribs['methods']
    #for $method in $methods
#set $m_desc = $method['desc']
#set $out_args = $self.get_out_args($method)
#set $raises = $self.get_raises_list($method)
    @abstractmethod
    $self.get_formated_meth($method)
        """
        #for $line in $self.line_gen($m_desc)
        $line
        #end for
    #if len($out_args) > 0

        #for $arg in $out_args
        * ``${arg}`` is an out direction argument.
        #end for
    #end if
    #if len($raises) > 0

        Raises:
        #for $itm in $raises
            $itm[0]: ``$itm[1]``
        #end for
    #end if
        """
    #end for
#end if
#if $is_properties
#for $property in $properties
#set $p_name = $self.get_safe_word($property['name'])
#set $p_return = $property['returns']
#set $p_desc = $property['desc']
    @property
    def ${p_name}(self) -> $property['returns']:
        """
    #for $line in $self.line_gen($p_desc)
        $line
    #end for
    #if $self.get_prop_has_errors($property)

        Raises:

    #for $long, $short in $self.get_prop_get_raises($property)
            $long: get raises ``$short``
    #end for
    #for $long, $short in $self.get_prop_set_raises($property)
            $long: set raises ``$short``
    #end for
    #end if
        """
        return self._$self.camel_to_snake($p_name)
    
    @${p_name}.setter
    def ${p_name}(self, value: $property['returns']) -> None:
        self._$self.camel_to_snake($p_name) = value

#end for
#end if
