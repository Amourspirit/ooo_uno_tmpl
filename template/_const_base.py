#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1638253499.3653295
__CHEETAH_genTimestamp__ = 'Tue Nov 30 01:24:59 2021'
__CHEETAH_src__ = '_const_base.tmpl'
__CHEETAH_srcLastModified__ = 'Tue Nov 30 01:24:51 2021'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class const_base(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(const_base, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # from _const_base import const_base as c_base
        # extends c_base
        #  set is const_dict is sorted
        #  str or list or tupple
        #  $from_imports is a tuple eg: $from_imports = [('.tab_align', 'TabAlign')]
        #  $const_dict, Comment can be string or list or tupple eg:
        # 
        # $const_dict = {
        #     "NONE": ("0", "No column or page break is applied."),
        # }
        #  Main Template
        base_class = 'ConstIntFlagsBase' if VFFSL(SL,"flags",True) else 'ConstIntBase'
        key_list = list(VFN(VFFSL(SL,"const_dict",True),"keys",False)())
        if VFFSL(SL,"sort",True): # generated from line 22, col 1
            _v = VFN(VFFSL(SL,"key_list",True),"sort",False)() # '$key_list.sort()' on line 23, col 1
            if _v is not None: write(_filter(_v, rawExpr='$key_list.sort()')) # from line 23, col 1.
        write('''# coding: utf-8
# this is a auto generated file generated by Cheetah
''')
        for imp in VFFSL(SL,"imports",True): # generated from line 27, col 1
            write('''import ''')
            _v = VFFSL(SL,"imp",True) # '$imp' on line 28, col 8
            if _v is not None: write(_filter(_v, rawExpr='$imp')) # from line 28, col 8.
            write('''
''')
        for frm, imp in VFFSL(SL,"from_imports",True): # generated from line 30, col 1
            write('''from ''')
            _v = VFFSL(SL,"frm",True) # '$frm' on line 31, col 6
            if _v is not None: write(_filter(_v, rawExpr='$frm')) # from line 31, col 6.
            write(''' import ''')
            _v = VFFSL(SL,"imp",True) # '$imp' on line 31, col 18
            if _v is not None: write(_filter(_v, rawExpr='$imp')) # from line 31, col 18.
            write('''
''')
        write('''from ...base.const import ''')
        _v = VFFSL(SL,"base_class",True) # '$base_class' on line 33, col 27
        if _v is not None: write(_filter(_v, rawExpr='$base_class')) # from line 33, col 27.
        write('''


class ''')
        _v = VFFSL(SL,"name",True) # '${name}' on line 36, col 7
        if _v is not None: write(_filter(_v, rawExpr='${name}')) # from line 36, col 7.
        write('''(''')
        _v = VFFSL(SL,"base_class",True) # '$base_class' on line 36, col 15
        if _v is not None: write(_filter(_v, rawExpr='$base_class')) # from line 36, col 15.
        write('''):
    """
''')
        if isinstance(VFFSL(SL,"desc",True), str): # generated from line 38, col 5
            write('''    ''')
            _v = VFFSL(SL,"desc",True) # '$desc' on line 39, col 5
            if _v is not None: write(_filter(_v, rawExpr='$desc')) # from line 39, col 5.
            write('''
''')
        else: # generated from line 40, col 5
            for line in VFFSL(SL,"desc",True): # generated from line 41, col 9
                write('''    ''')
                _v = VFFSL(SL,"line",True) # '$line' on line 42, col 5
                if _v is not None: write(_filter(_v, rawExpr='$line')) # from line 42, col 5.
                write('''
''')
        if VFFSL(SL,"link",True): # generated from line 45, col 1
            write('''
    See Also:
        `API ''')
            _v = VFFSL(SL,"name",True) # '$name' on line 48, col 14
            if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 48, col 14.
            write(''' <''')
            _v = VFFSL(SL,"link",True) # '$link' on line 48, col 21
            if _v is not None: write(_filter(_v, rawExpr='$link')) # from line 48, col 21.
            write('''>`_
''')
        write('''    """
''')
        for key in VFFSL(SL,"key_list",True): # generated from line 51, col 1
            value = VFFSL(SL,"const_dict",True)[VFFSL(SL,"key",True)]
            if VFFSL(SL,"hex",True): # generated from line 53, col 5
                write('''    ''')
                _v = VFFSL(SL,"key",True) # '$key' on line 54, col 5
                if _v is not None: write(_filter(_v, rawExpr='$key')) # from line 54, col 5.
                write(""" = int('""")
                _v = VFFSL(SL,"value",True)[0] # '${value[0]}' on line 54, col 17
                if _v is not None: write(_filter(_v, rawExpr='${value[0]}')) # from line 54, col 17.
                write("""', 16)
""")
            else: # generated from line 55, col 5
                write('''    ''')
                _v = VFFSL(SL,"key",True) # '$key' on line 56, col 5
                if _v is not None: write(_filter(_v, rawExpr='$key')) # from line 56, col 5.
                write(''' = ''')
                _v = VFFSL(SL,"value",True)[0] # '$value[0]' on line 56, col 12
                if _v is not None: write(_filter(_v, rawExpr='$value[0]')) # from line 56, col 12.
                write('''
''')
            if len(VFFSL(SL,"value",True)) > 1: # generated from line 58, col 5
                write('''    """
''')
                if isinstance(VFFSL(SL,"value",True)[1], str): # generated from line 60, col 9
                    write('''    ''')
                    _v = VFFSL(SL,"value",True)[1] # '${$value[1]}' on line 61, col 5
                    if _v is not None: write(_filter(_v, rawExpr='${$value[1]}')) # from line 61, col 5.
                    write('''
''')
                else: # generated from line 62, col 9
                    for line in VFFSL(SL,"value",True)[1]: # generated from line 63, col 13
                        write('''    ''')
                        _v = VFFSL(SL,"line",True) # '$line' on line 64, col 5
                        if _v is not None: write(_filter(_v, rawExpr='$line')) # from line 64, col 5.
                        write('''
''')
                write('''    """
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    sort = True 

    hex = False

    flags = False

    name = ""

    desc = "" 

    imports = []

    from_imports = []

    link = ""

    const_dict = {}

    _mainCheetahMethod_for_const_base = 'respond'

## END CLASS DEFINITION

if not hasattr(const_base, '_initCheetahAttributes'):
    templateAPIClass = getattr(const_base,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(const_base)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=const_base()).run()


