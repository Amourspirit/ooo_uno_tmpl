#from _base_struct import BaseStruct
#extends BaseStruct
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = False
#attr $name = ""
#attr $desc = "" ## str, list, tupple
#attr $quote = set()
#attr $typings = set()
#attr $sort = True ## set is attribs is sorted
#attr $link = ""
#attr $imports = []
#attr $inherits = []
#attr $from_imports = []
#attr $auto_imports = []
#attr $requires_typing = False
#attr $attribs = []
$self.load_data()#slurp
## Main Template
#set $safe_name = $self.get_safe_word($name)
#set $namespace = ''
#set $sorted = $self.get_sorted_names()
#set $str_inherits = "object"
#set $is_inherits = len($inherits) > 0
#if $is_inherits:
#set $str_inherits = $self.lst_to_str($inherits)
#end if
# coding: utf-8
# this is a auto generated file generated by Cheetah
#if $dynamic_struct:
import os
from collections import namedtuple
#end if
#for $imp in $imports
import $imp
#end for
#for $frm, $imp in $from_imports
from $frm import $imp
#end for
#if $requires_typing or $dynamic_struct:
import typing
#end if
#if len($auto_imports) > 0:
if typing.TYPE_CHECKING:
    #for $frm, $imp in $auto_imports
    from $frm import $imp
    #end for
#end if


class ${safe_name}(${str_inherits}):
    """
    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
#if $link:

    See Also:
        `API $name <$link>`_
#end if
#if $dynamic_struct:

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
#end if
    """
    def __init__(self, $self.get_constructor_str()):
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
#set $itm_name = $self.get_safe_word($itm.name)
        self._$self.camel_to_snake($itm_name) = $itm_name
#end for
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $self.get_attrib_for_prop($index)
#set $itm_name = $self.get_safe_word($itm.name)

    @property
    def ${itm_name}(self) -> $itm.type:
    #if $itm.lines
        """
        #if isinstance($itm.lines, str):
        $itm.lines
        #else
            #for $line in $itm.lines
        $line
            #end for
        #end if
        """
    #end if
        return self._$self.camel_to_snake($itm_name)
#end for
#if $dynamic_struct:

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global $safe_name
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not typing.TYPE_CHECKING:
        ${safe_name} = namedtuple('$safe_name', [$self.get_nt_names_str()])

if not typing.TYPE_CHECKING:
    _dynamic_struct()
#end if

__all__ = ['$safe_name']