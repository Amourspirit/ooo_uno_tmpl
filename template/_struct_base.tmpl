#from _base_struct import BaseStruct
#extends BaseStruct
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = False
#attr $name = ""
#attr $desc = "" ## str, list, tupple
#attr $sort = True ## set is attribs is sorted
#attr $link = ""
#attr $imports = []
#attr $inherits = []
#attr $from_imports = []
#attr $auto_imports = []
#attr $requires_typing = False
#attr $attribs = []
$self.load_data()#slurp
## Main Template
#set $lst_attrib = []
#set $s_attribs = ''
#set $constructor_str = ''
#set $namespace = ''
#set $sorted = []
#for $i, $itm in enumerate($attribs)
$sorted.append(($itm['name'], $i))#slurp
#end for
#if $sort
$sorted.sort()#slurp
#end if
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
    #if $i > 0
#set $s_attribs += ', '
#set $constructor_str += ', '
    #end if
#set $s_attribs += "'%s'" % ($itm['name'],)
#set $constructor_str += "%s: %s" % ($itm['name'], $itm['type'])
$lst_attrib.append($itm['name'])#slurp
#end for
#set $str_inherits = "object"
#set $is_inherits = len($inherits) > 0
#if $is_inherits:
#set $str_inherits = $self.lst_to_str($inherits)
#end if
# coding: utf-8
# this is a auto generated file generated by Cheetah
#if $dynamic_struct:
import os
import typing
from collections import namedtuple
#end if
#for $imp in $imports
import $imp
#end for
#for $frm, $imp in $from_imports
from $frm import $imp
#end for
#if $requires_typing == True or $dynamic_struct == False:
import typing
#end if
#if len($auto_imports) > 0:
if typing.TYPE_CHECKING:
    #for $frm, $imp in $auto_imports
    from $frm import $imp
    #end for
#end if


class ${name}(${str_inherits}):
    """
    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
#if $link:

    See Also:
        `API $name <$link>`_
#end if
#if $dynamic_struct:

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
#end if
    """
    def __init__(self, $self.get_constructor_str()):
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
        self._$self.camel_to_snake($itm.name) = $itm.name
#end for
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]

    @property
    def ${itm.name}(self) -> $itm.type:
    #if $itm.lines
        """
        #if isinstance($itm.lines, str):
        $itm.lines
        #else
            #for $line in $itm.lines
        $line
            #end for
        #end if
        #if 'orig_type' in $itm

        **Libre Office Type:** ``${itm['orig_type']}``
        #end if
        """
    #end if
        return self._$self.camel_to_snake($itm.name)
#end for
#if $dynamic_struct:

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global $name
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not typing.TYPE_CHECKING:
        ${name} = namedtuple('$name', [$s_attribs])

if not typing.TYPE_CHECKING:
    _dynamic_struct()
#end if

__all__ = ['$name']