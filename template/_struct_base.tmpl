#from _base_struct import BaseStruct
#import re
#extends BaseStruct
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = False
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ''
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = "" ## str, list, tupple
#attr $include_desc = True
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $quote = set()
#attr $typings = set()
#attr $attribs = {}
$self.load_data()#slurp
## Main Template
#set $re_underscore_hex = r"(_[0-9A-Fa-f]*)"
#set $safe_name = $self.get_safe_word($name)
#set $sorted = $self.get_sorted_names()
#set $fullname = $namespace + '.' + $safe_name
#set $is_properties = 'properties' in $attribs
#set $is_types = 'types' in $attribs
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
#for $imp in $imports
import $imp
#end for
#if $requires_typing:
import typing
#end if
#for $imp in $from_imports
$self.get_from_import($name, $imp)
#end for
#if len($from_imports_typing) > 0:
if typing.TYPE_CHECKING:
#for $imp in $from_imports_typing
    $self.get_from_import($name, $imp)
#end for
#end if


#if $allow_db:
class ${safe_name}($self.get_class_inherits_from_db()):
#else
class ${safe_name}($self.get_class_inherits($name, $inherits)):
#end if
#if $include_desc
    """
    Struct Class

    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
    #if $link:

    See Also:
        `API $name <$link>`_
    #end if
    """
#end if
    __ooo_ns__: str = '$namespace'
    __ooo_full_ns__: str = '$fullname'
    __ooo_type_name__: str = 'struct'
## typeName: Literal requires python >= 3.8
    typeName: str = '$fullname'
    """Literal Constant ``$fullname``"""

#if $is_types
#set $properties = $attribs['types']
#for $property in $properties
#set $p_name = $self.get_safe_word($property['name'])
#set $p_return = $self.get_q_type($property['returns'])
#set $p_desc = $property['desc']
    ${p_name}: typing.TypeAlias = $p_return
    """
    #for $line in $self.line_gen($p_desc)
    $line
    #end for
    """
#end for
#end if

    def __init__(self, *args, **kwargs):
        """
        Constructor

        Other Arguments:
            First positinal arg can be another ``$safe_name`` instance,
                if it is the only argument passed to contructor;
                Otherwise, postitional arguments are treated as ``$safe_name``
                values. Following the order of ``Keyword Arguments``.

        Keyword Arguments:
##set $nada = $print($sorted)
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs['properties'][$index]
#set $itm_name = $self.get_safe_word($itm.name)
#set $itm_type = $itm.returns.removeprefix('typing.')
#set $itm_type = re.sub(re_underscore_hex, '', $itm_type, 1)
            $itm_name ($itm_type, optional): $itm_name value
#end for
        """
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs['properties'][$index]
#set $itm_name = $self.get_safe_word($itm.name)
        self._$self.camel_to_snake($itm_name) = None
#end for

        key_order = ($self.get_nt_names_str())
        arg_len = len(args)
        if arg_len == 1:
            if isinstance(args[0], $safe_name):
                oth = args[0]
                for key in key_order:
                    setattr(self, key, getattr(oth, key))
                return

        if  arg_len > len(key_order):
            raise ValueError("${safe_name}.__init__() To many parameters")
        for i, arg in enumerate(args):
            setattr(self, key_order[i], arg)
        for k, v in kwargs.items():
            if k in key_order:
                setattr(self, k, v)

#if $is_properties
#set $properties = $attribs['properties']
#for $property in $properties
#set $p_name = $self.get_safe_word($property['name'])
#set $p_return = $self.get_q_type($property['returns'])
#set $p_desc = $property['desc']
    @property
    def ${p_name}(self) -> $p_return:
        """
    #for $line in $self.line_gen($p_desc)
        $line
    #end for
        """
        return self._$self.camel_to_snake($p_name)
    
    @${p_name}.setter
    def ${p_name}(self, value: $p_return) -> None:
        self._$self.camel_to_snake($p_name) = value

#end for
#end if

__all__ = ['$safe_name']