#from _base_struct import BaseStruct
#extends BaseStruct
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = True
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ''
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = "" ## str, list, tupple
#attr $include_desc = True
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $quote = set()
#attr $typings = set()
#attr $attribs = []
$self.load_data()#slurp
## Main Template
#set $safe_name = $self.get_safe_word($name)
#set $sorted = $self.get_sorted_names()
#set $fullname = $namespace + '.' + $name
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
#for $imp in $imports
import $imp
#end for
#for $imp in $from_imports
$self.get_from_import($name, $imp)
#end for
#if $requires_typing or $dynamic_struct:
import typing
#end if
#if len($from_imports_typing) > 0:
if typing.TYPE_CHECKING:
#for $imp in $from_imports_typing
    $self.get_from_import($name, $imp)
#end for
#end if
#if $dynamic_struct:
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not typing.TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True
    from ooo_uno.helper import uno_helper
#end if

#if $dynamic_struct:
if typing.TYPE_CHECKING or _DYNAMIC is False:
#else
if True:
#end if


#if $allow_db:
    class ${safe_name}($self.get_class_inherits_from_db()):
#else
    class ${safe_name}($self.get_class_inherits($name, $inherits)):
#end if
#if $include_desc
        """
        Struct Class

        #if isinstance($desc, str)
        $desc
        #else
            #for $line in $desc
        $line
            #end for
        #end if
        #if $link:

        See Also:
            `API $name <$link>`_
        #end if

        #if $dynamic_struct:

        Note:
            | At runtime $name will be an actual uno struct however can seamlessly be treated as a regualr class.
            | At design time a class is presumed. This allows for better typings.
            | $name is a callable and can be treatead as a class and create instances.
        #end if
        """

#end if
        def __init__(self, $self.get_constructor_str(opt=True)):
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
#set $itm_name = $self.get_safe_word($itm.name)
            self._$self.camel_to_snake($itm_name) = $itm_name
#end for
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $self.get_attrib_for_prop($index)
#set $itm_name = $self.get_safe_word($itm.name)

        @property
        def ${itm_name}(self) -> $itm.type:
    #if $include_desc and $itm.lines
            """
        #if isinstance($itm.lines, str):
            $itm.lines
        #else
            #for $line in $itm.lines
            $line
            #end for
        #end if
            """
    #end if
            return self._$self.camel_to_snake($itm_name)
        
        @${itm_name}.setter
        def ${itm_name}(self, value: $itm.type) -> None:
            self._$self.camel_to_snake($itm_name) = value
#end for

#if $dynamic_struct:
if not typing.TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        # Dynamically create uno struct using uno
        global $safe_name
        order = ($self.get_nt_names_str())

        def _struct_init(*args, **kwargs):
            struct = uno_helper.create_uno_struct('${fullname}')
            for i, arg in enumerate(args):
                if arg is None:
                    continue
                setattr(struct, order[i], arg)
            for k, v in kwargs.items():
                setattr(struct, k, v)
            return struct
        $safe_name = _struct_init

    _dynamic_struct()
#end if

__all__ = ['$safe_name']