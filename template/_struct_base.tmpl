##from _struct_base import struct_base as s_base
##extends s_base
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $desc = "" ## str, list, tupple
#attr $link = ""
#attr $imports = []
## $from_imports is a tuple eg: $from_imports = [('.tab_align', 'TabAlign')]
#attr $from_imports = []
## $attribs is the list of dictionary itmes.
#*
[
    {
        "name": "Alignment",                        # Name of struct attribute
        "type": 'int',                              # type of the struct attribute
        "orig_type": "com.sun.star.style.byte",     # original type
        "lines": ('comment line',)                  # comment text, str, [], (,) etc
    }
]
*# 
#attr $attribs = []
## Main Template
#set $lst_attrib = []
#set $s_attribs = ''
#set $constructor_str = ''
#set $sorted = []
#for $i, $itm in enumerate($attribs)
$sorted.append(($itm['name'], $i))#slurp
#end for
#if $sort
$sorted.sort()#slurp
#end if
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
    #if $i > 0
#set $s_attribs += ', '
#set $constructor_str += ', '
    #end if
#set $s_attribs += "'%s'" % ($itm['name'],)
#set $constructor_str += "%s: %s" % ($itm['name'], $itm['type'])
$lst_attrib.append($itm['name'])#slurp
#end for
# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
#for $imp in $imports
import $imp
#end for
from collections import namedtuple
from typing import TYPE_CHECKING
#for $frm, $imp in $from_imports
from $frm import $imp
#end for


class ${name}(object):
    """
    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
#if $link:

    See Also:
        `API $name <$link>`_
#end if

    Note:
        | At runtime this will be a `namedtuple <https://docs.python.org/3/library/collections.html#collections.namedtuple>`_ and not a class.
        | At design time a class is presumed. This allows for better typings.
        | Effectively functionallity is the same and namedtuple is more efficient than a class.
    """
    def __init__(self, $constructor_str):
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]
        self._${itm.name} = $itm.name
#end for
#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $attribs[$index]

    @property
    def ${itm.name}(self) -> $itm.type:
    #if $itm.lines
        """
        #if isinstance($itm.lines, str):
        $itm.lines
        #else
            #for $line in $itm.lines
        $line
            #end for
        #end if
        #if 'orig_type' in $itm

        **Libre Office Type:** ``${itm['orig_type']}``
        #end if
        """
    #end if
        return self._${itm.name}
#end for

def _dynamic_struct():
    # Dynamically create nametuple that is more efficient as stand in for struct

    global $name
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if not TYPE_CHECKING:
        ${name} = namedtuple('$name', [$s_attribs])

if not TYPE_CHECKING:
    _dynamic_struct()

__all__ = ['$name']
