#from _base_struct_dyn import BaseStructDyn
#extends BaseStructDyn
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = True
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ''
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = "" ## str, list, tupple
#attr $include_desc = True
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $quote = set()
#attr $typings = set()
#attr $attribs = []
##  following attr will get values from BaseStructDyn class
#attr $uno_obj = 'uno_obj'
#attr $dyn = 'dyn'
$self.load_data()#slurp
## Main Template
#set $safe_name = $self.get_safe_word($name)
#set $full_name = $namespace + '.' + $name
#set $uno_obj_ns = $dyn + $full_name.removeprefix('com.sun.star').rsplit(sep='.', maxsplit=1)[0]
#set $uno_obj_in = $uno_obj + $full_name.removeprefix('com.sun.star')
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
from typing import TYPE_CHECKING
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_struct() -> None:
        import uno
        # Dynamically create uno struct using uno
        global $safe_name

        def _struct_init(*args, **kwargs):
            arg_len = len(args)
            if arg_len == 1:
                from $namespace import $safe_name as U${safe_name}
                if isinstance(args[0], U${safe_name}):
                    struct = uno.createUnoStruct(
                        '${full_name}', args[0])
                return struct

            key_order = ($self.get_nt_names_str())
            struct = uno.createUnoStruct('${full_name}')
            if arg_len > len(key_order):
                raise ValueError("${safe_name}.__init__() To many parameters")
            for i, arg in enumerate(args):
                setattr(struct, key_order[i], arg)
            for k, v in kwargs.items():
                if k in key_order:
                    setattr(struct, k, v)
            return struct
        $safe_name = _struct_init

    _dynamic_struct()
else:
    $self.get_rel_import(in_str=$uno_obj_in, ns=$uno_obj_ns) as $safe_name

__all__ = ['${safe_name}']
