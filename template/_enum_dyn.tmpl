#from _base_enum_dyn import BaseEnumDyn
#extends BaseEnumDyn
#implements respond
$self.init_data()#slurp
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ""
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $desc = "" ## str, list, tupple
#attr $quote = set()
#attr $typings = set()
## $enum_dict
#*
key: const name
value: string or list, tuple of strings
*#
#attr $enum_dict = {}
##  following attr will get values from BaseExDyn class
#attr $uno_obj = 'uno_obj'
#attr $dyn = 'dyn'
$self.load_data()#slurp
## Main Template
#set $safe_name = $self.get_safe_word($name)
#set s_enum = ''
#set $key_list = list($enum_dict.keys())
#set $full_name = $namespace + '.' + $name
#set $uno_obj_ns = $dyn + $full_name.removeprefix('com.sun.star').rsplit(sep='.', maxsplit=1)[0]
#set $uno_obj_in = $uno_obj + $full_name.removeprefix('com.sun.star')
#set $s_enum = $self.dict_keys_to_str($enum_dict)
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
from typing import TYPE_CHECKING
from enum import Enum
from ooo_uno.oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False
if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    from ooo_uno.helper.enum_helper import uno_enum_class_new
    from $full_name import ($s_enum)

    def _dynamic_enum():
        # Dynamically create class that actually contains UNO enum instances
        global $safe_name
        _dict = {
#for $key in $key_list
#set $safe_key = $self.get_safe_word($key)
            "$safe_key": ${safe_key},
#end for
        }

        $safe_name = type('$safe_name', (object,), {
            '__doc__': 'class created dynamically. Class loosly mimics Enum',
            "__new__": uno_enum_class_new
        })
        for k, v in _dict.items():
            setattr($safe_name, k, v)

    _dynamic_enum()
else:
    $self.get_rel_import(in_str=$uno_obj_in, ns=$uno_obj_ns) as $safe_name

__all__ = ['$safe_name']
