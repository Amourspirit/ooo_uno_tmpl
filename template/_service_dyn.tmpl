#from _base_service_dyn import BaseServiceDyn
#extends BaseServiceDyn
#implements respond
$self.init_data()#slurp
#attr $name = ""
#attr $namespace = ""
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = []
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $extends_map = {}
#attr $imports = []
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $attribs = {}
##  following attr will get values from BaseServiceDyn class
#attr $uno_obj = 'uno_obj'
#attr $dyn = 'dyn'
$self.load_data()#slurp
## main Template
#set $safe_name = $self.get_safe_word($name)
#set $full_name = $namespace + '.' + $name
#set $uno_obj_ns = $dyn + $full_name.removeprefix('com.sun.star').rsplit(sep='.', maxsplit=1)[0]
#set $uno_obj_in = $uno_obj + $full_name.removeprefix('com.sun.star')
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Service Class
# this is a auto generated file generated by Cheetah
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
# Namespace: $namespace
#end if

from typing import TYPE_CHECKING, Optional, Iterable, Union
$self.get_rel_import(in_str=$uno_obj_in, ns=$uno_obj_ns) as $safe_name
## from ...uno_obj.accessibility.accessible_context import AccessibleContext as AccessibleContext
from ooo_uno.helper import uno_helper
if TYPE_CHECKING:
## from ...uno_obj.uno.x_component_context import XComponentContext
    $self.get_rel_import(in_str='uno_obj.uno.XComponentContext', ns=$uno_obj_ns) as XComponentContext

def create_service(ctx: 'Optional[XComponentContext]' = None, args: Optional[Iterable[object]] = None) -> Union[$safe_name, None]:
    """
    Create $safe_name service using ServiceManager Factory

    Args:
        ctx (XComponentContext, optional): context used to create service. Defaults to ``None``.
        args (Iterable[object], optional): args that are passed to ServiceManager . Defaults to ``None``.

    Returns:
        Union[${safe_name}, None]: Service if it is available; Otherwise, ``None``
    """
    return uno_helper.create_uno_service(cClass='${full_name}', ctx=ctx, args=args)

__all__ = ['${safe_name}', 'create_service']
