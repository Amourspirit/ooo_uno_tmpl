#from _base_enum import BaseEnum
#extends BaseEnum
#implements respond
$self.init_data()#slurp
#attr $sort = True ## set is attribs is sorted
#attr $ns = ""
#attr $name = ""
#attr $desc = "" ## str, list, tupple
#attr $link = ""
## $enum_dict
#*
key: const name
value: string or list, tuple of strings
*#
#attr $enum_dict = {}
$self.load_data()#slurp
## Main Template
#set s_enum = ''
#set $key_list = list($enum_dict.keys())
#set $full_name = $ns + '.' + $name
#set $s_enum = $self.dict_keys_to_str($enum_dict)
# coding: utf-8
# this is a auto generated file generated by Cheetah
import os
from typing import TYPE_CHECKING
from enum import Enum
from ...oenv import UNO_ENVIRONMENT
if (not TYPE_CHECKING) and UNO_ENVIRONMENT:
    from ...helper.enum_helper import uno_enum_class_new
    from $full_name import ($s_enum)


class ${name}(Enum):
    """
    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
#if $link:

    See Also:
        `API $name <$link>`_
#end if
    """
    #for $key in $key_list
#set $value = $enum_dict[$key]
    $key = '$key'
    """
#if isinstance($value, str):
    $value
#else
    #for $line in $value
    $line
    #end for
#end if
    """
    #end for

def _dynamic_enum():
    # Dynamically create class that actually contains UNO enum instances

    global $name
    ignore = os.environ.get('ooouno_ignore_runtime', 'False')
    if ignore == 'True':
        return
    # if statment is to stop VS Code from reporting errors
    if (not TYPE_CHECKING) and UNO_ENVIRONMENT:

        _dict = {
#for $key in $key_list
            "$key": ${key},
#end for
        }
        ${name} = type('$name', (object,), {
            '__doc__': 'class created dynamically. Class loosly mimics Enum',
            "__new__": uno_enum_class_new
        })
        for k, v in _dict.items():
            setattr(${name}, k, v)

if UNO_ENVIRONMENT:
    _dynamic_enum()

__all__ = ['$name']
