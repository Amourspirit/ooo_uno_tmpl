#from _base_enum import BaseEnum
#extends BaseEnum
#implements respond
$self.init_data()#slurp
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ""
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $desc = "" ## str, list, tupple
#attr $quote = set()
#attr $typings = set()
## $enum_dict
#*
key: const name
value: string or list, tuple of strings
*#
#attr $enum_dict = {}
$self.load_data()#slurp
## Main Template
#set $safe_name = $self.get_safe_word($name)
#set $fullname = $namespace + '.' + $safe_name
#set s_enum = ''
#set $key_list = list($enum_dict.keys())
#set $s_enum = $self.dict_keys_to_str($enum_dict)
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Enum Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
from typing import cast
from enum import Enum
## from com.sun.star.table.CellContentType import CellContentTypeProto
from $fullname import ${safe_name}Proto

class ${safe_name}(Enum):
    """
    Enum Class

    #if isinstance($desc, str) and $desc
    $desc
    #else
        #for $line in $desc
            #if $line
    $line
            #end if
        #end for
    #end if
#if $link:

    See Also:
        `API $name <$link>`_
#end if
    """
    __ooo_ns__: str = '$namespace'
    __ooo_full_ns__: str = '$fullname'
    __ooo_type_name__: str = 'enum'

    @property
    def typeName(self) -> str:
        return '$fullname'

#for $key in $key_list
#set $value = $enum_dict[$key]
    $self.get_safe_word($key) = cast(${safe_name}Proto, '$key')
    """
#if isinstance($value, str):
    $value
#else
    #for $line in $value
    $line
    #end for
#end if
    """
#end for

__all__ = ['$safe_name']
