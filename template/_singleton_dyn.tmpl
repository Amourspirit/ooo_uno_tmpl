#import typing
#from _base_singleton_dyn import BaseSingletonDyn
#extends BaseSingletonDyn
## see: https://cheetahtemplate.org/users_guide/inheritanceEtc.html#implements
#implements respond
$self.init_data()#slurp
#attr $name = ""
#attr $namespace = ""
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = []
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $requires_typing = False
#attr $include_desc = True
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
## $from_imports is a tuple eg: $from_imports = [('.tab_align', 'TabAlign')]
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $attribs = {}
##  following attr will get values from BaseInterfaceDyn class
#attr $uno_obj = ''
#attr $dyn = ''
#attr $oenv = ''
$self.load_data()#slurp
## main Template
#set $safe_name = $self.get_safe_word($name)
#set $fullname = $namespace + '.' + $safe_name
#set $uno_obj_ns = $dyn + $fullname.removeprefix('com.sun.star').rsplit(sep='.', maxsplit=1)[0]
#set $uno_obj_in = $uno_obj + $fullname.removeprefix('com.sun.star')
#*
The following singleton service is not found in ctx
'/singletons/com.sun.star.script.theServiceDocumenter'

However the following is found:
'/singletons/com.sun.star.util.theServiceDocumenter'

SupportedServiceNames for this class however does include
'com.sun.star.script.ServiceDocumenter'

This is the only case that pattern does not follow: '/singletons/' + $fullname
*#
#if $fullname == 'com.sun.star.script.theServiceDocumenter'
#set $name_value = '/singletons/com.sun.star.util.theServiceDocumenter'
#else
#set $name_value = '/singletons/' + $fullname
#end if
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Singleton Class
# this is a auto generated file generated by Cheetah
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
# Namespace: $namespace
from typing import TYPE_CHECKING
from $oenv import UNO_ENVIRONMENT, UNO_RUNTIME
_DYNAMIC = False

if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:
    _DYNAMIC = True

if not TYPE_CHECKING and _DYNAMIC:
    def _dynamic_singleton() -> None:
        # Dynamically create uno singleton using component context
        import uno
        global $safe_name

        def _singleton_init():
            ctx = uno.getComponentContext()
            key = '$name_value'
            singleton = ctx.getByName(key)
            return singleton
        $safe_name = _singleton_init
    _dynamic_singleton()
else:
    $self.get_rel_import(in_str=$uno_obj_in, ns=$uno_obj_ns) as $safe_name

__all__ = ['$safe_name']