#import typing
#from _base_singleton import BaseSingleton
#extends BaseSingleton
## see: https://cheetahtemplate.org/users_guide/inheritanceEtc.html#implements
#implements respond
$self.init_data()#slurp
#attr $name = ""
#attr $namespace = ""
#attr $libre_office_ver = False
#attr $desc = []
#attr $quote = set()
#attr $typings = set()
#attr $link = ""
#attr $requires_typing = False
#attr $include_desc = True
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
## $from_imports is a tuple eg: $from_imports = [('.tab_align', 'TabAlign')]
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $attribs = {}
$self.load_data()#slurp
## main Template
#set $safe_name = $self.get_safe_word($name)
#set $is_method = 'methods' in $attribs
#set $is_properties = 'properties' in $attribs
#set $abc_imports = $self.get_abstract_imports([$is_method],[$is_properties])
# coding: utf-8
# Singleton Class
# this is a auto generated file generated by Cheetah
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
#if $requires_typing
import typing
#end if
#for $imp in $imports
import $imp
#end for
#if len($abc_imports) > 0
from abc import $self.lst_to_str($abc_imports)
#end if
#for $imp in $from_imports
$self.get_from_import($name, $imp)
#end for
#if len($from_imports_typing) > 0
if typing.TYPE_CHECKING:
#for $imp in $from_imports_typing
    $self.get_from_import($name, $imp)
#end for
#end if


class ${safe_name}($self.get_class_inherits($name, $inherits))$self.get_class_end()
#if $include_desc
    """
    #for $line in $self.line_gen($desc)
    $line
    #end for
    #if $link:

    See Also:
        `API $name <$link>`_
    #end if
    """

#end if
#if $is_properties
#set $properties = $attribs['properties']
#for $property in $properties
#set $p_name = $self.get_safe_word($property['name'])
#set $p_return = $self.get_q_type($property['returns'])
#set $p_desc = $property['desc']
    @abstractproperty
    def ${p_name}(self) -> $p_return:
        """
    #for $line in $self.line_gen($p_desc)
        $line
    #end for
    #if $self.get_prop_has_errors($property)

        Raises:

    #for $long, $short in $self.get_prop_get_raises($property)
            $long: get raises ``$short``
    #end for
    #for $long, $short in $self.get_prop_set_raises($property)
            $long: set raises ``$short``
    #end for
    #end if
        """
#end for
#end if
