#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from _base_typedef_pyi import BaseTypeDefPyi

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post2'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 2)
__CHEETAH_genTime__ = 1649888089.1264334
__CHEETAH_genTimestamp__ = 'Wed Apr 13 18:14:49 2022'
__CHEETAH_src__ = '_typedef_pyi.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Apr 13 18:08:53 2022'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class typedef_pyi(BaseTypeDefPyi):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(typedef_pyi, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        _v = VFN(VFFSL(SL,"self",True),"init_data",False)() # '$self.init_data()' on line 4, col 1
        if _v is not None: write(_filter(_v, rawExpr='$self.init_data()')) # from line 4, col 1.
        _v = VFN(VFFSL(SL,"self",True),"load_data",False)() # '$self.load_data()' on line 17, col 1
        if _v is not None: write(_filter(_v, rawExpr='$self.load_data()')) # from line 17, col 1.
        #  main Template
        safe_name = VFN(VFFSL(SL,"self",True),"get_safe_word",False)(VFFSL(SL,"name",True))
        write('''# coding: utf-8
''')
        self._handleCheetahInclude("resources/inc_lic.txt", trans=trans, includeFrom="file", raw=True)
        write('''# TypeDef
# this is a auto generated file generated by Cheetah
''')
        if VFFSL(SL,"libre_office_ver",True): # generated from line 24, col 1
            write('''# Libre Office Version: ''')
            _v = VFFSL(SL,"libre_office_ver",True) # '$libre_office_ver' on line 25, col 25
            if _v is not None: write(_filter(_v, rawExpr='$libre_office_ver')) # from line 25, col 25.
            write('''
# Namespace: ''')
            _v = VFFSL(SL,"namespace",True) # '$namespace' on line 26, col 14
            if _v is not None: write(_filter(_v, rawExpr='$namespace')) # from line 26, col 14.
            write('''
''')
        write('''import typing
''')
        for frm, imp in VFFSL(SL,"from_imports",True): # generated from line 29, col 1
            write('''from ''')
            _v = VFFSL(SL,"frm",True) # '$frm' on line 30, col 6
            if _v is not None: write(_filter(_v, rawExpr='$frm')) # from line 30, col 6.
            write(''' import ''')
            _v = VFFSL(SL,"imp",True) # '$imp' on line 30, col 18
            if _v is not None: write(_filter(_v, rawExpr='$imp')) # from line 30, col 18.
            write('''
''')
        write('''
''')
        #  type should not get quotes in this case. If type is wrapped affects how it is read and can be seen as a literal string.
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 34, col 1
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 34, col 1.
        write(""" = typing.NewType('""")
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 34, col 30
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 34, col 30.
        write("""', """)
        _v = VFFSL(SL,"type",True) # '$type' on line 34, col 43
        if _v is not None: write(_filter(_v, rawExpr='$type')) # from line 34, col 43.
        write(''')
''')
        if VFFSL(SL,"include_desc",True): # generated from line 35, col 1
            write('''"""
TypeDef type alias

''')
            for line in VFN(VFFSL(SL,"self",True),"line_gen",False)(VFFSL(SL,"desc",True)): # generated from line 39, col 1
                _v = VFFSL(SL,"line",True) # '$line' on line 40, col 1
                if _v is not None: write(_filter(_v, rawExpr='$line')) # from line 40, col 1.
                write('''
''')
            if VFFSL(SL,"link",True): # generated from line 42, col 1
                write('''
See Also:
    `API ''')
                _v = VFFSL(SL,"name",True) # '$name' on line 45, col 10
                if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 45, col 10.
                write(''' <''')
                _v = VFFSL(SL,"link",True) # '$link' on line 45, col 17
                if _v is not None: write(_filter(_v, rawExpr='$link')) # from line 45, col 17.
                write('''>`_
''')
            write('''"""
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    name = ""

    namespace = ""

    allow_db = True

    libre_office_ver = False

    desc = []

    quote = set()

    typings = set()

    link = ""

    type = ""

    include_desc = True

    requires_typing = False

    from_imports = []

    _mainCheetahMethod_for_typedef_pyi = 'respond'

## END CLASS DEFINITION

if not hasattr(typedef_pyi, '_initCheetahAttributes'):
    templateAPIClass = getattr(typedef_pyi,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(typedef_pyi)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=typedef_pyi()).run()


