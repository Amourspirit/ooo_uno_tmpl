#from _base_struct_pyi import BaseStructPyi
#import re
#extends BaseStructPyi
#implements respond
$self.init_data()#slurp
#attr $dynamic_struct = False
#attr $sort = True ## set is attribs is sorted
#attr $name = ""
#attr $namespace = ''
#attr $allow_db = True
#attr $libre_office_ver = False
#attr $desc = ""
#attr $include_desc = True
#attr $link = ""
#attr $requires_typing = False
#attr $inherits = []
#attr $imports = []
#attr $extends_map = {}
#attr $from_imports = []
#attr $from_imports_typing = []
#attr $quote = set()
#attr $typings = set()
#attr $attribs = []
#attr $fullname = ''
##  following attr will get values from Base class
#attr $oenv = 'ooo.oenv.env_const'
$self.load_data()#slurp
## Main Template
#set $re_underscore_hex = r"(_[0-9A-Fa-f]*)"
#set $safe_name = $self.get_safe_word($name)
#set $sorted = $self.get_sorted_names()
#set $is_parent = $self.has_uno_extends()
#set $is_local_args = $self.is_inst_args()
#set $is_non_local_args = $self.is_parent_args()
#set $args_all = $self.get_class_args_all()
#set $args_local = $self.get_class_args_inst()
# coding: utf-8
#include raw "resources/inc_lic.txt"
# Struct Class
# this is a auto generated file generated by Cheetah
# Namespace: $namespace
#if $libre_office_ver:
# Libre Office Version: $libre_office_ver
#end if
## from typing_extensions import Literal
#for $imp in $imports
import $imp
#end for
#for $imp in $from_imports
$self.get_from_import($name, $imp)
#end for
#if $requires_typing or len($sorted) > 0:
import typing
#end if
#if len($from_imports_typing) > 0:
## if typing.TYPE_CHECKING:
#for $imp in $from_imports_typing
$self.get_from_import($name, $imp)
#end for
#end if


#if $allow_db:
class ${safe_name}($self.get_class_inherits_from_db()):
#else
class ${safe_name}($self.get_class_inherits($name, $inherits)):
#end if
#if $include_desc
    """
    Struct Class

    #if isinstance($desc, str)
    $desc
    #else
        #for $line in $desc
    $line
        #end for
    #end if
    #if $link:

    See Also:
        `API $name <$link>`_
    #end if
    """
#end if
## using a literal for the typeName result in mypy error because of inheritance.
    typeName: str = '$fullname'

#set $_, $first_index = $sorted[0]
#set $first_itm = $attribs[$first_index]
#set $first_itm_name = $self.get_safe_word($first_itm['name'])
    $self.get_constructor()
        """
        Constructor

        Arguments:
#for $arg in $args_all
#set $arg_type = re.sub(re_underscore_hex, '', $arg.type, 1)
            $arg.name ($arg_type, optional): $arg.name value.
#end for
        """
        ...

#for $i, $tpl in enumerate($sorted)
#set $index = tpl[1]
#set $itm = $self.get_attrib_for_prop($index)
#set $itm_name = $self.get_safe_word($itm['name'])
    @property
    def ${itm_name}(self) -> $itm['type']:
#if $include_desc and $itm['desc']
        """
    #if isinstance($itm['desc'], str):
        $itm['desc']
    #else
        #for $line in $itm['desc']
        $line
        #end for
    #end if
        """
        ...
#else
        ...
#end if
    @${itm_name}.setter
    def ${itm_name}(self, value: $itm['type']) -> None:
        ...
#end for
