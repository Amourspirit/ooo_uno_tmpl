#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode
from _base_ex_dyn import BaseExDyn

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.2.6.post1'
__CHEETAH_versionTuple__ = (3, 2, 6, 'post', 1)
__CHEETAH_genTime__ = 1684193714.8476064
__CHEETAH_genTimestamp__ = 'Mon May 15 19:35:14 2023'
__CHEETAH_src__ = '_ex_dyn.tmpl'
__CHEETAH_srcLastModified__ = 'Mon May 15 19:35:11 2023'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ex_dyn(BaseExDyn):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ex_dyn, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        #  see: https://cheetahtemplate.org/users_guide/inheritanceEtc.html#implements
        _v = VFN(VFFSL(SL,"self",True),"init_data",False)() # '$self.init_data()' on line 5, col 1
        if _v is not None: write(_filter(_v, rawExpr='$self.init_data()')) # from line 5, col 1.
        #   following attr will get values from BaseExDyn class
        _v = VFN(VFFSL(SL,"self",True),"load_data",False)() # '$self.load_data()' on line 28, col 1
        if _v is not None: write(_filter(_v, rawExpr='$self.load_data()')) # from line 28, col 1.
        #  main Template
        safe_name = VFN(VFFSL(SL,"self",True),"get_safe_word",False)(VFFSL(SL,"name",True))
        fullname = VFFSL(SL,"namespace",True) + '.' + VFFSL(SL,"safe_name",True)
        uno_obj_ns = VFFSL(SL,"dyn",True) + VFN(VFN(VFFSL(SL,"fullname",True),"removeprefix",False)('com.sun.star'),"rsplit",False)(sep='.', maxsplit=1)[0]
        uno_obj_in = VFFSL(SL,"uno_obj",True) + VFN(VFFSL(SL,"fullname",True),"removeprefix",False)('com.sun.star')
        uno_helper_namespace = VFFSL(SL,"helper_ns",True) + '.' + VFFSL(SL,"helper_mod",True)
        properties = VFN(VFFSL(SL,"self",True),"get_properties_all",False)()
        sorted = VFN(VFFSL(SL,"self",True),"get_sorted_names",False)()
        is_sorted = len(VFFSL(SL,"sorted",True)) > 0
        write('''# coding: utf-8
''')
        self._handleCheetahInclude("resources/inc_lic.txt", trans=trans, includeFrom="file", raw=True)
        write('''# Exception Class
# this is a auto generated file generated by Cheetah
# Namespace: ''')
        _v = VFFSL(SL,"namespace",True) # '$namespace' on line 42, col 14
        if _v is not None: write(_filter(_v, rawExpr='$namespace')) # from line 42, col 14.
        write('''
''')
        if VFFSL(SL,"libre_office_ver",True): # generated from line 43, col 1
            write('''# Libre Office Version: ''')
            _v = VFFSL(SL,"libre_office_ver",True) # '$libre_office_ver' on line 44, col 25
            if _v is not None: write(_filter(_v, rawExpr='$libre_office_ver')) # from line 44, col 25.
            write('''
''')
        write('''import uno
from typing import TYPE_CHECKING
from ''')
        _v = VFFSL(SL,"oenv",True) # '$oenv' on line 48, col 6
        if _v is not None: write(_filter(_v, rawExpr='$oenv')) # from line 48, col 6.
        write(''' import UNO_ENVIRONMENT, UNO_RUNTIME

if (not TYPE_CHECKING) and UNO_RUNTIME and UNO_ENVIRONMENT:

    def _get_class():
        orig_init = None
        ordered_keys = (''')
        _v = VFN(VFFSL(SL,"self",True),"get_nt_names_all_str",False)() # '$self.get_nt_names_all_str()' on line 54, col 25
        if _v is not None: write(_filter(_v, rawExpr='$self.get_nt_names_all_str()')) # from line 54, col 25.
        write(''')
        def init(self, *args, **kwargs):
            if len(kwargs) == 0 and len(args) == 1 and getattr(args[0], "__class__", None) == self.__class__:
                orig_init(self, args[0])
                return
            kargs = kwargs.copy()
            for i, arg in enumerate(args):
                kargs[ordered_keys[i]] = arg
            orig_init(self, **kargs)

        type_name = \'''')
        _v = VFFSL(SL,"fullname",True) # '$fullname' on line 64, col 22
        if _v is not None: write(_filter(_v, rawExpr='$fullname')) # from line 64, col 22.
        write("""'
        ex = uno.getClass(type_name)
        ex.__ooo_ns__ = '""")
        _v = VFFSL(SL,"namespace",True) # '$namespace' on line 66, col 26
        if _v is not None: write(_filter(_v, rawExpr='$namespace')) # from line 66, col 26.
        write("""'
        ex.__ooo_full_ns__= type_name
        ex.__ooo_type_name__ = 'exception'
        orig_init = ex.__init__
        ex.__init__ = init
        return ex

    """)
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 73, col 5
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 73, col 5.
        write(''' = _get_class()

else:
    from ''')
        _v = VFFSL(SL,"namespace",True) # '$namespace' on line 76, col 10
        if _v is not None: write(_filter(_v, rawExpr='$namespace')) # from line 76, col 10.
        write(''' import ''')
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 76, col 28
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 76, col 28.
        write(''' as ''')
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 76, col 42
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 76, col 42.
        write("""

__all__ = ['""")
        _v = VFFSL(SL,"safe_name",True) # '$safe_name' on line 78, col 13
        if _v is not None: write(_filter(_v, rawExpr='$safe_name')) # from line 78, col 13.
        write("""']
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    name = ""

    namespace = ""

    allow_db = True

    libre_office_ver = False

    include_desc = True

    desc = []

    quote = set()

    typings = set()

    link = ""

    requires_typing = False

    inherits = []

    extends_map = {}

    imports = []

    from_imports = []

    from_imports_typing = []

    attribs = {}

    uno_obj = ''

    dyn = ''

    oenv = ''

    helper_ns = ''

    helper_mod = ''

    _mainCheetahMethod_for_ex_dyn = 'respond'

## END CLASS DEFINITION

if not hasattr(ex_dyn, '_initCheetahAttributes'):
    templateAPIClass = getattr(ex_dyn,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ex_dyn)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit https://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ex_dyn()).run()


